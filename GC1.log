2025-07-10 17:36:23,696	INFO dashboard_sdk.py:338 -- Uploading package gcs://_ray_pkg_40b5bb40417e4076.zip.
2025-07-10 17:36:23,698	INFO packaging.py:575 -- Creating a file package for local module '.'.
Job submission server address: http://localhost:8265

-------------------------------------------------------
Job 'raysubmit_XBWCyyrYnQGyyYqR' submitted successfully
-------------------------------------------------------

Next steps
  Query the logs of the job:
    ray job logs raysubmit_XBWCyyrYnQGyyYqR
  Query the status of the job:
    ray job status raysubmit_XBWCyyrYnQGyyYqR
  Request the job to be stopped:
    ray job stop raysubmit_XBWCyyrYnQGyyYqR

Tailing logs until the job exits (disable with --no-wait):
using CPU

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: FedAvg, Dataset: IMDB-BINARY, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  IMDB-BINARY  Total number of graphs:  1000
Initialization start: network data collected.
using CPU
2025-07-10 21:36:33,528	INFO worker.py:1429 -- Using address 192.168.11.48:6379 set in the environment variable RAY_ADDRESS
2025-07-10 21:36:33,528	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.11.48:6379...
2025-07-10 21:36:33,540	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.11.48:8265 [39m[22m
[36m(Trainer pid=115254, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=115254, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=115254, ip=192.168.59.37)[0m inx: 0
[36m(Trainer pid=115254, ip=192.168.59.37)[0m dataset_trainer_name: 0-IMDB-BINARY
[36m(Trainer pid=115254, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7eec025b5050>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7eec02c34950>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7eec025b6f90>}
[36m(Trainer pid=115254, ip=192.168.59.37)[0m num_node_features: 136
[36m(Trainer pid=115254, ip=192.168.59.37)[0m num_graph_labels: 2
[36m(Trainer pid=115254, ip=192.168.59.37)[0m train_size: 89
[36m(Trainer pid=119931, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster] (Ray deduplicates logs by default. Set RAY_DEDUP_LOGS=0 to disable log deduplication, or see https://docs.ray.io/en/master/ray-observability/user-guides/configure-logging.html#log-deduplication for more options.)[0m
[36m(Trainer pid=119931, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=119931, ip=192.168.4.175)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=119931, ip=192.168.4.175)[0m dataset_trainer_name: 2-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=119931, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6cf6bdfe90>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6cf6b0bc10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6cf69eef90>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=119931, ip=192.168.4.175)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=119931, ip=192.168.4.175)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=119931, ip=192.168.4.175)[0m train_size: 85[32m [repeated 2x across cluster][0m
[36m(Trainer pid=115391, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=115391, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=115391, ip=192.168.59.37)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=115391, ip=192.168.59.37)[0m dataset_trainer_name: 4-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=115391, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f638eff3e50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f638ef2e690>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f638ef2df50>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=115391, ip=192.168.59.37)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=115391, ip=192.168.59.37)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=115391, ip=192.168.59.37)[0m train_size: 79[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120068, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120068, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120068, ip=192.168.4.175)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120068, ip=192.168.4.175)[0m dataset_trainer_name: 6-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120068, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4828a37450>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4828610ed0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4828b591d0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120068, ip=192.168.4.175)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120068, ip=192.168.4.175)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120068, ip=192.168.4.175)[0m train_size: 84[32m [repeated 2x across cluster][0m
//Log init_time: 36420.352999999996 ms //end
//Log Large1 init network: 3409552.0 //end
//Log Large2 init network: 2797634.0 //end
//Log Large3 init network: 7314235.0 //end
//Log Large4 init network: 5271778.0 //end
//Log Server init network: 12431632545.0 //end
//Log Initialization Communication Cost (MB): 11873.65 //end

Done setting up devices.
Running FedAvg ...
Pretrain start time recorded.
//pretrain_time: 13.741 ms//end
[36m(Trainer pid=115529, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=115529, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=115529, ip=192.168.59.37)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=115529, ip=192.168.59.37)[0m dataset_trainer_name: 8-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=115529, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f36342d5290>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f363470f390>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f36341f98d0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=115529, ip=192.168.59.37)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=115529, ip=192.168.59.37)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=115529, ip=192.168.59.37)[0m train_size: 75[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 8427761664.0 //end
//Log Max memory for Large2: 10038833152.0 //end
//Log Max memory for Large3: 11335393280.0 //end
//Log Max memory for Large4: 10637434880.0 //end
//Log Max memory for Server: 18206363648.0 //end
//Log Large1 network: 562162.0 //end
//Log Large2 network: 2022160.0 //end
//Log Large3 network: 3243390.0 //end
//Log Large4 network: 589596.0 //end
//Log Server network: 1444452709.0 //end
//Log Total Actual Pretrain Comm Cost: 1383.66 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 22209.303 ms//end
//Log Max memory for Large1: 8481488896.0 //end
//Log Max memory for Large2: 10116325376.0 //end
//Log Max memory for Large3: 11386576896.0 //end
//Log Max memory for Large4: 10724044800.0 //end
//Log Max memory for Server: 18107654144.0 //end
//Log Large1 network: 54525613.0 //end
//Log Large2 network: 81156725.0 //end
//Log Large3 network: 59185519.0 //end
//Log Large4 network: 81147792.0 //end
//Log Server network: 133575198.0 //end
//Log Total Actual Train Comm Cost: 390.62 MB //end
Train end time recorded and duration set to gauge.
               test_acc
1-IMDB-BINARY  0.600000
0-IMDB-BINARY  0.500000
3-IMDB-BINARY  0.700000
6-IMDB-BINARY  0.181818
7-IMDB-BINARY  0.727273
8-IMDB-BINARY  0.600000
9-IMDB-BINARY  0.727273
2-IMDB-BINARY  0.545455
5-IMDB-BINARY  0.777778
4-IMDB-BINARY  0.700000
Average test accuracy: 0.608413278513781
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=115715, ip=192.168.36.49)[0m inx: 9
[36m(Trainer pid=115715, ip=192.168.36.49)[0m dataset_trainer_name: 9-IMDB-BINARY
[36m(Trainer pid=115715, ip=192.168.36.49)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3110d3d890>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3110c11cd0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3111159210>}
[36m(Trainer pid=115715, ip=192.168.36.49)[0m num_node_features: 136
[36m(Trainer pid=115715, ip=192.168.36.49)[0m num_graph_labels: 2
[36m(Trainer pid=115715, ip=192.168.36.49)[0m train_size: 83
[36m(Trainer pid=115715, ip=192.168.36.49)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=115715, ip=192.168.36.49)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL, Dataset: IMDB-BINARY, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  IMDB-BINARY  Total number of graphs:  1000
Initialization start: network data collected.
using CPU
2025-07-10 21:38:37,860	INFO worker.py:1429 -- Using address 192.168.11.48:6379 set in the environment variable RAY_ADDRESS
2025-07-10 21:38:37,860	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.11.48:6379...
2025-07-10 21:38:37,866	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.11.48:8265 [39m[22m
[36m(Trainer pid=120589, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=120589, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=120589, ip=192.168.4.175)[0m inx: 0
[36m(Trainer pid=120589, ip=192.168.4.175)[0m dataset_trainer_name: 0-IMDB-BINARY
[36m(Trainer pid=120589, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8730e569d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f87543905d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f87543bf590>}
[36m(Trainer pid=120589, ip=192.168.4.175)[0m num_node_features: 136
[36m(Trainer pid=120589, ip=192.168.4.175)[0m num_graph_labels: 2
[36m(Trainer pid=120589, ip=192.168.4.175)[0m train_size: 89
[36m(Trainer pid=116034, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=116034, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=116034, ip=192.168.59.37)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=116034, ip=192.168.59.37)[0m dataset_trainer_name: 2-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=116034, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8ea83fa050>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8ea81bf4d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8ea82d9250>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=116034, ip=192.168.59.37)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=116034, ip=192.168.59.37)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=116034, ip=192.168.59.37)[0m train_size: 85[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120727, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120727, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120727, ip=192.168.4.175)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120727, ip=192.168.4.175)[0m dataset_trainer_name: 4-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120727, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f88122cb9d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f88121fbe10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f88121facd0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120727, ip=192.168.4.175)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120727, ip=192.168.4.175)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120727, ip=192.168.4.175)[0m train_size: 79[32m [repeated 2x across cluster][0m
[36m(Trainer pid=116172, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=116172, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=116172, ip=192.168.59.37)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=116172, ip=192.168.59.37)[0m dataset_trainer_name: 6-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=116172, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f40271e3b50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4027681690>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f402766f150>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=116172, ip=192.168.59.37)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=116172, ip=192.168.59.37)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=116172, ip=192.168.59.37)[0m train_size: 84[32m [repeated 2x across cluster][0m
//Log init_time: 36588.977 ms //end
//Log Large1 init network: 3352271.0 //end
//Log Large2 init network: 3186709.0 //end
//Log Large3 init network: 9328266.0 //end
//Log Large4 init network: 3706172.0 //end
//Log Server init network: 10553382657.0 //end
//Log Initialization Communication Cost (MB): 10083.16 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 7.093999999999999 ms//end
[36m(Trainer pid=120856, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120856, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120856, ip=192.168.4.175)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120856, ip=192.168.4.175)[0m dataset_trainer_name: 8-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120856, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8e4d271210>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8e4d8b2890>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8e4d8dc390>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120856, ip=192.168.4.175)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120856, ip=192.168.4.175)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120856, ip=192.168.4.175)[0m train_size: 75[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 10019815424.0 //end
//Log Max memory for Large2: 8444035072.0 //end
//Log Max memory for Large3: 13069119488.0 //end
//Log Max memory for Large4: 8922095616.0 //end
//Log Max memory for Server: 18246574080.0 //end
//Log Large1 network: 1973863.0 //end
//Log Large2 network: 559567.0 //end
//Log Large3 network: 3293623.0 //end
//Log Large4 network: 514859.0 //end
//Log Server network: 3323722124.0 //end
//Log Total Actual Pretrain Comm Cost: 3175.80 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 24822.972 ms//end
//Log Max memory for Large1: 10061774848.0 //end
//Log Max memory for Large2: 8451809280.0 //end
//Log Max memory for Large3: 13115056128.0 //end
//Log Max memory for Large4: 8940711936.0 //end
//Log Max memory for Server: 18157576192.0 //end
//Log Large1 network: 221068440.0 //end
//Log Large2 network: 147828493.0 //end
//Log Large3 network: 225864730.0 //end
//Log Large4 network: 147822430.0 //end
//Log Server network: 22504752.0 //end
//Log Total Actual Train Comm Cost: 729.65 MB //end
Train end time recorded and duration set to gauge.
               test_acc
0-IMDB-BINARY  0.600000
1-IMDB-BINARY  0.181818
2-IMDB-BINARY  0.727273
3-IMDB-BINARY  0.600000
4-IMDB-BINARY  0.545455
5-IMDB-BINARY  0.555556
6-IMDB-BINARY  0.666667
7-IMDB-BINARY  0.818182
8-IMDB-BINARY  0.500000
9-IMDB-BINARY  0.600000
Average test accuracy: 0.5859283792700878
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 667.62 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 667.62 MB //end
[36m(Trainer pid=116758, ip=192.168.27.11)[0m inx: 9
[36m(Trainer pid=116758, ip=192.168.27.11)[0m dataset_trainer_name: 9-IMDB-BINARY
[36m(Trainer pid=116758, ip=192.168.27.11)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f16eb6d91d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f16eaf73990>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f16eb357d90>}
[36m(Trainer pid=116758, ip=192.168.27.11)[0m num_node_features: 136
[36m(Trainer pid=116758, ip=192.168.27.11)[0m num_graph_labels: 2
[36m(Trainer pid=116758, ip=192.168.27.11)[0m train_size: 83
[36m(Trainer pid=116758, ip=192.168.27.11)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=116758, ip=192.168.27.11)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+, Dataset: IMDB-BINARY, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  IMDB-BINARY  Total number of graphs:  1000
Initialization start: network data collected.
using CPU
2025-07-10 21:40:44,781	INFO worker.py:1429 -- Using address 192.168.11.48:6379 set in the environment variable RAY_ADDRESS
2025-07-10 21:40:44,781	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.11.48:6379...
2025-07-10 21:40:44,787	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.11.48:8265 [39m[22m
[36m(Trainer pid=116694, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=116694, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=116694, ip=192.168.59.37)[0m inx: 0
[36m(Trainer pid=116694, ip=192.168.59.37)[0m dataset_trainer_name: 0-IMDB-BINARY
[36m(Trainer pid=116694, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc053785b50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc053a24690>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc053a93410>}
[36m(Trainer pid=116694, ip=192.168.59.37)[0m num_node_features: 136
[36m(Trainer pid=116694, ip=192.168.59.37)[0m num_graph_labels: 2
[36m(Trainer pid=116694, ip=192.168.59.37)[0m train_size: 89
[36m(Trainer pid=121389, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=121389, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=121389, ip=192.168.4.175)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=121389, ip=192.168.4.175)[0m dataset_trainer_name: 2-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=121389, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7efeab561cd0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7efeab4fd250>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7efeab5627d0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=121389, ip=192.168.4.175)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=121389, ip=192.168.4.175)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=121389, ip=192.168.4.175)[0m train_size: 85[32m [repeated 2x across cluster][0m
[36m(Trainer pid=116831, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=116831, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=116831, ip=192.168.59.37)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=116831, ip=192.168.59.37)[0m dataset_trainer_name: 4-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=116831, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6ae14f0710>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6ae14215d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6ae141ead0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=116831, ip=192.168.59.37)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=116831, ip=192.168.59.37)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=116831, ip=192.168.59.37)[0m train_size: 79[32m [repeated 2x across cluster][0m
[36m(Trainer pid=121518, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=121518, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=121518, ip=192.168.4.175)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=121518, ip=192.168.4.175)[0m dataset_trainer_name: 6-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=121518, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3e52b81090>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3e52be8c10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3e5301c610>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=121518, ip=192.168.4.175)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=121518, ip=192.168.4.175)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=121518, ip=192.168.4.175)[0m train_size: 84[32m [repeated 2x across cluster][0m
//Log init_time: 36709.854999999996 ms //end
//Log Large1 init network: 3646354.0 //end
//Log Large2 init network: 3052278.0 //end
//Log Large3 init network: 7313232.0 //end
//Log Large4 init network: 5046842.0 //end
//Log Server init network: 12432795047.0 //end
//Log Initialization Communication Cost (MB): 11875.01 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 7.159000000000001 ms//end
[36m(Trainer pid=116968, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=116968, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=116968, ip=192.168.59.37)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=116968, ip=192.168.59.37)[0m dataset_trainer_name: 8-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=116968, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc2c400f950>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc2c4257390>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc2c3d328d0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=116968, ip=192.168.59.37)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=116968, ip=192.168.59.37)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=116968, ip=192.168.59.37)[0m train_size: 75[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 8431620096.0 //end
//Log Max memory for Large2: 10050097152.0 //end
//Log Max memory for Large3: 11356213248.0 //end
//Log Max memory for Large4: 10638876672.0 //end
//Log Max memory for Server: 18220728320.0 //end
//Log Large1 network: 523072.0 //end
//Log Large2 network: 1927476.0 //end
//Log Large3 network: 3243214.0 //end
//Log Large4 network: 621186.0 //end
//Log Server network: 1443872829.0 //end
//Log Total Actual Pretrain Comm Cost: 1383.01 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 25902.377 ms//end
//Log Max memory for Large1: 8453488640.0 //end
//Log Max memory for Large2: 10084646912.0 //end
//Log Max memory for Large3: 11374727168.0 //end
//Log Max memory for Large4: 10693103616.0 //end
//Log Max memory for Server: 18122850304.0 //end
//Log Large1 network: 147849131.0 //end
//Log Large2 network: 221139420.0 //end
//Log Large3 network: 152731928.0 //end
//Log Large4 network: 221319614.0 //end
//Log Server network: 22898578.0 //end
//Log Total Actual Train Comm Cost: 730.46 MB //end
Train end time recorded and duration set to gauge.
               test_acc
0-IMDB-BINARY  0.600000
1-IMDB-BINARY  0.666667
2-IMDB-BINARY  0.800000
3-IMDB-BINARY  0.555556
4-IMDB-BINARY  0.600000
5-IMDB-BINARY  0.636364
6-IMDB-BINARY  0.818182
7-IMDB-BINARY  0.500000
8-IMDB-BINARY  0.181818
9-IMDB-BINARY  0.636364
Average test accuracy: 0.6036394091670474
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 667.62 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 667.62 MB //end
[36m(Trainer pid=117165, ip=192.168.36.49)[0m inx: 9
[36m(Trainer pid=117165, ip=192.168.36.49)[0m dataset_trainer_name: 9-IMDB-BINARY
[36m(Trainer pid=117165, ip=192.168.36.49)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0d8b7c4890>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0d8b7f4fd0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0d8be29e50>}
[36m(Trainer pid=117165, ip=192.168.36.49)[0m num_node_features: 136
[36m(Trainer pid=117165, ip=192.168.36.49)[0m num_graph_labels: 2
[36m(Trainer pid=117165, ip=192.168.36.49)[0m train_size: 83
[36m(Trainer pid=117165, ip=192.168.36.49)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=117165, ip=192.168.36.49)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+dWs, Dataset: IMDB-BINARY, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  IMDB-BINARY  Total number of graphs:  1000
Initialization start: network data collected.
using CPU
2025-07-10 21:42:52,919	INFO worker.py:1429 -- Using address 192.168.11.48:6379 set in the environment variable RAY_ADDRESS
2025-07-10 21:42:52,919	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.11.48:6379...
2025-07-10 21:42:52,934	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.11.48:8265 [39m[22m
[36m(Trainer pid=122049, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=122049, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=122049, ip=192.168.4.175)[0m inx: 0
[36m(Trainer pid=122049, ip=192.168.4.175)[0m dataset_trainer_name: 0-IMDB-BINARY
[36m(Trainer pid=122049, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f03fa485050>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f03fa913490>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f03fa8bfe90>}
[36m(Trainer pid=122049, ip=192.168.4.175)[0m num_node_features: 136
[36m(Trainer pid=122049, ip=192.168.4.175)[0m num_graph_labels: 2
[36m(Trainer pid=122049, ip=192.168.4.175)[0m train_size: 89
[36m(Trainer pid=117495, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=117495, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=117495, ip=192.168.59.37)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=117495, ip=192.168.59.37)[0m dataset_trainer_name: 2-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=117495, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5b6c532910>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5b6c467850>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5b76a66f90>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=117495, ip=192.168.59.37)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=117495, ip=192.168.59.37)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=117495, ip=192.168.59.37)[0m train_size: 85[32m [repeated 2x across cluster][0m
[36m(Trainer pid=122187, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=122187, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=122187, ip=192.168.4.175)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=122187, ip=192.168.4.175)[0m dataset_trainer_name: 4-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=122187, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5ddba1e810>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5ddb619050>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5ddb619ad0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=122187, ip=192.168.4.175)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=122187, ip=192.168.4.175)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=122187, ip=192.168.4.175)[0m train_size: 79[32m [repeated 2x across cluster][0m
[36m(Trainer pid=117632, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=117632, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=117632, ip=192.168.59.37)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=117632, ip=192.168.59.37)[0m dataset_trainer_name: 6-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=117632, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2775794ad0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f27754d7850>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2775bbf4d0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=117632, ip=192.168.59.37)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=117632, ip=192.168.59.37)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=117632, ip=192.168.59.37)[0m train_size: 84[32m [repeated 2x across cluster][0m
//Log init_time: 35926.049 ms //end
//Log Large1 init network: 3157651.0 //end
//Log Large2 init network: 3132921.0 //end
//Log Large3 init network: 8670082.0 //end
//Log Large4 init network: 3892627.0 //end
//Log Server init network: 12436481620.0 //end
//Log Initialization Communication Cost (MB): 11878.33 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 9.057 ms//end
[36m(Trainer pid=122309, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=122309, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=122309, ip=192.168.4.175)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=122309, ip=192.168.4.175)[0m dataset_trainer_name: 8-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=122309, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8df0bf2b10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8df1048ed0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8df0b13e10>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=122309, ip=192.168.4.175)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=122309, ip=192.168.4.175)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=122309, ip=192.168.4.175)[0m train_size: 75[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 10018693120.0 //end
//Log Max memory for Large2: 8443756544.0 //end
//Log Max memory for Large3: 13063749632.0 //end
//Log Max memory for Large4: 8933412864.0 //end
//Log Max memory for Server: 18304192512.0 //end
//Log Large1 network: 1900851.0 //end
//Log Large2 network: 518181.0 //end
//Log Large3 network: 3581108.0 //end
//Log Large4 network: 517067.0 //end
//Log Server network: 1443898840.0 //end
//Log Total Actual Pretrain Comm Cost: 1383.22 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 26120.010000000002 ms//end
//Log Max memory for Large1: 10081398784.0 //end
//Log Max memory for Large2: 8461549568.0 //end
//Log Max memory for Large3: 13101969408.0 //end
//Log Max memory for Large4: 8948142080.0 //end
//Log Max memory for Server: 18202628096.0 //end
//Log Large1 network: 221160555.0 //end
//Log Large2 network: 147908178.0 //end
//Log Large3 network: 226198100.0 //end
//Log Large4 network: 147861937.0 //end
//Log Server network: 22775371.0 //end
//Log Total Actual Train Comm Cost: 730.42 MB //end
Train end time recorded and duration set to gauge.
               test_acc
0-IMDB-BINARY  0.600000
1-IMDB-BINARY  0.555556
2-IMDB-BINARY  0.700000
3-IMDB-BINARY  0.181818
4-IMDB-BINARY  0.666667
5-IMDB-BINARY  0.636364
6-IMDB-BINARY  0.636364
7-IMDB-BINARY  0.818182
8-IMDB-BINARY  0.500000
9-IMDB-BINARY  0.600000
Average test accuracy: 0.5918836607278818
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 667.62 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 667.62 MB //end
[36m(Trainer pid=118218, ip=192.168.27.11)[0m inx: 9
[36m(Trainer pid=118218, ip=192.168.27.11)[0m dataset_trainer_name: 9-IMDB-BINARY
[36m(Trainer pid=118218, ip=192.168.27.11)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f25b0e8b610>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f25b0dc8790>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f25b5a93b10>}
[36m(Trainer pid=118218, ip=192.168.27.11)[0m num_node_features: 136
[36m(Trainer pid=118218, ip=192.168.27.11)[0m num_graph_labels: 2
[36m(Trainer pid=118218, ip=192.168.27.11)[0m train_size: 83
[36m(Trainer pid=118218, ip=192.168.27.11)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=118218, ip=192.168.27.11)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: FedAvg, Dataset: IMDB-MULTI, Trainers: 10
--------------------------------------------------------------------------------

Downloading https://www.chrsmrrs.com/graphkerneldatasets/IMDB-MULTI.zip
Processing...
Done!
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  IMDB-MULTI  Total number of graphs:  1500
Initialization start: network data collected.
using CPU
2025-07-10 21:45:03,342	INFO worker.py:1429 -- Using address 192.168.11.48:6379 set in the environment variable RAY_ADDRESS
2025-07-10 21:45:03,343	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.11.48:6379...
2025-07-10 21:45:03,347	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.11.48:8265 [39m[22m
[36m(Trainer pid=118174, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=118174, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=118174, ip=192.168.59.37)[0m inx: 0
[36m(Trainer pid=118174, ip=192.168.59.37)[0m dataset_trainer_name: 0-IMDB-MULTI
[36m(Trainer pid=118174, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f85e3c92f90>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f85e87f5a10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f85e37a3d10>}
[36m(Trainer pid=118174, ip=192.168.59.37)[0m num_node_features: 89
[36m(Trainer pid=118174, ip=192.168.59.37)[0m num_graph_labels: 3
[36m(Trainer pid=118174, ip=192.168.59.37)[0m train_size: 134
[36m(Trainer pid=122858, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=122858, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=122858, ip=192.168.4.175)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=122858, ip=192.168.4.175)[0m dataset_trainer_name: 2-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=122858, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f425268e810>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f42534a2610>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f42521a6150>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=122858, ip=192.168.4.175)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=122858, ip=192.168.4.175)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=122858, ip=192.168.4.175)[0m train_size: 128[32m [repeated 2x across cluster][0m
[36m(Trainer pid=118313, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=118313, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=118313, ip=192.168.59.37)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=118313, ip=192.168.59.37)[0m dataset_trainer_name: 4-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=118313, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fea0c684310>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fea18c85c10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fea18c86ed0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=118313, ip=192.168.59.37)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=118313, ip=192.168.59.37)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=118313, ip=192.168.59.37)[0m train_size: 125[32m [repeated 2x across cluster][0m
[36m(Trainer pid=123006, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=123006, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=123006, ip=192.168.4.175)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=123006, ip=192.168.4.175)[0m dataset_trainer_name: 6-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=123006, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5070526650>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5070338510>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f507cba3f90>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=123006, ip=192.168.4.175)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=123006, ip=192.168.4.175)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=123006, ip=192.168.4.175)[0m train_size: 115[32m [repeated 2x across cluster][0m
//Log init_time: 39074.178 ms //end
//Log Large1 init network: 3661435.0 //end
//Log Large2 init network: 3574074.0 //end
//Log Large3 init network: 7830245.0 //end
//Log Large4 init network: 5900893.0 //end
//Log Server init network: 12553364300.0 //end
//Log Initialization Communication Cost (MB): 11991.82 //end

Done setting up devices.
Running FedAvg ...
Pretrain start time recorded.
//pretrain_time: 20.206 ms//end
[36m(Trainer pid=118451, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=118451, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=118451, ip=192.168.59.37)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=118451, ip=192.168.59.37)[0m dataset_trainer_name: 8-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=118451, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f90bdc53650>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f90bea62490>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f90bea61710>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=118451, ip=192.168.59.37)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=118451, ip=192.168.59.37)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=118451, ip=192.168.59.37)[0m train_size: 112[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 8656740352.0 //end
//Log Max memory for Large2: 10543124480.0 //end
//Log Max memory for Large3: 11501473792.0 //end
//Log Max memory for Large4: 11133435904.0 //end
//Log Max memory for Server: 18331619328.0 //end
//Log Large1 network: 580698.0 //end
//Log Large2 network: 2032690.0 //end
//Log Large3 network: 3250534.0 //end
//Log Large4 network: 596673.0 //end
//Log Server network: 2651180164.0 //end
//Log Total Actual Pretrain Comm Cost: 2534.52 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 20540.33 ms//end
//Log Max memory for Large1: 8676962304.0 //end
//Log Max memory for Large2: 10612625408.0 //end
//Log Max memory for Large3: 11534532608.0 //end
//Log Max memory for Large4: 11226202112.0 //end
//Log Max memory for Server: 18265485312.0 //end
//Log Large1 network: 54499062.0 //end
//Log Large2 network: 81144125.0 //end
//Log Large3 network: 58908268.0 //end
//Log Large4 network: 81108570.0 //end
//Log Server network: 133487058.0 //end
//Log Total Actual Train Comm Cost: 390.19 MB //end
Train end time recorded and duration set to gauge.
              test_acc
1-IMDB-MULTI  0.428571
8-IMDB-MULTI  0.600000
4-IMDB-MULTI  0.500000
5-IMDB-MULTI  0.533333
0-IMDB-MULTI  0.470588
7-IMDB-MULTI  0.133333
2-IMDB-MULTI  0.250000
3-IMDB-MULTI  0.600000
9-IMDB-MULTI  0.625000
6-IMDB-MULTI  0.333333
Average test accuracy: 0.44570967182859766
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=118647, ip=192.168.36.49)[0m inx: 9
[36m(Trainer pid=118647, ip=192.168.36.49)[0m dataset_trainer_name: 9-IMDB-MULTI
[36m(Trainer pid=118647, ip=192.168.36.49)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd43f60ec50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd4402a8dd0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd4402ab490>}
[36m(Trainer pid=118647, ip=192.168.36.49)[0m num_node_features: 89
[36m(Trainer pid=118647, ip=192.168.36.49)[0m num_graph_labels: 3
[36m(Trainer pid=118647, ip=192.168.36.49)[0m train_size: 125
[36m(Trainer pid=118647, ip=192.168.36.49)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=118647, ip=192.168.36.49)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL, Dataset: IMDB-MULTI, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  IMDB-MULTI  Total number of graphs:  1500
Initialization start: network data collected.
using CPU
2025-07-10 21:47:08,576	INFO worker.py:1429 -- Using address 192.168.11.48:6379 set in the environment variable RAY_ADDRESS
2025-07-10 21:47:08,577	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.11.48:6379...
2025-07-10 21:47:08,582	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.11.48:8265 [39m[22m
[36m(Trainer pid=123519, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=123519, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=123519, ip=192.168.4.175)[0m inx: 0
[36m(Trainer pid=123519, ip=192.168.4.175)[0m dataset_trainer_name: 0-IMDB-MULTI
[36m(Trainer pid=123519, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0693c1aed0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f06a4a90fd0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f06a4180a90>}
[36m(Trainer pid=123519, ip=192.168.4.175)[0m num_node_features: 89
[36m(Trainer pid=123519, ip=192.168.4.175)[0m num_graph_labels: 3
[36m(Trainer pid=123519, ip=192.168.4.175)[0m train_size: 134
[36m(Trainer pid=118954, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=118954, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=118954, ip=192.168.59.37)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=118954, ip=192.168.59.37)[0m dataset_trainer_name: 2-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=118954, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f34f8f42650>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f34f8d4c150>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f45dd207ad0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=118954, ip=192.168.59.37)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=118954, ip=192.168.59.37)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=118954, ip=192.168.59.37)[0m train_size: 128[32m [repeated 2x across cluster][0m
[36m(Trainer pid=123656, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=123656, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=123656, ip=192.168.4.175)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=123656, ip=192.168.4.175)[0m dataset_trainer_name: 4-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=123656, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc84bc7f390>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc84ad65650>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc84a41f550>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=123656, ip=192.168.4.175)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=123656, ip=192.168.4.175)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=123656, ip=192.168.4.175)[0m train_size: 125[32m [repeated 2x across cluster][0m
[36m(Trainer pid=119092, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=119092, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=119092, ip=192.168.59.37)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=119092, ip=192.168.59.37)[0m dataset_trainer_name: 6-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=119092, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f42da0d2f10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f42da4f0c10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f42d9ee1690>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=119092, ip=192.168.59.37)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=119092, ip=192.168.59.37)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=119092, ip=192.168.59.37)[0m train_size: 115[32m [repeated 2x across cluster][0m
//Log init_time: 35498.846 ms //end
//Log Large1 init network: 3512416.0 //end
//Log Large2 init network: 3387855.0 //end
//Log Large3 init network: 9281006.0 //end
//Log Large4 init network: 3797751.0 //end
//Log Server init network: 13613880917.0 //end
//Log Initialization Communication Cost (MB): 13002.26 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 8.338 ms//end
[36m(Trainer pid=123777, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=123777, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=123777, ip=192.168.4.175)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=123777, ip=192.168.4.175)[0m dataset_trainer_name: 8-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=123777, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7facc817f7d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7facc8f50210>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7facc8f51b90>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=123777, ip=192.168.4.175)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=123777, ip=192.168.4.175)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=123777, ip=192.168.4.175)[0m train_size: 112[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 10519941120.0 //end
//Log Max memory for Large2: 8669925376.0 //end
//Log Max memory for Large3: 13539966976.0 //end
//Log Max memory for Large4: 9065046016.0 //end
//Log Max memory for Server: 18330673152.0 //end
//Log Large1 network: 2083614.0 //end
//Log Large2 network: 514595.0 //end
//Log Large3 network: 3314362.0 //end
//Log Large4 network: 508350.0 //end
//Log Server network: 1592164383.0 //end
//Log Total Actual Pretrain Comm Cost: 1524.53 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 26889.693000000003 ms//end
//Log Max memory for Large1: 10554322944.0 //end
//Log Max memory for Large2: 8677634048.0 //end
//Log Max memory for Large3: 13617815552.0 //end
//Log Max memory for Large4: 9075003392.0 //end
//Log Max memory for Server: 18142330880.0 //end
//Log Large1 network: 227584757.0 //end
//Log Large2 network: 152044739.0 //end
//Log Large3 network: 232680000.0 //end
//Log Large4 network: 152061277.0 //end
//Log Server network: 23228607.0 //end
//Log Total Actual Train Comm Cost: 751.11 MB //end
Train end time recorded and duration set to gauge.
              test_acc
0-IMDB-MULTI  0.357143
1-IMDB-MULTI  0.500000
2-IMDB-MULTI  0.533333
3-IMDB-MULTI  0.533333
4-IMDB-MULTI  0.400000
5-IMDB-MULTI  0.533333
6-IMDB-MULTI  0.666667
7-IMDB-MULTI  0.470588
8-IMDB-MULTI  0.437500
9-IMDB-MULTI  0.600000
Average test accuracy: 0.5012216257740554
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 668.84 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 668.84 MB //end
[36m(Trainer pid=119681, ip=192.168.27.11)[0m inx: 9
[36m(Trainer pid=119681, ip=192.168.27.11)[0m dataset_trainer_name: 9-IMDB-MULTI
[36m(Trainer pid=119681, ip=192.168.27.11)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fcd4ebc55d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fcd4d7b8990>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fcd4d7bb150>}
[36m(Trainer pid=119681, ip=192.168.27.11)[0m num_node_features: 89
[36m(Trainer pid=119681, ip=192.168.27.11)[0m num_graph_labels: 3
[36m(Trainer pid=119681, ip=192.168.27.11)[0m train_size: 125
[36m(Trainer pid=119681, ip=192.168.27.11)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=119681, ip=192.168.27.11)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+, Dataset: IMDB-MULTI, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  IMDB-MULTI  Total number of graphs:  1500
Initialization start: network data collected.
using CPU
2025-07-10 21:49:16,611	INFO worker.py:1429 -- Using address 192.168.11.48:6379 set in the environment variable RAY_ADDRESS
2025-07-10 21:49:16,611	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.11.48:6379...
2025-07-10 21:49:16,617	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.11.48:8265 [39m[22m
[36m(Trainer pid=119622, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=119622, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=119622, ip=192.168.59.37)[0m inx: 0
[36m(Trainer pid=119622, ip=192.168.59.37)[0m dataset_trainer_name: 0-IMDB-MULTI
[36m(Trainer pid=119622, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fbe3c2241d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fbe3cf9fed0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fbe3bff9750>}
[36m(Trainer pid=119622, ip=192.168.59.37)[0m num_node_features: 89
[36m(Trainer pid=119622, ip=192.168.59.37)[0m num_graph_labels: 3
[36m(Trainer pid=119622, ip=192.168.59.37)[0m train_size: 134
[36m(Trainer pid=124320, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=124320, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=124320, ip=192.168.4.175)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=124320, ip=192.168.4.175)[0m dataset_trainer_name: 2-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=124320, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f63c0eac050>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f63c10ddd50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f63c1b92890>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=124320, ip=192.168.4.175)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=124320, ip=192.168.4.175)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=124320, ip=192.168.4.175)[0m train_size: 128[32m [repeated 2x across cluster][0m
[36m(Trainer pid=119759, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=119759, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=119759, ip=192.168.59.37)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=119759, ip=192.168.59.37)[0m dataset_trainer_name: 4-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=119759, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc7735d5090>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc7743be3d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc7743bf290>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=119759, ip=192.168.59.37)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=119759, ip=192.168.59.37)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=119759, ip=192.168.59.37)[0m train_size: 125[32m [repeated 2x across cluster][0m
[36m(Trainer pid=124458, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=124458, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=124458, ip=192.168.4.175)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=124458, ip=192.168.4.175)[0m dataset_trainer_name: 6-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=124458, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa425331910>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa42547f290>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa426310d10>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=124458, ip=192.168.4.175)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=124458, ip=192.168.4.175)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=124458, ip=192.168.4.175)[0m train_size: 115[32m [repeated 2x across cluster][0m
//Log init_time: 35767.504 ms //end
//Log Large1 init network: 3294965.0 //end
//Log Large2 init network: 3373117.0 //end
//Log Large3 init network: 7772030.0 //end
//Log Large4 init network: 5524225.0 //end
//Log Server init network: 12182625413.0 //end
//Log Initialization Communication Cost (MB): 11637.30 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 9.428 ms//end
[36m(Trainer pid=119888, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=119888, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=119888, ip=192.168.59.37)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=119888, ip=192.168.59.37)[0m dataset_trainer_name: 8-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=119888, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4b02e0bad0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4b03bd7a10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4b03bcf490>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=119888, ip=192.168.59.37)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=119888, ip=192.168.59.37)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=119888, ip=192.168.59.37)[0m train_size: 112[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 8667734016.0 //end
//Log Max memory for Large2: 10531819520.0 //end
//Log Max memory for Large3: 11498917888.0 //end
//Log Max memory for Large4: 11143159808.0 //end
//Log Max memory for Server: 18330796032.0 //end
//Log Large1 network: 531075.0 //end
//Log Large2 network: 1978241.0 //end
//Log Large3 network: 2962926.0 //end
//Log Large4 network: 601875.0 //end
//Log Server network: 3021075780.0 //end
//Log Total Actual Pretrain Comm Cost: 2886.92 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 25504.246 ms//end
//Log Max memory for Large1: 8683429888.0 //end
//Log Max memory for Large2: 10561273856.0 //end
//Log Max memory for Large3: 11512930304.0 //end
//Log Max memory for Large4: 11163758592.0 //end
//Log Max memory for Server: 18105266176.0 //end
//Log Large1 network: 152009257.0 //end
//Log Large2 network: 227515823.0 //end
//Log Large3 network: 156908548.0 //end
//Log Large4 network: 227742190.0 //end
//Log Server network: 23071662.0 //end
//Log Total Actual Train Comm Cost: 750.78 MB //end
Train end time recorded and duration set to gauge.
              test_acc
0-IMDB-MULTI  0.470588
1-IMDB-MULTI  0.500000
2-IMDB-MULTI  0.533333
3-IMDB-MULTI  0.466667
4-IMDB-MULTI  0.600000
5-IMDB-MULTI  0.625000
6-IMDB-MULTI  0.466667
7-IMDB-MULTI  0.400000
8-IMDB-MULTI  0.437500
9-IMDB-MULTI  0.600000
Average test accuracy: 0.511002360810545
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 668.84 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 668.84 MB //end
[36m(Trainer pid=120081, ip=192.168.36.49)[0m inx: 9
[36m(Trainer pid=120081, ip=192.168.36.49)[0m dataset_trainer_name: 9-IMDB-MULTI
[36m(Trainer pid=120081, ip=192.168.36.49)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fb4142ec750>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fb4160abe10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fb4160b6610>}
[36m(Trainer pid=120081, ip=192.168.36.49)[0m num_node_features: 89
[36m(Trainer pid=120081, ip=192.168.36.49)[0m num_graph_labels: 3
[36m(Trainer pid=120081, ip=192.168.36.49)[0m train_size: 125
[36m(Trainer pid=120081, ip=192.168.36.49)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=120081, ip=192.168.36.49)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+dWs, Dataset: IMDB-MULTI, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  IMDB-MULTI  Total number of graphs:  1500
Initialization start: network data collected.
using CPU
2025-07-10 21:51:23,450	INFO worker.py:1429 -- Using address 192.168.11.48:6379 set in the environment variable RAY_ADDRESS
2025-07-10 21:51:23,450	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.11.48:6379...
2025-07-10 21:51:23,457	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.11.48:8265 [39m[22m
[36m(Trainer pid=124981, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=124981, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=124981, ip=192.168.4.175)[0m inx: 0
[36m(Trainer pid=124981, ip=192.168.4.175)[0m dataset_trainer_name: 0-IMDB-MULTI
[36m(Trainer pid=124981, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa590848e90>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa591193c90>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa5908493d0>}
[36m(Trainer pid=124981, ip=192.168.4.175)[0m num_node_features: 89
[36m(Trainer pid=124981, ip=192.168.4.175)[0m num_graph_labels: 3
[36m(Trainer pid=124981, ip=192.168.4.175)[0m train_size: 134
[36m(Trainer pid=120412, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120412, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120412, ip=192.168.59.37)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120412, ip=192.168.59.37)[0m dataset_trainer_name: 2-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120412, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0b5e2f4990>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0b5f2ce550>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0b5e328dd0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120412, ip=192.168.59.37)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120412, ip=192.168.59.37)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120412, ip=192.168.59.37)[0m train_size: 128[32m [repeated 2x across cluster][0m
[36m(Trainer pid=125102, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=125102, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=125102, ip=192.168.4.175)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=125102, ip=192.168.4.175)[0m dataset_trainer_name: 4-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=125102, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7efa3f85b090>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7efa4432e750>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7efa445facd0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=125102, ip=192.168.4.175)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=125102, ip=192.168.4.175)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=125102, ip=192.168.4.175)[0m train_size: 125[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120545, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120545, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120545, ip=192.168.59.37)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120545, ip=192.168.59.37)[0m dataset_trainer_name: 6-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120545, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f262acc5050>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f262bcb5f50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f262bca59d0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120545, ip=192.168.59.37)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120545, ip=192.168.59.37)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=120545, ip=192.168.59.37)[0m train_size: 115[32m [repeated 2x across cluster][0m
//Log init_time: 32347.123000000003 ms //end
//Log Large1 init network: 2985519.0 //end
//Log Large2 init network: 3175773.0 //end
//Log Large3 init network: 7983134.0 //end
//Log Large4 init network: 3721894.0 //end
//Log Server init network: 13428756875.0 //end
//Log Initialization Communication Cost (MB): 12823.70 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 6.2540000000000004 ms//end
[36m(Trainer pid=125239, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=125239, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=125239, ip=192.168.4.175)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=125239, ip=192.168.4.175)[0m dataset_trainer_name: 8-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=125239, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7ef90dbde810>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7ef90e4c2710>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7ef90d57bf10>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=125239, ip=192.168.4.175)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=125239, ip=192.168.4.175)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=125239, ip=192.168.4.175)[0m train_size: 112[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 10549727232.0 //end
//Log Max memory for Large2: 8662966272.0 //end
//Log Max memory for Large3: 13566541824.0 //end
//Log Max memory for Large4: 9075183616.0 //end
//Log Max memory for Server: 18122907648.0 //end
//Log Large1 network: 1969411.0 //end
//Log Large2 network: 571954.0 //end
//Log Large3 network: 4208923.0 //end
//Log Large4 network: 532975.0 //end
//Log Server network: 1775495024.0 //end
//Log Total Actual Pretrain Comm Cost: 1700.19 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 24926.261 ms//end
//Log Max memory for Large1: 10562768896.0 //end
//Log Max memory for Large2: 8671113216.0 //end
//Log Max memory for Large3: 13598154752.0 //end
//Log Max memory for Large4: 9073434624.0 //end
//Log Max memory for Server: 18040827904.0 //end
//Log Large1 network: 227455425.0 //end
//Log Large2 network: 152003057.0 //end
//Log Large3 network: 232662853.0 //end
//Log Large4 network: 152011654.0 //end
//Log Server network: 23007841.0 //end
//Log Total Actual Train Comm Cost: 750.68 MB //end
Train end time recorded and duration set to gauge.
              test_acc
0-IMDB-MULTI  0.250000
1-IMDB-MULTI  0.500000
2-IMDB-MULTI  0.533333
3-IMDB-MULTI  0.666667
4-IMDB-MULTI  0.466667
5-IMDB-MULTI  0.400000
6-IMDB-MULTI  0.411765
7-IMDB-MULTI  0.625000
8-IMDB-MULTI  0.437500
9-IMDB-MULTI  0.600000
Average test accuracy: 0.48705652829693746
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 668.84 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 668.84 MB //end
[36m(Trainer pid=121119, ip=192.168.27.11)[0m inx: 9
[36m(Trainer pid=121119, ip=192.168.27.11)[0m dataset_trainer_name: 9-IMDB-MULTI
[36m(Trainer pid=121119, ip=192.168.27.11)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fddba77d050>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fddbb590490>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fddbb590450>}
[36m(Trainer pid=121119, ip=192.168.27.11)[0m num_node_features: 89
[36m(Trainer pid=121119, ip=192.168.27.11)[0m num_graph_labels: 3
[36m(Trainer pid=121119, ip=192.168.27.11)[0m train_size: 125
[36m(Trainer pid=121119, ip=192.168.27.11)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=121119, ip=192.168.27.11)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: FedAvg, Dataset: MUTAG, Trainers: 10
--------------------------------------------------------------------------------

Downloading https://www.chrsmrrs.com/graphkerneldatasets/MUTAG.zip
Processing...
Done!
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  MUTAG  Total number of graphs:  188
Initialization start: network data collected.
using CPU
2025-07-10 21:53:27,121	INFO worker.py:1429 -- Using address 192.168.11.48:6379 set in the environment variable RAY_ADDRESS
2025-07-10 21:53:27,121	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.11.48:6379...
2025-07-10 21:53:27,127	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.11.48:8265 [39m[22m
//Log init_time: 284.95599999999996 ms //end
//Log Large1 init network: 0.0 //end
//Log Large2 init network: 0.0 //end
//Log Large3 init network: 0.0 //end
//Log Large4 init network: 35062.0 //end
//Log Server init network: 0.0 //end
//Log Initialization Communication Cost (MB): 0.03 //end

Done setting up devices.
Running FedAvg ...
Pretrain start time recorded.
//pretrain_time: 8.87 ms//end
[36m(Trainer pid=121220, ip=192.168.36.49)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=121220, ip=192.168.36.49)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=121220, ip=192.168.36.49)[0m inx: 1
[36m(Trainer pid=121220, ip=192.168.36.49)[0m dataset_trainer_name: 1-MUTAG
[36m(Trainer pid=121220, ip=192.168.36.49)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f482b49d150>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f482b2dd1d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f482b2de7d0>}
[36m(Trainer pid=121220, ip=192.168.36.49)[0m num_node_features: 7
[36m(Trainer pid=121220, ip=192.168.36.49)[0m num_graph_labels: 2
[36m(Trainer pid=121220, ip=192.168.36.49)[0m train_size: 14
//Log Max memory for Large1: 5653954560.0 //end
//Log Max memory for Large2: 6085025792.0 //end
//Log Max memory for Large3: 8396242944.0 //end
//Log Max memory for Large4: 6392950784.0 //end
//Log Max memory for Server: 18019766272.0 //end
//Log Large1 network: 682414.0 //end
//Log Large2 network: 692490.0 //end
//Log Large3 network: 3259468.0 //end
//Log Large4 network: 654964.0 //end
//Log Server network: 66715655.0 //end
//Log Total Actual Pretrain Comm Cost: 68.67 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 14770.017 ms//end
//Log Max memory for Large1: 5652819968.0 //end
//Log Max memory for Large2: 6083137536.0 //end
//Log Max memory for Large3: 8390479872.0 //end
//Log Max memory for Large4: 6409822208.0 //end
//Log Max memory for Server: 18071793664.0 //end
//Log Large1 network: 54434346.0 //end
//Log Large2 network: 80993190.0 //end
//Log Large3 network: 58610600.0 //end
//Log Large4 network: 80979881.0 //end
//Log Server network: 133050825.0 //end
//Log Total Actual Train Comm Cost: 389.16 MB //end
Train end time recorded and duration set to gauge.
         test_acc
1-MUTAG       0.5
0-MUTAG       1.0
2-MUTAG       0.5
6-MUTAG       1.0
8-MUTAG       1.0
9-MUTAG       0.5
7-MUTAG       1.0
3-MUTAG       0.5
5-MUTAG       1.0
4-MUTAG       0.5
Average test accuracy: 0.7517006802721088
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=125722, ip=192.168.4.175)[0m inx: 6[32m [repeated 9x across cluster][0m
[36m(Trainer pid=125722, ip=192.168.4.175)[0m dataset_trainer_name: 6-MUTAG[32m [repeated 9x across cluster][0m
[36m(Trainer pid=125722, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1b081d9550>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1ae872ded0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1ae872efd0>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=125722, ip=192.168.4.175)[0m num_node_features: 7[32m [repeated 9x across cluster][0m
[36m(Trainer pid=125722, ip=192.168.4.175)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=125722, ip=192.168.4.175)[0m train_size: 16[32m [repeated 9x across cluster][0m
[36m(Trainer pid=125722, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=125722, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL, Dataset: MUTAG, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  MUTAG  Total number of graphs:  188
Initialization start: network data collected.
using CPU
2025-07-10 21:54:47,396	INFO worker.py:1429 -- Using address 192.168.11.48:6379 set in the environment variable RAY_ADDRESS
2025-07-10 21:54:47,396	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.11.48:6379...
2025-07-10 21:54:47,403	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.11.48:8265 [39m[22m
//Log init_time: 276.13599999999997 ms //end
//Log Large1 init network: 0.0 //end
//Log Large2 init network: 0.0 //end
//Log Large3 init network: 0.0 //end
//Log Large4 init network: 0.0 //end
//Log Server init network: 0.0 //end
//Log Initialization Communication Cost (MB): 0.00 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 6.6 ms//end
[36m(Trainer pid=121788, ip=192.168.36.49)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=121788, ip=192.168.36.49)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=121788, ip=192.168.36.49)[0m inx: 3
[36m(Trainer pid=121788, ip=192.168.36.49)[0m dataset_trainer_name: 3-MUTAG
[36m(Trainer pid=121788, ip=192.168.36.49)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5108d329d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f51089055d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5108906410>}
[36m(Trainer pid=121788, ip=192.168.36.49)[0m num_node_features: 7
[36m(Trainer pid=121788, ip=192.168.36.49)[0m num_graph_labels: 2
[36m(Trainer pid=121788, ip=192.168.36.49)[0m train_size: 15
//Log Max memory for Large1: 6081347584.0 //end
//Log Max memory for Large2: 5654953984.0 //end
//Log Max memory for Large3: 8813486080.0 //end
//Log Max memory for Large4: 5972979712.0 //end
//Log Max memory for Server: 18023698432.0 //end
//Log Large1 network: 698467.0 //end
//Log Large2 network: 612887.0 //end
//Log Large3 network: 3363362.0 //end
//Log Large4 network: 603070.0 //end
//Log Server network: 66355902.0 //end
//Log Total Actual Pretrain Comm Cost: 68.32 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 40802.13 ms//end
//Log Max memory for Large1: 6072967168.0 //end
//Log Max memory for Large2: 5637431296.0 //end
//Log Max memory for Large3: 8803131392.0 //end
//Log Max memory for Large4: 5956497408.0 //end
//Log Max memory for Server: 18033172480.0 //end
//Log Large1 network: 264726535.0 //end
//Log Large2 network: 176888976.0 //end
//Log Large3 network: 272009310.0 //end
//Log Large4 network: 176902880.0 //end
//Log Server network: 25856548.0 //end
//Log Total Actual Train Comm Cost: 873.93 MB //end
Train end time recorded and duration set to gauge.
         test_acc
0-MUTAG       0.5
1-MUTAG       0.5
2-MUTAG       0.5
3-MUTAG       1.0
4-MUTAG       1.0
5-MUTAG       0.5
6-MUTAG       1.0
7-MUTAG       0.5
8-MUTAG       0.5
9-MUTAG       0.5
Average test accuracy: 0.6564625850340136
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
[36m(Trainer pid=126216, ip=192.168.4.175)[0m inx: 8[32m [repeated 9x across cluster][0m
[36m(Trainer pid=126216, ip=192.168.4.175)[0m dataset_trainer_name: 8-MUTAG[32m [repeated 9x across cluster][0m
[36m(Trainer pid=126216, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fbc886c9010>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fbc63f8c1d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fbc63f8ced0>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=126216, ip=192.168.4.175)[0m num_node_features: 7[32m [repeated 9x across cluster][0m
[36m(Trainer pid=126216, ip=192.168.4.175)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=126216, ip=192.168.4.175)[0m train_size: 14[32m [repeated 9x across cluster][0m
[36m(Trainer pid=126216, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=126216, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+, Dataset: MUTAG, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  MUTAG  Total number of graphs:  188
Initialization start: network data collected.
using CPU
2025-07-10 21:56:33,860	INFO worker.py:1429 -- Using address 192.168.11.48:6379 set in the environment variable RAY_ADDRESS
2025-07-10 21:56:33,860	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.11.48:6379...
2025-07-10 21:56:33,867	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.11.48:8265 [39m[22m
//Log init_time: 286.794 ms //end
//Log Large1 init network: 0.0 //end
//Log Large2 init network: 0.0 //end
//Log Large3 init network: 0.0 //end
//Log Large4 init network: 0.0 //end
//Log Server init network: 0.0 //end
//Log Initialization Communication Cost (MB): 0.00 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 6.465 ms//end
[36m(Trainer pid=122386, ip=192.168.36.49)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=122386, ip=192.168.36.49)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=122386, ip=192.168.36.49)[0m inx: 1
[36m(Trainer pid=122386, ip=192.168.36.49)[0m dataset_trainer_name: 1-MUTAG
[36m(Trainer pid=122386, ip=192.168.36.49)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7faf44a950d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7faf44ad4d10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7faf44ad5b90>}
[36m(Trainer pid=122386, ip=192.168.36.49)[0m num_node_features: 7
[36m(Trainer pid=122386, ip=192.168.36.49)[0m num_graph_labels: 2
[36m(Trainer pid=122386, ip=192.168.36.49)[0m train_size: 14
//Log Max memory for Large1: 5644963840.0 //end
//Log Max memory for Large2: 6073061376.0 //end
//Log Max memory for Large3: 8391053312.0 //end
//Log Max memory for Large4: 6396764160.0 //end
//Log Max memory for Server: 18050207744.0 //end
//Log Large1 network: 607667.0 //end
//Log Large2 network: 696764.0 //end
//Log Large3 network: 3268382.0 //end
//Log Large4 network: 694140.0 //end
//Log Server network: 66272251.0 //end
//Log Total Actual Pretrain Comm Cost: 68.23 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 39306.19 ms//end
//Log Max memory for Large1: 5638684672.0 //end
//Log Max memory for Large2: 6061998080.0 //end
//Log Max memory for Large3: 8378847232.0 //end
//Log Max memory for Large4: 6379692032.0 //end
//Log Max memory for Server: 18050609152.0 //end
//Log Large1 network: 176764417.0 //end
//Log Large2 network: 264675673.0 //end
//Log Large3 network: 183241106.0 //end
//Log Large4 network: 265680020.0 //end
//Log Server network: 25696860.0 //end
//Log Total Actual Train Comm Cost: 873.62 MB //end
Train end time recorded and duration set to gauge.
         test_acc
0-MUTAG  0.500000
1-MUTAG  0.500000
2-MUTAG  1.000000
3-MUTAG  1.000000
4-MUTAG  1.000000
5-MUTAG  1.000000
6-MUTAG  0.500000
7-MUTAG  0.500000
8-MUTAG  0.500000
9-MUTAG  0.666667
Average test accuracy: 0.717687074829932
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
[36m(Trainer pid=126891, ip=192.168.4.175)[0m inx: 6[32m [repeated 9x across cluster][0m
[36m(Trainer pid=126891, ip=192.168.4.175)[0m dataset_trainer_name: 6-MUTAG[32m [repeated 9x across cluster][0m
[36m(Trainer pid=126891, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f7136ef8090>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f7136cd1c50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f7136cd2c90>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=126891, ip=192.168.4.175)[0m num_node_features: 7[32m [repeated 9x across cluster][0m
[36m(Trainer pid=126891, ip=192.168.4.175)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=126891, ip=192.168.4.175)[0m train_size: 16[32m [repeated 9x across cluster][0m
[36m(Trainer pid=126891, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=126891, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+dWs, Dataset: MUTAG, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  MUTAG  Total number of graphs:  188
Initialization start: network data collected.
using CPU
2025-07-10 21:58:18,669	INFO worker.py:1429 -- Using address 192.168.11.48:6379 set in the environment variable RAY_ADDRESS
2025-07-10 21:58:18,669	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.11.48:6379...
2025-07-10 21:58:18,674	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.11.48:8265 [39m[22m
//Log init_time: 319.82899999999995 ms //end
//Log Large1 init network: 0.0 //end
//Log Large2 init network: 0.0 //end
//Log Large3 init network: 0.0 //end
//Log Large4 init network: 0.0 //end
//Log Server init network: 0.0 //end
//Log Initialization Communication Cost (MB): 0.00 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 6.3309999999999995 ms//end
[36m(Trainer pid=122886, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=122886, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=122886, ip=192.168.59.37)[0m inx: 2
[36m(Trainer pid=122886, ip=192.168.59.37)[0m dataset_trainer_name: 2-MUTAG
[36m(Trainer pid=122886, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9dcc3a22d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9dcc1bd290>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9dcc1be290>}
[36m(Trainer pid=122886, ip=192.168.59.37)[0m num_node_features: 7
[36m(Trainer pid=122886, ip=192.168.59.37)[0m num_graph_labels: 2
[36m(Trainer pid=122886, ip=192.168.59.37)[0m train_size: 15
//Log Max memory for Large1: 6077349888.0 //end
//Log Max memory for Large2: 5643702272.0 //end
//Log Max memory for Large3: 8824160256.0 //end
//Log Max memory for Large4: 5961019392.0 //end
//Log Max memory for Server: 18063478784.0 //end
//Log Large1 network: 695279.0 //end
//Log Large2 network: 570318.0 //end
//Log Large3 network: 3359175.0 //end
//Log Large4 network: 612581.0 //end
//Log Server network: 66298754.0 //end
//Log Total Actual Pretrain Comm Cost: 68.22 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 41357.280000000006 ms//end
//Log Max memory for Large1: 6067425280.0 //end
//Log Max memory for Large2: 5637255168.0 //end
//Log Max memory for Large3: 8806170624.0 //end
//Log Max memory for Large4: 5954531328.0 //end
//Log Max memory for Server: 18052562944.0 //end
//Log Large1 network: 264796797.0 //end
//Log Large2 network: 176892880.0 //end
//Log Large3 network: 272024057.0 //end
//Log Large4 network: 176968188.0 //end
//Log Server network: 25966517.0 //end
//Log Total Actual Train Comm Cost: 874.18 MB //end
Train end time recorded and duration set to gauge.
         test_acc
0-MUTAG       0.5
1-MUTAG       0.5
2-MUTAG       1.0
3-MUTAG       1.0
4-MUTAG       1.0
5-MUTAG       1.0
6-MUTAG       0.5
7-MUTAG       0.5
8-MUTAG       0.5
9-MUTAG       0.5
Average test accuracy: 0.7006802721088435
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
[36m(Trainer pid=127493, ip=192.168.4.175)[0m inx: 8[32m [repeated 9x across cluster][0m
[36m(Trainer pid=127493, ip=192.168.4.175)[0m dataset_trainer_name: 8-MUTAG[32m [repeated 9x across cluster][0m
[36m(Trainer pid=127493, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f21ddee2fd0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f21ddd14190>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f21ddd151d0>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=127493, ip=192.168.4.175)[0m num_node_features: 7[32m [repeated 9x across cluster][0m
[36m(Trainer pid=127493, ip=192.168.4.175)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=127493, ip=192.168.4.175)[0m train_size: 14[32m [repeated 9x across cluster][0m
[36m(Trainer pid=127493, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=127493, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: FedAvg, Dataset: BZR, Trainers: 10
--------------------------------------------------------------------------------

Downloading https://www.chrsmrrs.com/graphkerneldatasets/BZR.zip
Processing...
Done!
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  BZR  Total number of graphs:  405
Initialization start: network data collected.
using CPU
2025-07-10 22:00:07,016	INFO worker.py:1429 -- Using address 192.168.11.48:6379 set in the environment variable RAY_ADDRESS
2025-07-10 22:00:07,016	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.11.48:6379...
2025-07-10 22:00:07,022	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.11.48:8265 [39m[22m
//Log init_time: 3214.455 ms //end
//Log Large1 init network: 39901.0 //end
//Log Large2 init network: 30645.0 //end
//Log Large3 init network: 762664.0 //end
//Log Large4 init network: 213358.0 //end
//Log Server init network: 132899.0 //end
//Log Initialization Communication Cost (MB): 1.12 //end

Done setting up devices.
Running FedAvg ...
Pretrain start time recorded.
//pretrain_time: 10.791 ms//end
[36m(Trainer pid=123504, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=123504, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=123504, ip=192.168.59.37)[0m inx: 0
[36m(Trainer pid=123504, ip=192.168.59.37)[0m dataset_trainer_name: 0-BZR
[36m(Trainer pid=123504, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1f69e37f90>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1f696412d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1f69642b90>}
[36m(Trainer pid=123504, ip=192.168.59.37)[0m num_node_features: 53
[36m(Trainer pid=123504, ip=192.168.59.37)[0m num_graph_labels: 2
[36m(Trainer pid=123504, ip=192.168.59.37)[0m train_size: 32
//Log Max memory for Large1: 6036172800.0 //end
//Log Max memory for Large2: 6610366464.0 //end
//Log Max memory for Large3: 8764923904.0 //end
//Log Max memory for Large4: 6920384512.0 //end
//Log Max memory for Server: 18101424128.0 //end
//Log Large1 network: 813316.0 //end
//Log Large2 network: 1255361.0 //end
//Log Large3 network: 3477441.0 //end
//Log Large4 network: 1222413.0 //end
//Log Server network: 1522085190.0 //end
//Log Total Actual Pretrain Comm Cost: 1458.03 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 15791.923 ms//end
//Log Max memory for Large1: 6018441216.0 //end
//Log Max memory for Large2: 6588432384.0 //end
//Log Max memory for Large3: 8739024896.0 //end
//Log Max memory for Large4: 6896771072.0 //end
//Log Max memory for Server: 18096926720.0 //end
//Log Large1 network: 54415043.0 //end
//Log Large2 network: 81003550.0 //end
//Log Large3 network: 58317575.0 //end
//Log Large4 network: 81047424.0 //end
//Log Server network: 133519647.0 //end
//Log Total Actual Train Comm Cost: 389.39 MB //end
Train end time recorded and duration set to gauge.
       test_acc
1-BZR      0.75
5-BZR      0.75
6-BZR      0.80
0-BZR      0.75
3-BZR      1.00
9-BZR      0.75
8-BZR      0.75
2-BZR      0.75
4-BZR      0.80
7-BZR      0.60
Average test accuracy: 0.7699376947040498
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=123804, ip=192.168.36.49)[0m inx: 9[32m [repeated 9x across cluster][0m
[36m(Trainer pid=123804, ip=192.168.36.49)[0m dataset_trainer_name: 9-BZR[32m [repeated 9x across cluster][0m
[36m(Trainer pid=123804, ip=192.168.36.49)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9e1d14d7d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9e1ce71250>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9e1ce72310>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=123804, ip=192.168.36.49)[0m num_node_features: 53[32m [repeated 9x across cluster][0m
[36m(Trainer pid=123804, ip=192.168.36.49)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=123804, ip=192.168.36.49)[0m train_size: 32[32m [repeated 9x across cluster][0m
[36m(Trainer pid=123804, ip=192.168.36.49)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=123804, ip=192.168.36.49)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL, Dataset: BZR, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  BZR  Total number of graphs:  405
Initialization start: network data collected.
using CPU
2025-07-10 22:01:31,254	INFO worker.py:1429 -- Using address 192.168.11.48:6379 set in the environment variable RAY_ADDRESS
2025-07-10 22:01:31,254	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.11.48:6379...
2025-07-10 22:01:31,262	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.11.48:8265 [39m[22m
//Log init_time: 3218.6949999999997 ms //end
//Log Large1 init network: 354086.0 //end
//Log Large2 init network: 212725.0 //end
//Log Large3 init network: 678739.0 //end
//Log Large4 init network: 361566.0 //end
//Log Server init network: 757051827.0 //end
//Log Initialization Communication Cost (MB): 723.51 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 9.048 ms//end
[36m(Trainer pid=124550, ip=192.168.27.11)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=124550, ip=192.168.27.11)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=124550, ip=192.168.27.11)[0m inx: 1
[36m(Trainer pid=124550, ip=192.168.27.11)[0m dataset_trainer_name: 1-BZR
[36m(Trainer pid=124550, ip=192.168.27.11)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8bf8e22cd0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8bf0568f50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8bf0569b50>}
[36m(Trainer pid=124550, ip=192.168.27.11)[0m num_node_features: 53
[36m(Trainer pid=124550, ip=192.168.27.11)[0m num_graph_labels: 2
[36m(Trainer pid=124550, ip=192.168.27.11)[0m train_size: 32
//Log Max memory for Large1: 6595555328.0 //end
//Log Max memory for Large2: 6025428992.0 //end
//Log Max memory for Large3: 9341534208.0 //end
//Log Max memory for Large4: 6319865856.0 //end
//Log Max memory for Server: 18113413120.0 //end
//Log Large1 network: 770581.0 //end
//Log Large2 network: 685099.0 //end
//Log Large3 network: 3542530.0 //end
//Log Large4 network: 551356.0 //end
//Log Server network: 766686694.0 //end
//Log Total Actual Pretrain Comm Cost: 736.46 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 42161.097 ms//end
//Log Max memory for Large1: 6558314496.0 //end
//Log Max memory for Large2: 5975773184.0 //end
//Log Max memory for Large3: 9300652032.0 //end
//Log Max memory for Large4: 6295785472.0 //end
//Log Max memory for Server: 18103902208.0 //end
//Log Large1 network: 268926537.0 //end
//Log Large2 network: 179606508.0 //end
//Log Large3 network: 275223352.0 //end
//Log Large4 network: 180320522.0 //end
//Log Server network: 26113919.0 //end
//Log Total Actual Train Comm Cost: 887.10 MB //end
Train end time recorded and duration set to gauge.
       test_acc
0-BZR      0.75
1-BZR      1.00
2-BZR      0.75
3-BZR      1.00
4-BZR      0.60
5-BZR      0.80
6-BZR      0.80
7-BZR      0.80
8-BZR      0.80
9-BZR      0.75
Average test accuracy: 0.8049844236760124
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
[36m(Trainer pid=128832, ip=192.168.4.175)[0m inx: 8[32m [repeated 9x across cluster][0m
[36m(Trainer pid=128832, ip=192.168.4.175)[0m dataset_trainer_name: 8-BZR[32m [repeated 9x across cluster][0m
[36m(Trainer pid=128832, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f13842c33d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1377f53810>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1377f691d0>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=128832, ip=192.168.4.175)[0m num_node_features: 53[32m [repeated 9x across cluster][0m
[36m(Trainer pid=128832, ip=192.168.4.175)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=128832, ip=192.168.4.175)[0m train_size: 32[32m [repeated 9x across cluster][0m
[36m(Trainer pid=128832, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=128832, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+, Dataset: BZR, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  BZR  Total number of graphs:  405
Initialization start: network data collected.
using CPU
2025-07-10 22:03:21,957	INFO worker.py:1429 -- Using address 192.168.11.48:6379 set in the environment variable RAY_ADDRESS
2025-07-10 22:03:21,957	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.11.48:6379...
2025-07-10 22:03:21,964	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.11.48:8265 [39m[22m
//Log init_time: 3112.5150000000003 ms //end
//Log Large1 init network: 191820.0 //end
//Log Large2 init network: 30933.0 //end
//Log Large3 init network: 267893.0 //end
//Log Large4 init network: 181787.0 //end
//Log Server init network: 150237108.0 //end
//Log Initialization Communication Cost (MB): 143.92 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 6.464 ms//end
[36m(Trainer pid=124711, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=124711, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=124711, ip=192.168.59.37)[0m inx: 0
[36m(Trainer pid=124711, ip=192.168.59.37)[0m dataset_trainer_name: 0-BZR
[36m(Trainer pid=124711, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd1968ba150>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd1967d5110>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd1967d6e50>}
[36m(Trainer pid=124711, ip=192.168.59.37)[0m num_node_features: 53
[36m(Trainer pid=124711, ip=192.168.59.37)[0m num_graph_labels: 2
[36m(Trainer pid=124711, ip=192.168.59.37)[0m train_size: 32
//Log Max memory for Large1: 6033555456.0 //end
//Log Max memory for Large2: 6610296832.0 //end
//Log Max memory for Large3: 8764481536.0 //end
//Log Max memory for Large4: 6909116416.0 //end
//Log Max memory for Server: 18154065920.0 //end
//Log Large1 network: 707332.0 //end
//Log Large2 network: 1031048.0 //end
//Log Large3 network: 3600781.0 //end
//Log Large4 network: 839397.0 //end
//Log Server network: 1371625785.0 //end
//Log Total Actual Pretrain Comm Cost: 1313.98 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 41531.126000000004 ms//end
//Log Max memory for Large1: 6011854848.0 //end
//Log Max memory for Large2: 6558789632.0 //end
//Log Max memory for Large3: 8730329088.0 //end
//Log Max memory for Large4: 6871781376.0 //end
//Log Max memory for Server: 18114269184.0 //end
//Log Large1 network: 179611216.0 //end
//Log Large2 network: 269024920.0 //end
//Log Large3 network: 186779018.0 //end
//Log Large4 network: 268915571.0 //end
//Log Server network: 25989966.0 //end
//Log Total Actual Train Comm Cost: 887.22 MB //end
Train end time recorded and duration set to gauge.
       test_acc
0-BZR      0.75
1-BZR      0.75
2-BZR      0.80
3-BZR      1.00
4-BZR      1.00
5-BZR      0.80
6-BZR      1.00
7-BZR      0.75
8-BZR      0.75
9-BZR      0.80
Average test accuracy: 0.8404984423676013
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
[36m(Trainer pid=125019, ip=192.168.36.49)[0m inx: 9[32m [repeated 9x across cluster][0m
[36m(Trainer pid=125019, ip=192.168.36.49)[0m dataset_trainer_name: 9-BZR[32m [repeated 9x across cluster][0m
[36m(Trainer pid=125019, ip=192.168.36.49)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fb85df393d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fb85dd1e310>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fb85dd1fb50>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=125019, ip=192.168.36.49)[0m num_node_features: 53[32m [repeated 9x across cluster][0m
[36m(Trainer pid=125019, ip=192.168.36.49)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=125019, ip=192.168.36.49)[0m train_size: 32[32m [repeated 9x across cluster][0m
[36m(Trainer pid=125019, ip=192.168.36.49)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=125019, ip=192.168.36.49)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+dWs, Dataset: BZR, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  BZR  Total number of graphs:  405
Initialization start: network data collected.
using CPU
2025-07-10 22:05:11,796	INFO worker.py:1429 -- Using address 192.168.11.48:6379 set in the environment variable RAY_ADDRESS
2025-07-10 22:05:11,797	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.11.48:6379...
2025-07-10 22:05:11,804	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.11.48:8265 [39m[22m
//Log init_time: 3174.192 ms //end
//Log Large1 init network: 147154.0 //end
//Log Large2 init network: 237378.0 //end
//Log Large3 init network: 467610.0 //end
//Log Large4 init network: 155761.0 //end
//Log Server init network: 131553.0 //end
//Log Initialization Communication Cost (MB): 1.09 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 8.045 ms//end
[36m(Trainer pid=125872, ip=192.168.27.11)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=125872, ip=192.168.27.11)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=125872, ip=192.168.27.11)[0m inx: 1
[36m(Trainer pid=125872, ip=192.168.27.11)[0m dataset_trainer_name: 1-BZR
[36m(Trainer pid=125872, ip=192.168.27.11)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fb0f393c350>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fb0f3761710>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fb0f3762e10>}
[36m(Trainer pid=125872, ip=192.168.27.11)[0m num_node_features: 53
[36m(Trainer pid=125872, ip=192.168.27.11)[0m num_graph_labels: 2
[36m(Trainer pid=125872, ip=192.168.27.11)[0m train_size: 32
//Log Max memory for Large1: 6604410880.0 //end
//Log Max memory for Large2: 6029471744.0 //end
//Log Max memory for Large3: 9336127488.0 //end
//Log Max memory for Large4: 6330425344.0 //end
//Log Max memory for Server: 18135588864.0 //end
//Log Large1 network: 918964.0 //end
//Log Large2 network: 697240.0 //end
//Log Large3 network: 3687269.0 //end
//Log Large4 network: 715331.0 //end
//Log Server network: 1522086201.0 //end
//Log Total Actual Pretrain Comm Cost: 1457.31 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 42474.77 ms//end
//Log Max memory for Large1: 6571274240.0 //end
//Log Max memory for Large2: 5997600768.0 //end
//Log Max memory for Large3: 9310613504.0 //end
//Log Max memory for Large4: 6296104960.0 //end
//Log Max memory for Server: 18142261248.0 //end
//Log Large1 network: 269098680.0 //end
//Log Large2 network: 179627485.0 //end
//Log Large3 network: 275225859.0 //end
//Log Large4 network: 180177443.0 //end
//Log Server network: 26238389.0 //end
//Log Total Actual Train Comm Cost: 887.27 MB //end
Train end time recorded and duration set to gauge.
       test_acc
0-BZR      0.75
1-BZR      1.00
2-BZR      0.75
3-BZR      1.00
4-BZR      0.60
5-BZR      0.75
6-BZR      0.80
7-BZR      0.80
8-BZR      0.80
9-BZR      0.75
Average test accuracy: 0.7999999999999998
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
[36m(Trainer pid=130147, ip=192.168.4.175)[0m inx: 8[32m [repeated 9x across cluster][0m
[36m(Trainer pid=130147, ip=192.168.4.175)[0m dataset_trainer_name: 8-BZR[32m [repeated 9x across cluster][0m
[36m(Trainer pid=130147, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7eecc95e1190>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7eecc9405cd0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7eecc94076d0>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=130147, ip=192.168.4.175)[0m num_node_features: 53[32m [repeated 9x across cluster][0m
[36m(Trainer pid=130147, ip=192.168.4.175)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=130147, ip=192.168.4.175)[0m train_size: 32[32m [repeated 9x across cluster][0m
[36m(Trainer pid=130147, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=130147, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: FedAvg, Dataset: COX2, Trainers: 10
--------------------------------------------------------------------------------

Downloading https://www.chrsmrrs.com/graphkerneldatasets/COX2.zip
Processing...
Done!
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  COX2  Total number of graphs:  467
Initialization start: network data collected.
using CPU
2025-07-10 22:07:04,327	INFO worker.py:1429 -- Using address 192.168.11.48:6379 set in the environment variable RAY_ADDRESS
2025-07-10 22:07:04,327	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.11.48:6379...
2025-07-10 22:07:04,334	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.11.48:8265 [39m[22m
//Log init_time: 3371.516 ms //end
//Log Large1 init network: 41039.0 //end
//Log Large2 init network: 161063.0 //end
//Log Large3 init network: 287257.0 //end
//Log Large4 init network: 188555.0 //end
//Log Server init network: 0.0 //end
//Log Initialization Communication Cost (MB): 0.65 //end

Done setting up devices.
Running FedAvg ...
Pretrain start time recorded.
//pretrain_time: 12.030000000000001 ms//end
[36m(Trainer pid=126025, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=126025, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=126025, ip=192.168.59.37)[0m inx: 0
[36m(Trainer pid=126025, ip=192.168.59.37)[0m dataset_trainer_name: 0-COX2
[36m(Trainer pid=126025, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f31c067c450>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f31b4482d90>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f31bc348b10>}
[36m(Trainer pid=126025, ip=192.168.59.37)[0m num_node_features: 35
[36m(Trainer pid=126025, ip=192.168.59.37)[0m num_graph_labels: 2
[36m(Trainer pid=126025, ip=192.168.59.37)[0m train_size: 36
//Log Max memory for Large1: 6082158592.0 //end
//Log Max memory for Large2: 6697353216.0 //end
//Log Max memory for Large3: 8815427584.0 //end
//Log Max memory for Large4: 6986108928.0 //end
//Log Max memory for Server: 18192101376.0 //end
//Log Large1 network: 906165.0 //end
//Log Large2 network: 1074693.0 //end
//Log Large3 network: 3638322.0 //end
//Log Large4 network: 1203025.0 //end
//Log Server network: 1678575309.0 //end
//Log Total Actual Pretrain Comm Cost: 1607.32 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 16153.69 ms//end
//Log Max memory for Large1: 6051799040.0 //end
//Log Max memory for Large2: 6673719296.0 //end
//Log Max memory for Large3: 8790319104.0 //end
//Log Max memory for Large4: 6985994240.0 //end
//Log Max memory for Server: 18185519104.0 //end
//Log Large1 network: 54405000.0 //end
//Log Large2 network: 81017033.0 //end
//Log Large3 network: 58646126.0 //end
//Log Large4 network: 81007827.0 //end
//Log Server network: 133434039.0 //end
//Log Total Actual Train Comm Cost: 389.59 MB //end
Train end time recorded and duration set to gauge.
        test_acc
1-COX2       1.0
5-COX2       1.0
6-COX2       0.8
0-COX2       0.8
3-COX2       0.8
7-COX2       0.6
4-COX2       1.0
9-COX2       1.0
2-COX2       0.8
8-COX2       1.0
Average test accuracy: 0.8806539509536785
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=126334, ip=192.168.36.49)[0m inx: 9[32m [repeated 9x across cluster][0m
[36m(Trainer pid=126334, ip=192.168.36.49)[0m dataset_trainer_name: 9-COX2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=126334, ip=192.168.36.49)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8db25f9750>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8db212ee10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8db2565f10>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=126334, ip=192.168.36.49)[0m num_node_features: 35[32m [repeated 9x across cluster][0m
[36m(Trainer pid=126334, ip=192.168.36.49)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=126334, ip=192.168.36.49)[0m train_size: 37[32m [repeated 9x across cluster][0m
[36m(Trainer pid=126334, ip=192.168.36.49)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=126334, ip=192.168.36.49)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL, Dataset: COX2, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  COX2  Total number of graphs:  467
Initialization start: network data collected.
using CPU
2025-07-10 22:08:29,358	INFO worker.py:1429 -- Using address 192.168.11.48:6379 set in the environment variable RAY_ADDRESS
2025-07-10 22:08:29,358	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.11.48:6379...
2025-07-10 22:08:29,363	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.11.48:8265 [39m[22m
//Log init_time: 3412.929 ms //end
//Log Large1 init network: 224468.0 //end
//Log Large2 init network: 248329.0 //end
//Log Large3 init network: 282331.0 //end
//Log Large4 init network: 448396.0 //end
//Log Server init network: 499981341.0 //end
//Log Initialization Communication Cost (MB): 477.97 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 8.392 ms//end
[36m(Trainer pid=127090, ip=192.168.27.11)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=127090, ip=192.168.27.11)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=127090, ip=192.168.27.11)[0m inx: 1
[36m(Trainer pid=127090, ip=192.168.27.11)[0m dataset_trainer_name: 1-COX2
[36m(Trainer pid=127090, ip=192.168.27.11)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fcc949da0d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fcc9482a890>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fcc94e2ef90>}
[36m(Trainer pid=127090, ip=192.168.27.11)[0m num_node_features: 35
[36m(Trainer pid=127090, ip=192.168.27.11)[0m num_graph_labels: 2
[36m(Trainer pid=127090, ip=192.168.27.11)[0m train_size: 36
//Log Max memory for Large1: 6691487744.0 //end
//Log Max memory for Large2: 6067163136.0 //end
//Log Max memory for Large3: 9414971392.0 //end
//Log Max memory for Large4: 6389600256.0 //end
//Log Max memory for Server: 18235949056.0 //end
//Log Large1 network: 984725.0 //end
//Log Large2 network: 687057.0 //end
//Log Large3 network: 3886537.0 //end
//Log Large4 network: 553711.0 //end
//Log Server network: 1178626522.0 //end
//Log Total Actual Pretrain Comm Cost: 1129.85 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 43034.825 ms//end
//Log Max memory for Large1: 6648659968.0 //end
//Log Max memory for Large2: 6053752832.0 //end
//Log Max memory for Large3: 9390940160.0 //end
//Log Max memory for Large4: 6351781888.0 //end
//Log Max memory for Server: 18176917504.0 //end
//Log Large1 network: 267240777.0 //end
//Log Large2 network: 178446407.0 //end
//Log Large3 network: 274898231.0 //end
//Log Large4 network: 178593859.0 //end
//Log Server network: 26327178.0 //end
//Log Total Actual Train Comm Cost: 882.63 MB //end
Train end time recorded and duration set to gauge.
        test_acc
0-COX2       1.0
1-COX2       1.0
2-COX2       1.0
3-COX2       1.0
4-COX2       1.0
5-COX2       1.0
6-COX2       1.0
7-COX2       1.0
8-COX2       1.0
9-COX2       1.0
Average test accuracy: 1.0
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
[36m(Trainer pid=131362, ip=192.168.4.175)[0m inx: 8[32m [repeated 9x across cluster][0m
[36m(Trainer pid=131362, ip=192.168.4.175)[0m dataset_trainer_name: 8-COX2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=131362, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe8fa130e10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe8fa17ec50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe8fa79be50>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=131362, ip=192.168.4.175)[0m num_node_features: 35[32m [repeated 9x across cluster][0m
[36m(Trainer pid=131362, ip=192.168.4.175)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=131362, ip=192.168.4.175)[0m train_size: 36[32m [repeated 9x across cluster][0m
[36m(Trainer pid=131362, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=131362, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+, Dataset: COX2, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  COX2  Total number of graphs:  467
Initialization start: network data collected.
using CPU
2025-07-10 22:10:21,013	INFO worker.py:1429 -- Using address 192.168.11.48:6379 set in the environment variable RAY_ADDRESS
2025-07-10 22:10:21,013	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.11.48:6379...
2025-07-10 22:10:21,020	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.11.48:8265 [39m[22m
//Log init_time: 3393.7050000000004 ms //end
//Log Large1 init network: 348478.0 //end
//Log Large2 init network: 38927.0 //end
//Log Large3 init network: 940521.0 //end
//Log Large4 init network: 229681.0 //end
//Log Server init network: 142049.0 //end
//Log Initialization Communication Cost (MB): 1.62 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 7.908999999999999 ms//end
[36m(Trainer pid=127242, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=127242, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=127242, ip=192.168.59.37)[0m inx: 0
[36m(Trainer pid=127242, ip=192.168.59.37)[0m dataset_trainer_name: 0-COX2
[36m(Trainer pid=127242, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f58d32ffe50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f58d3142f10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f58d372aa90>}
[36m(Trainer pid=127242, ip=192.168.59.37)[0m num_node_features: 35
[36m(Trainer pid=127242, ip=192.168.59.37)[0m num_graph_labels: 2
[36m(Trainer pid=127242, ip=192.168.59.37)[0m train_size: 36
//Log Max memory for Large1: 6080487424.0 //end
//Log Max memory for Large2: 6681522176.0 //end
//Log Max memory for Large3: 8815292416.0 //end
//Log Max memory for Large4: 6985170944.0 //end
//Log Max memory for Server: 18231926784.0 //end
//Log Large1 network: 541500.0 //end
//Log Large2 network: 1036431.0 //end
//Log Large3 network: 3258819.0 //end
//Log Large4 network: 1032733.0 //end
//Log Server network: 1677322351.0 //end
//Log Total Actual Pretrain Comm Cost: 1605.22 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 42134.686 ms//end
//Log Max memory for Large1: 6030266368.0 //end
//Log Max memory for Large2: 6644989952.0 //end
//Log Max memory for Large3: 8781922304.0 //end
//Log Max memory for Large4: 6941212672.0 //end
//Log Max memory for Server: 18199314432.0 //end
//Log Large1 network: 178486285.0 //end
//Log Large2 network: 267230532.0 //end
//Log Large3 network: 184913153.0 //end
//Log Large4 network: 268247487.0 //end
//Log Server network: 26313899.0 //end
//Log Total Actual Train Comm Cost: 882.33 MB //end
Train end time recorded and duration set to gauge.
        test_acc
0-COX2       1.0
1-COX2       1.0
2-COX2       1.0
3-COX2       1.0
4-COX2       1.0
5-COX2       0.6
6-COX2       1.0
7-COX2       1.0
8-COX2       1.0
9-COX2       1.0
Average test accuracy: 0.9607629427792916
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
[36m(Trainer pid=127539, ip=192.168.36.49)[0m inx: 9[32m [repeated 9x across cluster][0m
[36m(Trainer pid=127539, ip=192.168.36.49)[0m dataset_trainer_name: 9-COX2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=127539, ip=192.168.36.49)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7ef0e8ce6790>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7ef0e8b27310>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7ef0e9177550>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=127539, ip=192.168.36.49)[0m num_node_features: 35[32m [repeated 9x across cluster][0m
[36m(Trainer pid=127539, ip=192.168.36.49)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=127539, ip=192.168.36.49)[0m train_size: 37[32m [repeated 9x across cluster][0m
[36m(Trainer pid=127539, ip=192.168.36.49)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=127539, ip=192.168.36.49)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+dWs, Dataset: COX2, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  COX2  Total number of graphs:  467
Initialization start: network data collected.
using CPU
2025-07-10 22:12:11,775	INFO worker.py:1429 -- Using address 192.168.11.48:6379 set in the environment variable RAY_ADDRESS
2025-07-10 22:12:11,776	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.11.48:6379...
2025-07-10 22:12:11,780	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.11.48:8265 [39m[22m
//Log init_time: 3473.006 ms //end
//Log Large1 init network: 197471.0 //end
//Log Large2 init network: 40357.0 //end
//Log Large3 init network: 519849.0 //end
//Log Large4 init network: 308105.0 //end
//Log Server init network: 836344568.0 //end
//Log Initialization Communication Cost (MB): 798.62 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 6.630999999999999 ms//end
[36m(Trainer pid=128415, ip=192.168.27.11)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=128415, ip=192.168.27.11)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=128415, ip=192.168.27.11)[0m inx: 1
[36m(Trainer pid=128415, ip=192.168.27.11)[0m dataset_trainer_name: 1-COX2
[36m(Trainer pid=128415, ip=192.168.27.11)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3bd1904850>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3bd144ed90>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3bd1a9d610>}
[36m(Trainer pid=128415, ip=192.168.27.11)[0m num_node_features: 35
[36m(Trainer pid=128415, ip=192.168.27.11)[0m num_graph_labels: 2
[36m(Trainer pid=128415, ip=192.168.27.11)[0m train_size: 36
//Log Max memory for Large1: 6686674944.0 //end
//Log Max memory for Large2: 6074707968.0 //end
//Log Max memory for Large3: 9421852672.0 //end
//Log Max memory for Large4: 6397390848.0 //end
//Log Max memory for Server: 18247172096.0 //end
//Log Large1 network: 865104.0 //end
//Log Large2 network: 881253.0 //end
//Log Large3 network: 3703758.0 //end
//Log Large4 network: 716921.0 //end
//Log Server network: 841305638.0 //end
//Log Total Actual Pretrain Comm Cost: 808.21 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 42731.552 ms//end
//Log Max memory for Large1: 6647566336.0 //end
//Log Max memory for Large2: 6040875008.0 //end
//Log Max memory for Large3: 9378967552.0 //end
//Log Max memory for Large4: 6371717120.0 //end
//Log Max memory for Server: 18219380736.0 //end
//Log Large1 network: 267189695.0 //end
//Log Large2 network: 178579774.0 //end
//Log Large3 network: 274911308.0 //end
//Log Large4 network: 178482403.0 //end
//Log Server network: 26367797.0 //end
//Log Total Actual Train Comm Cost: 882.66 MB //end
Train end time recorded and duration set to gauge.
        test_acc
0-COX2       0.8
1-COX2       1.0
2-COX2       1.0
3-COX2       1.0
4-COX2       1.0
5-COX2       1.0
6-COX2       1.0
7-COX2       1.0
8-COX2       1.0
9-COX2       1.0
Average test accuracy: 0.9803814713896458
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
[36m(Trainer pid=132709, ip=192.168.4.175)[0m inx: 8[32m [repeated 9x across cluster][0m
[36m(Trainer pid=132709, ip=192.168.4.175)[0m dataset_trainer_name: 8-COX2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=132709, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa524144c10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa524192790>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa526fcf210>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=132709, ip=192.168.4.175)[0m num_node_features: 35[32m [repeated 9x across cluster][0m
[36m(Trainer pid=132709, ip=192.168.4.175)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=132709, ip=192.168.4.175)[0m train_size: 36[32m [repeated 9x across cluster][0m
[36m(Trainer pid=132709, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=132709, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: FedAvg, Dataset: DHFR, Trainers: 10
--------------------------------------------------------------------------------

Downloading https://www.chrsmrrs.com/graphkerneldatasets/DHFR.zip
Processing...
Done!
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  DHFR  Total number of graphs:  756
Initialization start: network data collected.
using CPU
2025-07-10 22:14:04,951	INFO worker.py:1429 -- Using address 192.168.11.48:6379 set in the environment variable RAY_ADDRESS
2025-07-10 22:14:04,951	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.11.48:6379...
2025-07-10 22:14:04,958	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.11.48:8265 [39m[22m
[36m(Trainer pid=128573, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=128573, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=128573, ip=192.168.59.37)[0m inx: 0
[36m(Trainer pid=128573, ip=192.168.59.37)[0m dataset_trainer_name: 0-DHFR
[36m(Trainer pid=128573, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f43cf4bec10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f43cf94a190>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f43cf40d910>}
[36m(Trainer pid=128573, ip=192.168.59.37)[0m num_node_features: 53
[36m(Trainer pid=128573, ip=192.168.59.37)[0m num_graph_labels: 2
[36m(Trainer pid=128573, ip=192.168.59.37)[0m train_size: 64
[36m(Trainer pid=128674, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 4x across cluster][0m
[36m(Trainer pid=128674, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))[32m [repeated 4x across cluster][0m
[36m(Trainer pid=128674, ip=192.168.59.37)[0m inx: 4[32m [repeated 4x across cluster][0m
[36m(Trainer pid=128674, ip=192.168.59.37)[0m dataset_trainer_name: 4-DHFR[32m [repeated 4x across cluster][0m
[36m(Trainer pid=128674, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fcb60495150>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fcb60b2f450>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fcb60aec750>}[32m [repeated 4x across cluster][0m
[36m(Trainer pid=128674, ip=192.168.59.37)[0m num_node_features: 53[32m [repeated 4x across cluster][0m
[36m(Trainer pid=128674, ip=192.168.59.37)[0m num_graph_labels: 2[32m [repeated 4x across cluster][0m
[36m(Trainer pid=128674, ip=192.168.59.37)[0m train_size: 57[32m [repeated 4x across cluster][0m
//Log init_time: 13449.628 ms //end
//Log Large1 init network: 1303746.0 //end
//Log Large2 init network: 1251980.0 //end
//Log Large3 init network: 3297738.0 //end
//Log Large4 init network: 1574106.0 //end
//Log Server init network: 4368978430.0 //end
//Log Initialization Communication Cost (MB): 4173.67 //end

Done setting up devices.
Running FedAvg ...
Pretrain start time recorded.
//pretrain_time: 12.904 ms//end
[36m(Trainer pid=128773, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 4x across cluster][0m
[36m(Trainer pid=128773, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))[32m [repeated 4x across cluster][0m
[36m(Trainer pid=128773, ip=192.168.59.37)[0m inx: 8[32m [repeated 4x across cluster][0m
[36m(Trainer pid=128773, ip=192.168.59.37)[0m dataset_trainer_name: 8-DHFR[32m [repeated 4x across cluster][0m
[36m(Trainer pid=128773, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7efee48fe3d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7efee4946550>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7efee49503d0>}[32m [repeated 4x across cluster][0m
[36m(Trainer pid=128773, ip=192.168.59.37)[0m num_node_features: 53[32m [repeated 4x across cluster][0m
[36m(Trainer pid=128773, ip=192.168.59.37)[0m num_graph_labels: 2[32m [repeated 4x across cluster][0m
[36m(Trainer pid=128773, ip=192.168.59.37)[0m train_size: 61[32m [repeated 4x across cluster][0m
//Log Max memory for Large1: 7153897472.0 //end
//Log Max memory for Large2: 8074162176.0 //end
//Log Max memory for Large3: 9894834176.0 //end
//Log Max memory for Large4: 8535027712.0 //end
//Log Max memory for Server: 18302476288.0 //end
//Log Large1 network: 590409.0 //end
//Log Large2 network: 1183121.0 //end
//Log Large3 network: 3249201.0 //end
//Log Large4 network: 1373982.0 //end
//Log Server network: 1898829886.0 //end
//Log Total Actual Pretrain Comm Cost: 1816.97 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 16609.015 ms//end
//Log Max memory for Large1: 7127592960.0 //end
//Log Max memory for Large2: 8051986432.0 //end
//Log Max memory for Large3: 9883803648.0 //end
//Log Max memory for Large4: 8545869824.0 //end
//Log Max memory for Server: 18304122880.0 //end
//Log Large1 network: 54415427.0 //end
//Log Large2 network: 81078362.0 //end
//Log Large3 network: 58335292.0 //end
//Log Large4 network: 81070550.0 //end
//Log Server network: 133500509.0 //end
//Log Total Actual Train Comm Cost: 389.48 MB //end
Train end time recorded and duration set to gauge.
        test_acc
1-DHFR  0.714286
3-DHFR  0.750000
0-DHFR  0.750000
7-DHFR  0.375000
9-DHFR  0.625000
6-DHFR  0.555556
8-DHFR  0.500000
4-DHFR  0.625000
2-DHFR  0.625000
5-DHFR  0.714286
Average test accuracy: 0.6224777487256689
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=128949, ip=192.168.36.49)[0m inx: 9
[36m(Trainer pid=128949, ip=192.168.36.49)[0m dataset_trainer_name: 9-DHFR
[36m(Trainer pid=128949, ip=192.168.36.49)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f7056005bd0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f7056677490>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f705667ac90>}
[36m(Trainer pid=128949, ip=192.168.36.49)[0m num_node_features: 53
[36m(Trainer pid=128949, ip=192.168.36.49)[0m num_graph_labels: 2
[36m(Trainer pid=128949, ip=192.168.36.49)[0m train_size: 57
[36m(Trainer pid=128949, ip=192.168.36.49)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=128949, ip=192.168.36.49)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL, Dataset: DHFR, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  DHFR  Total number of graphs:  756
Initialization start: network data collected.
using CPU
2025-07-10 22:15:40,424	INFO worker.py:1429 -- Using address 192.168.11.48:6379 set in the environment variable RAY_ADDRESS
2025-07-10 22:15:40,424	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.11.48:6379...
2025-07-10 22:15:40,430	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.11.48:8265 [39m[22m
[36m(Trainer pid=133835, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=133835, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=133835, ip=192.168.4.175)[0m inx: 0
[36m(Trainer pid=133835, ip=192.168.4.175)[0m dataset_trainer_name: 0-DHFR
[36m(Trainer pid=133835, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc62ecf2190>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc62f12d3d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc62ec20f50>}
[36m(Trainer pid=133835, ip=192.168.4.175)[0m num_node_features: 53
[36m(Trainer pid=133835, ip=192.168.4.175)[0m num_graph_labels: 2
[36m(Trainer pid=133835, ip=192.168.4.175)[0m train_size: 64
[36m(Trainer pid=133930, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 4x across cluster][0m
[36m(Trainer pid=133930, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 4x across cluster][0m
[36m(Trainer pid=133930, ip=192.168.4.175)[0m inx: 4[32m [repeated 4x across cluster][0m
[36m(Trainer pid=133930, ip=192.168.4.175)[0m dataset_trainer_name: 4-DHFR[32m [repeated 4x across cluster][0m
[36m(Trainer pid=133930, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc194a16310>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc1949531d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc19493cd90>}[32m [repeated 4x across cluster][0m
[36m(Trainer pid=133930, ip=192.168.4.175)[0m num_node_features: 53[32m [repeated 4x across cluster][0m
[36m(Trainer pid=133930, ip=192.168.4.175)[0m num_graph_labels: 2[32m [repeated 4x across cluster][0m
[36m(Trainer pid=133930, ip=192.168.4.175)[0m train_size: 57[32m [repeated 4x across cluster][0m
//Log init_time: 13821.532 ms //end
//Log Large1 init network: 1324094.0 //end
//Log Large2 init network: 1184601.0 //end
//Log Large3 init network: 3710681.0 //end
//Log Large4 init network: 1475233.0 //end
//Log Server init network: 5028038976.0 //end
//Log Initialization Communication Cost (MB): 4802.45 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 7.513 ms//end
[36m(Trainer pid=134028, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 4x across cluster][0m
[36m(Trainer pid=134028, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 4x across cluster][0m
[36m(Trainer pid=134028, ip=192.168.4.175)[0m inx: 8[32m [repeated 4x across cluster][0m
[36m(Trainer pid=134028, ip=192.168.4.175)[0m dataset_trainer_name: 8-DHFR[32m [repeated 4x across cluster][0m
[36m(Trainer pid=134028, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9766bbccd0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9766a30bd0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9766a3ba10>}[32m [repeated 4x across cluster][0m
[36m(Trainer pid=134028, ip=192.168.4.175)[0m num_node_features: 53[32m [repeated 4x across cluster][0m
[36m(Trainer pid=134028, ip=192.168.4.175)[0m num_graph_labels: 2[32m [repeated 4x across cluster][0m
[36m(Trainer pid=134028, ip=192.168.4.175)[0m train_size: 61[32m [repeated 4x across cluster][0m
//Log Max memory for Large1: 8081846272.0 //end
//Log Max memory for Large2: 7162667008.0 //end
//Log Max memory for Large3: 10965213184.0 //end
//Log Max memory for Large4: 7476158464.0 //end
//Log Max memory for Server: 18352111616.0 //end
//Log Large1 network: 1092325.0 //end
//Log Large2 network: 655371.0 //end
//Log Large3 network: 3602401.0 //end
//Log Large4 network: 573484.0 //end
//Log Server network: 1235500456.0 //end
//Log Total Actual Pretrain Comm Cost: 1183.91 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 44144.863 ms//end
//Log Max memory for Large1: 8053141504.0 //end
//Log Max memory for Large2: 7128584192.0 //end
//Log Max memory for Large3: 10950643712.0 //end
//Log Max memory for Large4: 7461642240.0 //end
//Log Max memory for Server: 18284556288.0 //end
//Log Large1 network: 269810101.0 //end
//Log Large2 network: 179609721.0 //end
//Log Large3 network: 275105024.0 //end
//Log Large4 network: 179623851.0 //end
//Log Server network: 26477211.0 //end
//Log Total Actual Train Comm Cost: 887.51 MB //end
Train end time recorded and duration set to gauge.
        test_acc
0-DHFR  0.750000
1-DHFR  0.714286
2-DHFR  0.750000
3-DHFR  0.750000
4-DHFR  0.750000
5-DHFR  0.750000
6-DHFR  0.625000
7-DHFR  0.750000
8-DHFR  0.625000
9-DHFR  0.625000
Average test accuracy: 0.7088186356073212
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
[36m(Trainer pid=129891, ip=192.168.27.11)[0m inx: 9
[36m(Trainer pid=129891, ip=192.168.27.11)[0m dataset_trainer_name: 9-DHFR
[36m(Trainer pid=129891, ip=192.168.27.11)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0d8239d690>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0d82a0f1d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0d82a23d90>}
[36m(Trainer pid=129891, ip=192.168.27.11)[0m num_node_features: 53
[36m(Trainer pid=129891, ip=192.168.27.11)[0m num_graph_labels: 2
[36m(Trainer pid=129891, ip=192.168.27.11)[0m train_size: 57
[36m(Trainer pid=129891, ip=192.168.27.11)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=129891, ip=192.168.27.11)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+, Dataset: DHFR, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  DHFR  Total number of graphs:  756
Initialization start: network data collected.
using CPU
2025-07-10 22:17:43,744	INFO worker.py:1429 -- Using address 192.168.11.48:6379 set in the environment variable RAY_ADDRESS
2025-07-10 22:17:43,745	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.11.48:6379...
2025-07-10 22:17:43,750	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.11.48:8265 [39m[22m
[36m(Trainer pid=129876, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=129876, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=129876, ip=192.168.59.37)[0m inx: 0
[36m(Trainer pid=129876, ip=192.168.59.37)[0m dataset_trainer_name: 0-DHFR
[36m(Trainer pid=129876, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fb1d36e4050>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fb1d3b34210>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fb1d3614550>}
[36m(Trainer pid=129876, ip=192.168.59.37)[0m num_node_features: 53
[36m(Trainer pid=129876, ip=192.168.59.37)[0m num_graph_labels: 2
[36m(Trainer pid=129876, ip=192.168.59.37)[0m train_size: 64
[36m(Trainer pid=129980, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 4x across cluster][0m
[36m(Trainer pid=129980, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))[32m [repeated 4x across cluster][0m
[36m(Trainer pid=129980, ip=192.168.59.37)[0m inx: 4[32m [repeated 4x across cluster][0m
[36m(Trainer pid=129980, ip=192.168.59.37)[0m dataset_trainer_name: 4-DHFR[32m [repeated 4x across cluster][0m
[36m(Trainer pid=129980, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f14002c8cd0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1401ac9090>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1400717a10>}[32m [repeated 4x across cluster][0m
[36m(Trainer pid=129980, ip=192.168.59.37)[0m num_node_features: 53[32m [repeated 4x across cluster][0m
[36m(Trainer pid=129980, ip=192.168.59.37)[0m num_graph_labels: 2[32m [repeated 4x across cluster][0m
[36m(Trainer pid=129980, ip=192.168.59.37)[0m train_size: 57[32m [repeated 4x across cluster][0m
//Log init_time: 13414.472 ms //end
//Log Large1 init network: 1624328.0 //end
//Log Large2 init network: 1392621.0 //end
//Log Large3 init network: 3120975.0 //end
//Log Large4 init network: 1483250.0 //end
//Log Server init network: 5619248764.0 //end
//Log Initialization Communication Cost (MB): 5366.20 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 9.657 ms//end
[36m(Trainer pid=130077, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 4x across cluster][0m
[36m(Trainer pid=130077, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))[32m [repeated 4x across cluster][0m
[36m(Trainer pid=130077, ip=192.168.59.37)[0m inx: 8[32m [repeated 4x across cluster][0m
[36m(Trainer pid=130077, ip=192.168.59.37)[0m dataset_trainer_name: 8-DHFR[32m [repeated 4x across cluster][0m
[36m(Trainer pid=130077, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd9b2bbf510>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd9b2a55d90>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd9b2a7d950>}[32m [repeated 4x across cluster][0m
[36m(Trainer pid=130077, ip=192.168.59.37)[0m num_node_features: 53[32m [repeated 4x across cluster][0m
[36m(Trainer pid=130077, ip=192.168.59.37)[0m num_graph_labels: 2[32m [repeated 4x across cluster][0m
[36m(Trainer pid=130077, ip=192.168.59.37)[0m train_size: 61[32m [repeated 4x across cluster][0m
//Log Max memory for Large1: 7152082944.0 //end
//Log Max memory for Large2: 8080711680.0 //end
//Log Max memory for Large3: 9901117440.0 //end
//Log Max memory for Large4: 8541888512.0 //end
//Log Max memory for Server: 18361753600.0 //end
//Log Large1 network: 531273.0 //end
//Log Large2 network: 1167071.0 //end
//Log Large3 network: 3243428.0 //end
//Log Large4 network: 1327386.0 //end
//Log Server network: 643749803.0 //end
//Log Total Actual Pretrain Comm Cost: 619.91 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 43812.547 ms//end
//Log Max memory for Large1: 7119618048.0 //end
//Log Max memory for Large2: 8051744768.0 //end
//Log Max memory for Large3: 9878503424.0 //end
//Log Max memory for Large4: 8521072640.0 //end
//Log Max memory for Server: 18307153920.0 //end
//Log Large1 network: 179669826.0 //end
//Log Large2 network: 269664276.0 //end
//Log Large3 network: 186258567.0 //end
//Log Large4 network: 268948551.0 //end
//Log Server network: 26649654.0 //end
//Log Total Actual Train Comm Cost: 888.05 MB //end
Train end time recorded and duration set to gauge.
        test_acc
0-DHFR  0.750000
1-DHFR  0.750000
2-DHFR  0.750000
3-DHFR  0.714286
4-DHFR  0.714286
5-DHFR  0.625000
6-DHFR  0.750000
7-DHFR  0.750000
8-DHFR  0.625000
9-DHFR  0.555556
Average test accuracy: 0.7004199350289201
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
[36m(Trainer pid=130257, ip=192.168.36.49)[0m inx: 9
[36m(Trainer pid=130257, ip=192.168.36.49)[0m dataset_trainer_name: 9-DHFR
[36m(Trainer pid=130257, ip=192.168.36.49)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3d559d9750>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3d55ae91d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3d55b04610>}
[36m(Trainer pid=130257, ip=192.168.36.49)[0m num_node_features: 53
[36m(Trainer pid=130257, ip=192.168.36.49)[0m num_graph_labels: 2
[36m(Trainer pid=130257, ip=192.168.36.49)[0m train_size: 57
[36m(Trainer pid=130257, ip=192.168.36.49)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=130257, ip=192.168.36.49)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+dWs, Dataset: DHFR, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  DHFR  Total number of graphs:  756
Initialization start: network data collected.
using CPU
2025-07-10 22:19:46,496	INFO worker.py:1429 -- Using address 192.168.11.48:6379 set in the environment variable RAY_ADDRESS
2025-07-10 22:19:46,497	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.11.48:6379...
2025-07-10 22:19:46,503	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.11.48:8265 [39m[22m
[36m(Trainer pid=135261, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=135261, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=135261, ip=192.168.4.175)[0m inx: 0
[36m(Trainer pid=135261, ip=192.168.4.175)[0m dataset_trainer_name: 0-DHFR
[36m(Trainer pid=135261, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f64e84e5c50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f64e84ddd10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f64e850af90>}
[36m(Trainer pid=135261, ip=192.168.4.175)[0m num_node_features: 53
[36m(Trainer pid=135261, ip=192.168.4.175)[0m num_graph_labels: 2
[36m(Trainer pid=135261, ip=192.168.4.175)[0m train_size: 64
[36m(Trainer pid=135356, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 4x across cluster][0m
[36m(Trainer pid=135356, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 4x across cluster][0m
[36m(Trainer pid=135356, ip=192.168.4.175)[0m inx: 4[32m [repeated 4x across cluster][0m
[36m(Trainer pid=135356, ip=192.168.4.175)[0m dataset_trainer_name: 4-DHFR[32m [repeated 4x across cluster][0m
[36m(Trainer pid=135356, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5220639050>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5220a97250>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5220a9c6d0>}[32m [repeated 4x across cluster][0m
[36m(Trainer pid=135356, ip=192.168.4.175)[0m num_node_features: 53[32m [repeated 4x across cluster][0m
[36m(Trainer pid=135356, ip=192.168.4.175)[0m num_graph_labels: 2[32m [repeated 4x across cluster][0m
[36m(Trainer pid=135356, ip=192.168.4.175)[0m train_size: 57[32m [repeated 4x across cluster][0m
//Log init_time: 13806.468 ms //end
//Log Large1 init network: 1136468.0 //end
//Log Large2 init network: 1167489.0 //end
//Log Large3 init network: 4099733.0 //end
//Log Large4 init network: 1461591.0 //end
//Log Server init network: 4366053434.0 //end
//Log Initialization Communication Cost (MB): 4171.29 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 8.91 ms//end
[36m(Trainer pid=135454, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 4x across cluster][0m
[36m(Trainer pid=135454, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 4x across cluster][0m
[36m(Trainer pid=135454, ip=192.168.4.175)[0m inx: 8[32m [repeated 4x across cluster][0m
[36m(Trainer pid=135454, ip=192.168.4.175)[0m dataset_trainer_name: 8-DHFR[32m [repeated 4x across cluster][0m
[36m(Trainer pid=135454, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd6f97bf2d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc615a88e50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc6158b9450>}[32m [repeated 4x across cluster][0m
[36m(Trainer pid=135454, ip=192.168.4.175)[0m num_node_features: 53[32m [repeated 4x across cluster][0m
[36m(Trainer pid=135454, ip=192.168.4.175)[0m num_graph_labels: 2[32m [repeated 4x across cluster][0m
[36m(Trainer pid=135454, ip=192.168.4.175)[0m train_size: 61[32m [repeated 4x across cluster][0m
//Log Max memory for Large1: 8077434880.0 //end
//Log Max memory for Large2: 7152623616.0 //end
//Log Max memory for Large3: 10991075328.0 //end
//Log Max memory for Large4: 7480836096.0 //end
//Log Max memory for Server: 18329894912.0 //end
//Log Large1 network: 1112836.0 //end
//Log Large2 network: 833629.0 //end
//Log Large3 network: 3030056.0 //end
//Log Large4 network: 532899.0 //end
//Log Server network: 1898399313.0 //end
//Log Total Actual Pretrain Comm Cost: 1815.71 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 44945.579000000005 ms//end
//Log Max memory for Large1: 8056111104.0 //end
//Log Max memory for Large2: 7142817792.0 //end
//Log Max memory for Large3: 10955370496.0 //end
//Log Max memory for Large4: 7470698496.0 //end
//Log Max memory for Server: 18331910144.0 //end
//Log Large1 network: 269799285.0 //end
//Log Large2 network: 179650908.0 //end
//Log Large3 network: 275726842.0 //end
//Log Large4 network: 179678956.0 //end
//Log Server network: 26778870.0 //end
//Log Total Actual Train Comm Cost: 888.48 MB //end
Train end time recorded and duration set to gauge.
        test_acc
0-DHFR  0.750000
1-DHFR  0.750000
2-DHFR  0.750000
3-DHFR  0.714286
4-DHFR  0.714286
5-DHFR  0.750000
6-DHFR  0.750000
7-DHFR  0.625000
8-DHFR  0.750000
9-DHFR  0.500000
Average test accuracy: 0.7059662467316378
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
[36m(Trainer pid=131312, ip=192.168.27.11)[0m inx: 9
[36m(Trainer pid=131312, ip=192.168.27.11)[0m dataset_trainer_name: 9-DHFR
[36m(Trainer pid=131312, ip=192.168.27.11)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fb034ecefd0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fb034c25210>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fb034c0edd0>}
[36m(Trainer pid=131312, ip=192.168.27.11)[0m num_node_features: 53
[36m(Trainer pid=131312, ip=192.168.27.11)[0m num_graph_labels: 2
[36m(Trainer pid=131312, ip=192.168.27.11)[0m train_size: 57
[36m(Trainer pid=131312, ip=192.168.27.11)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=131312, ip=192.168.27.11)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: FedAvg, Dataset: AIDS, Trainers: 10
--------------------------------------------------------------------------------

Downloading https://www.chrsmrrs.com/graphkerneldatasets/AIDS.zip
Processing...
Done!
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  AIDS  Total number of graphs:  2000
Initialization start: network data collected.
using CPU
2025-07-10 22:21:52,996	INFO worker.py:1429 -- Using address 192.168.11.48:6379 set in the environment variable RAY_ADDRESS
2025-07-10 22:21:52,997	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.11.48:6379...
2025-07-10 22:21:53,003	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.11.48:8265 [39m[22m
[36m(Trainer pid=131337, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=131337, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=131337, ip=192.168.59.37)[0m inx: 0
[36m(Trainer pid=131337, ip=192.168.59.37)[0m dataset_trainer_name: 0-AIDS
[36m(Trainer pid=131337, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5b1828d610>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5af40c01d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5af40c2a10>}
[36m(Trainer pid=131337, ip=192.168.59.37)[0m num_node_features: 38
[36m(Trainer pid=131337, ip=192.168.59.37)[0m num_graph_labels: 2
[36m(Trainer pid=131337, ip=192.168.59.37)[0m train_size: 177
[36m(Trainer pid=136068, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=136068, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=136068, ip=192.168.4.175)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=136068, ip=192.168.4.175)[0m dataset_trainer_name: 2-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=136068, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fba23b0a850>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fba0c131310>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fba0c13fc50>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=136068, ip=192.168.4.175)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=136068, ip=192.168.4.175)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=136068, ip=192.168.4.175)[0m train_size: 168[32m [repeated 2x across cluster][0m
[36m(Trainer pid=131456, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=131456, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=131456, ip=192.168.59.37)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=131456, ip=192.168.59.37)[0m dataset_trainer_name: 4-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=131456, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fb8be6ec810>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fb8be7bd710>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fb8803abc90>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=131456, ip=192.168.59.37)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=131456, ip=192.168.59.37)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=131456, ip=192.168.59.37)[0m train_size: 168[32m [repeated 2x across cluster][0m
[36m(Trainer pid=136187, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=136187, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=136187, ip=192.168.4.175)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=136187, ip=192.168.4.175)[0m dataset_trainer_name: 6-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=136187, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7ef820c47590>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7ef7f82e2010>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7ef7f82f8bd0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=136187, ip=192.168.4.175)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=136187, ip=192.168.4.175)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=136187, ip=192.168.4.175)[0m train_size: 157[32m [repeated 2x across cluster][0m
//Log init_time: 30614.308999999997 ms //end
//Log Large1 init network: 3164513.0 //end
//Log Large2 init network: 2785770.0 //end
//Log Large3 init network: 6838854.0 //end
//Log Large4 init network: 4363063.0 //end
//Log Server init network: 11375834636.0 //end
//Log Initialization Communication Cost (MB): 10865.20 //end

Done setting up devices.
Running FedAvg ...
Pretrain start time recorded.
//pretrain_time: 10.814 ms//end
[36m(Trainer pid=131583, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=131583, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=131583, ip=192.168.59.37)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=131583, ip=192.168.59.37)[0m dataset_trainer_name: 8-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=131583, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe2c96e1a50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe2c9584d10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe2c9592d90>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=131583, ip=192.168.59.37)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=131583, ip=192.168.59.37)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=131583, ip=192.168.59.37)[0m train_size: 155[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 9123721216.0 //end
//Log Max memory for Large2: 11327729664.0 //end
//Log Max memory for Large3: 12074610688.0 //end
//Log Max memory for Large4: 12014137344.0 //end
//Log Max memory for Server: 18474430464.0 //end
//Log Large1 network: 538847.0 //end
//Log Large2 network: 1794444.0 //end
//Log Large3 network: 3254714.0 //end
//Log Large4 network: 1442345.0 //end
//Log Server network: 2854408337.0 //end
//Log Total Actual Pretrain Comm Cost: 2728.88 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 19037.722999999998 ms//end
//Log Max memory for Large1: 9105682432.0 //end
//Log Max memory for Large2: 11296776192.0 //end
//Log Max memory for Large3: 12043530240.0 //end
//Log Max memory for Large4: 12002709504.0 //end
//Log Max memory for Server: 18399064064.0 //end
//Log Large1 network: 54520466.0 //end
//Log Large2 network: 81074776.0 //end
//Log Large3 network: 58617157.0 //end
//Log Large4 network: 81147906.0 //end
//Log Server network: 133886695.0 //end
//Log Total Actual Train Comm Cost: 390.29 MB //end
Train end time recorded and duration set to gauge.
        test_acc
3-AIDS  0.944444
5-AIDS  1.000000
6-AIDS  1.000000
7-AIDS  1.000000
8-AIDS  1.000000
1-AIDS  1.000000
0-AIDS  1.000000
2-AIDS  1.000000
9-AIDS  0.952381
4-AIDS  0.952381
Average test accuracy: 0.9842910848549946
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=131762, ip=192.168.36.49)[0m inx: 9
[36m(Trainer pid=131762, ip=192.168.36.49)[0m dataset_trainer_name: 9-AIDS
[36m(Trainer pid=131762, ip=192.168.36.49)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f80bf4ba3d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f80bc913a50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f80bc92f910>}
[36m(Trainer pid=131762, ip=192.168.36.49)[0m num_node_features: 38
[36m(Trainer pid=131762, ip=192.168.36.49)[0m num_graph_labels: 2
[36m(Trainer pid=131762, ip=192.168.36.49)[0m train_size: 165
[36m(Trainer pid=131762, ip=192.168.36.49)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=131762, ip=192.168.36.49)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL, Dataset: AIDS, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  AIDS  Total number of graphs:  2000
Initialization start: network data collected.
using CPU
2025-07-10 22:23:48,404	INFO worker.py:1429 -- Using address 192.168.11.48:6379 set in the environment variable RAY_ADDRESS
2025-07-10 22:23:48,404	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.11.48:6379...
2025-07-10 22:23:48,410	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.11.48:8265 [39m[22m
[36m(Trainer pid=136684, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=136684, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=136684, ip=192.168.4.175)[0m inx: 0
[36m(Trainer pid=136684, ip=192.168.4.175)[0m dataset_trainer_name: 0-AIDS
[36m(Trainer pid=136684, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f7d33ccc590>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f7d33677f10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f7d33682fd0>}
[36m(Trainer pid=136684, ip=192.168.4.175)[0m num_node_features: 38
[36m(Trainer pid=136684, ip=192.168.4.175)[0m num_graph_labels: 2
[36m(Trainer pid=136684, ip=192.168.4.175)[0m train_size: 177
[36m(Trainer pid=132074, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=132074, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=132074, ip=192.168.59.37)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=132074, ip=192.168.59.37)[0m dataset_trainer_name: 2-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=132074, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7faa642c6490>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7faa64168d90>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7faa6416bd50>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=132074, ip=192.168.59.37)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=132074, ip=192.168.59.37)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=132074, ip=192.168.59.37)[0m train_size: 168[32m [repeated 2x across cluster][0m
[36m(Trainer pid=136804, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=136804, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=136804, ip=192.168.4.175)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=136804, ip=192.168.4.175)[0m dataset_trainer_name: 4-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=136804, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f7acf4a52d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f7ab03720d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f7ab037ff10>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=136804, ip=192.168.4.175)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=136804, ip=192.168.4.175)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=136804, ip=192.168.4.175)[0m train_size: 168[32m [repeated 2x across cluster][0m
[36m(Trainer pid=132199, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=132199, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=132199, ip=192.168.59.37)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=132199, ip=192.168.59.37)[0m dataset_trainer_name: 6-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=132199, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc72e779090>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc72c305850>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc72c31cad0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=132199, ip=192.168.59.37)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=132199, ip=192.168.59.37)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=132199, ip=192.168.59.37)[0m train_size: 157[32m [repeated 2x across cluster][0m
//Log init_time: 30842.378 ms //end
//Log Large1 init network: 3040350.0 //end
//Log Large2 init network: 2968474.0 //end
//Log Large3 init network: 8418351.0 //end
//Log Large4 init network: 3514538.0 //end
//Log Server init network: 12755502664.0 //end
//Log Initialization Communication Cost (MB): 12181.71 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 6.859 ms//end
[36m(Trainer pid=136939, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=136939, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=136939, ip=192.168.4.175)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=136939, ip=192.168.4.175)[0m dataset_trainer_name: 8-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=136939, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f033080b390>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7ef29045fe10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7ef290482450>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=136939, ip=192.168.4.175)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=136939, ip=192.168.4.175)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=136939, ip=192.168.4.175)[0m train_size: 155[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 11314569216.0 //end
//Log Max memory for Large2: 9130680320.0 //end
//Log Max memory for Large3: 14432235520.0 //end
//Log Max memory for Large4: 9642725376.0 //end
//Log Max memory for Server: 18460450816.0 //end
//Log Large1 network: 1803025.0 //end
//Log Large2 network: 514317.0 //end
//Log Large3 network: 3306017.0 //end
//Log Large4 network: 525026.0 //end
//Log Server network: 1473886841.0 //end
//Log Total Actual Pretrain Comm Cost: 1411.47 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 43572.676999999996 ms//end
//Log Max memory for Large1: 11270459392.0 //end
//Log Max memory for Large2: 9100632064.0 //end
//Log Max memory for Large3: 14411030528.0 //end
//Log Max memory for Large4: 9619070976.0 //end
//Log Max memory for Server: 18388090880.0 //end
//Log Large1 network: 267275691.0 //end
//Log Large2 network: 178741730.0 //end
//Log Large3 network: 274630564.0 //end
//Log Large4 network: 179028232.0 //end
//Log Server network: 26696786.0 //end
//Log Total Actual Train Comm Cost: 883.46 MB //end
Train end time recorded and duration set to gauge.
        test_acc
0-AIDS  0.947368
1-AIDS  0.954545
2-AIDS  0.947368
3-AIDS  0.952381
4-AIDS  0.954545
5-AIDS  0.952381
6-AIDS  0.952381
7-AIDS  0.956522
8-AIDS  1.000000
9-AIDS  0.956522
Average test accuracy: 0.9572055733705568
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
[36m(Trainer pid=132798, ip=192.168.27.11)[0m inx: 9
[36m(Trainer pid=132798, ip=192.168.27.11)[0m dataset_trainer_name: 9-AIDS
[36m(Trainer pid=132798, ip=192.168.27.11)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7eec4b7cf350>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7eec4b687390>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7eec1412e910>}
[36m(Trainer pid=132798, ip=192.168.27.11)[0m num_node_features: 38
[36m(Trainer pid=132798, ip=192.168.27.11)[0m num_graph_labels: 2
[36m(Trainer pid=132798, ip=192.168.27.11)[0m train_size: 165
[36m(Trainer pid=132798, ip=192.168.27.11)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=132798, ip=192.168.27.11)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+, Dataset: AIDS, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  AIDS  Total number of graphs:  2000
Initialization start: network data collected.
using CPU
2025-07-10 22:26:08,553	INFO worker.py:1429 -- Using address 192.168.11.48:6379 set in the environment variable RAY_ADDRESS
2025-07-10 22:26:08,553	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.11.48:6379...
2025-07-10 22:26:08,560	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.11.48:8265 [39m[22m
[36m(Trainer pid=132796, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=132796, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=132796, ip=192.168.59.37)[0m inx: 0
[36m(Trainer pid=132796, ip=192.168.59.37)[0m dataset_trainer_name: 0-AIDS
[36m(Trainer pid=132796, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd6ec74c190>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd6ec1130d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd6ec11fe90>}
[36m(Trainer pid=132796, ip=192.168.59.37)[0m num_node_features: 38
[36m(Trainer pid=132796, ip=192.168.59.37)[0m num_graph_labels: 2
[36m(Trainer pid=132796, ip=192.168.59.37)[0m train_size: 177
[36m(Trainer pid=137534, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=137534, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=137534, ip=192.168.4.175)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=137534, ip=192.168.4.175)[0m dataset_trainer_name: 2-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=137534, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2b652c78d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2b640595d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2b64066810>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=137534, ip=192.168.4.175)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=137534, ip=192.168.4.175)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=137534, ip=192.168.4.175)[0m train_size: 168[32m [repeated 2x across cluster][0m
[36m(Trainer pid=132915, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=132915, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=132915, ip=192.168.59.37)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=132915, ip=192.168.59.37)[0m dataset_trainer_name: 4-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=132915, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f92983e99d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f928645a750>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9286462890>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=132915, ip=192.168.59.37)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=132915, ip=192.168.59.37)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=132915, ip=192.168.59.37)[0m train_size: 168[32m [repeated 2x across cluster][0m
[36m(Trainer pid=137653, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=137653, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=137653, ip=192.168.4.175)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=137653, ip=192.168.4.175)[0m dataset_trainer_name: 6-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=137653, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f82b920de50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f82b90d9cd0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f82b90f03d0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=137653, ip=192.168.4.175)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=137653, ip=192.168.4.175)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=137653, ip=192.168.4.175)[0m train_size: 157[32m [repeated 2x across cluster][0m
//Log init_time: 30673.857 ms //end
//Log Large1 init network: 3083212.0 //end
//Log Large2 init network: 2923278.0 //end
//Log Large3 init network: 6371506.0 //end
//Log Large4 init network: 5091728.0 //end
//Log Server init network: 12756638581.0 //end
//Log Initialization Communication Cost (MB): 12182.34 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 6.5120000000000005 ms//end
[36m(Trainer pid=133042, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=133042, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=133042, ip=192.168.59.37)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=133042, ip=192.168.59.37)[0m dataset_trainer_name: 8-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=133042, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe54e434650>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe54e27e050>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe54e29c410>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=133042, ip=192.168.59.37)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=133042, ip=192.168.59.37)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=133042, ip=192.168.59.37)[0m train_size: 155[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 9116524544.0 //end
//Log Max memory for Large2: 11315945472.0 //end
//Log Max memory for Large3: 12062789632.0 //end
//Log Max memory for Large4: 12014563328.0 //end
//Log Max memory for Server: 18505134080.0 //end
//Log Large1 network: 586604.0 //end
//Log Large2 network: 1846422.0 //end
//Log Large3 network: 3245293.0 //end
//Log Large4 network: 597501.0 //end
//Log Server network: 1473934663.0 //end
//Log Total Actual Pretrain Comm Cost: 1411.64 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 45118.661 ms//end
//Log Max memory for Large1: 9099833344.0 //end
//Log Max memory for Large2: 11274792960.0 //end
//Log Max memory for Large3: 12033622016.0 //end
//Log Max memory for Large4: 11986186240.0 //end
//Log Max memory for Server: 18407612416.0 //end
//Log Large1 network: 178797331.0 //end
//Log Large2 network: 267502490.0 //end
//Log Large3 network: 185803565.0 //end
//Log Large4 network: 268069383.0 //end
//Log Server network: 26728411.0 //end
//Log Total Actual Train Comm Cost: 883.96 MB //end
Train end time recorded and duration set to gauge.
        test_acc
0-AIDS  0.947368
1-AIDS  0.956522
2-AIDS  1.000000
3-AIDS  1.000000
4-AIDS  1.000000
5-AIDS  0.952381
6-AIDS  0.954545
7-AIDS  1.000000
8-AIDS  0.954545
9-AIDS  0.954545
Average test accuracy: 0.9720434049699721
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
[36m(Trainer pid=133224, ip=192.168.36.49)[0m inx: 9
[36m(Trainer pid=133224, ip=192.168.36.49)[0m dataset_trainer_name: 9-AIDS
[36m(Trainer pid=133224, ip=192.168.36.49)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd168889e50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd1531ffd90>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd153217150>}
[36m(Trainer pid=133224, ip=192.168.36.49)[0m num_node_features: 38
[36m(Trainer pid=133224, ip=192.168.36.49)[0m num_graph_labels: 2
[36m(Trainer pid=133224, ip=192.168.36.49)[0m train_size: 165
[36m(Trainer pid=133224, ip=192.168.36.49)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=133224, ip=192.168.36.49)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+dWs, Dataset: AIDS, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  AIDS  Total number of graphs:  2000
Initialization start: network data collected.
using CPU
2025-07-10 22:28:30,038	INFO worker.py:1429 -- Using address 192.168.11.48:6379 set in the environment variable RAY_ADDRESS
2025-07-10 22:28:30,039	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.11.48:6379...
2025-07-10 22:28:30,044	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.11.48:8265 [39m[22m
[36m(Trainer pid=138259, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=138259, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=138259, ip=192.168.4.175)[0m inx: 0
[36m(Trainer pid=138259, ip=192.168.4.175)[0m dataset_trainer_name: 0-AIDS
[36m(Trainer pid=138259, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1436684850>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f142008f990>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f142009af50>}
[36m(Trainer pid=138259, ip=192.168.4.175)[0m num_node_features: 38
[36m(Trainer pid=138259, ip=192.168.4.175)[0m num_graph_labels: 2
[36m(Trainer pid=138259, ip=192.168.4.175)[0m train_size: 177
[36m(Trainer pid=133642, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=133642, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=133642, ip=192.168.59.37)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=133642, ip=192.168.59.37)[0m dataset_trainer_name: 2-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=133642, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f38705c2490>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f38302ee610>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f38302f6790>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=133642, ip=192.168.59.37)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=133642, ip=192.168.59.37)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=133642, ip=192.168.59.37)[0m train_size: 168[32m [repeated 2x across cluster][0m
[36m(Trainer pid=138386, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=138386, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=138386, ip=192.168.4.175)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=138386, ip=192.168.4.175)[0m dataset_trainer_name: 4-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=138386, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd3617eb650>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd361590cd0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd361593e50>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=138386, ip=192.168.4.175)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=138386, ip=192.168.4.175)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=138386, ip=192.168.4.175)[0m train_size: 168[32m [repeated 2x across cluster][0m
[36m(Trainer pid=133777, ip=192.168.59.37)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=133777, ip=192.168.59.37)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=133777, ip=192.168.59.37)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=133777, ip=192.168.59.37)[0m dataset_trainer_name: 6-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=133777, ip=192.168.59.37)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4303ada1d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f430398db90>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f43039a8510>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=133777, ip=192.168.59.37)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=133777, ip=192.168.59.37)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=133777, ip=192.168.59.37)[0m train_size: 157[32m [repeated 2x across cluster][0m
//Log init_time: 31429.022 ms //end
//Log Large1 init network: 2857152.0 //end
//Log Large2 init network: 3020273.0 //end
//Log Large3 init network: 8713324.0 //end
//Log Large4 init network: 3372113.0 //end
//Log Server init network: 11746223599.0 //end
//Log Initialization Communication Cost (MB): 11219.20 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 8.007 ms//end
[36m(Trainer pid=138514, ip=192.168.4.175)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=138514, ip=192.168.4.175)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=138514, ip=192.168.4.175)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=138514, ip=192.168.4.175)[0m dataset_trainer_name: 8-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=138514, ip=192.168.4.175)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f86b4f8df90>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f86b4e308d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f86b4e3ef90>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=138514, ip=192.168.4.175)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=138514, ip=192.168.4.175)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=138514, ip=192.168.4.175)[0m train_size: 155[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 11325534208.0 //end
//Log Max memory for Large2: 9134325760.0 //end
//Log Max memory for Large3: 14435127296.0 //end
//Log Max memory for Large4: 9643393024.0 //end
//Log Max memory for Server: 18513186816.0 //end
//Log Large1 network: 1842585.0 //end
//Log Large2 network: 533217.0 //end
//Log Large3 network: 3320401.0 //end
//Log Large4 network: 541017.0 //end
//Log Server network: 2482573797.0 //end
//Log Total Actual Pretrain Comm Cost: 2373.52 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 45218.741 ms//end
//Log Max memory for Large1: 11283447808.0 //end
//Log Max memory for Large2: 9103867904.0 //end
//Log Max memory for Large3: 14403493888.0 //end
//Log Max memory for Large4: 9613651968.0 //end
//Log Max memory for Server: 18429722624.0 //end
//Log Large1 network: 267491345.0 //end
//Log Large2 network: 178847167.0 //end
//Log Large3 network: 275131247.0 //end
//Log Large4 network: 178798873.0 //end
//Log Server network: 26932585.0 //end
//Log Total Actual Train Comm Cost: 884.25 MB //end
Train end time recorded and duration set to gauge.
        test_acc
0-AIDS  0.954545
1-AIDS  1.000000
2-AIDS  1.000000
3-AIDS  1.000000
4-AIDS  0.952381
5-AIDS  0.952381
6-AIDS  0.904762
7-AIDS  0.956522
8-AIDS  0.857143
9-AIDS  0.956522
Average test accuracy: 0.953265728314764
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
[36m(Trainer pid=134377, ip=192.168.27.11)[0m inx: 9
[36m(Trainer pid=134377, ip=192.168.27.11)[0m dataset_trainer_name: 9-AIDS
[36m(Trainer pid=134377, ip=192.168.27.11)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fbdc48ec850>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fbdc447f250>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fbdc4496b10>}
[36m(Trainer pid=134377, ip=192.168.27.11)[0m num_node_features: 38
[36m(Trainer pid=134377, ip=192.168.27.11)[0m num_graph_labels: 2
[36m(Trainer pid=134377, ip=192.168.27.11)[0m train_size: 165
[36m(Trainer pid=134377, ip=192.168.27.11)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=134377, ip=192.168.27.11)[0m   return torch.load(io.BytesIO(b))
Benchmark completed.
Traceback (most recent call last):
  File "/Users/yuyang/miniconda3/envs/fedgraph-env-py310/bin/ray", line 8, in <module>
    sys.exit(main())
  File "/Users/yuyang/miniconda3/envs/fedgraph-env-py310/lib/python3.10/site-packages/ray/scripts/scripts.py", line 2691, in main
    return cli()
  File "/Users/yuyang/miniconda3/envs/fedgraph-env-py310/lib/python3.10/site-packages/click/core.py", line 1161, in __call__
    return self.main(*args, **kwargs)
  File "/Users/yuyang/miniconda3/envs/fedgraph-env-py310/lib/python3.10/site-packages/click/core.py", line 1082, in main
    rv = self.invoke(ctx)
  File "/Users/yuyang/miniconda3/envs/fedgraph-env-py310/lib/python3.10/site-packages/click/core.py", line 1697, in invoke
    return _process_result(sub_ctx.command.invoke(sub_ctx))
  File "/Users/yuyang/miniconda3/envs/fedgraph-env-py310/lib/python3.10/site-packages/click/core.py", line 1697, in invoke
    return _process_result(sub_ctx.command.invoke(sub_ctx))
  File "/Users/yuyang/miniconda3/envs/fedgraph-env-py310/lib/python3.10/site-packages/click/core.py", line 1443, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File "/Users/yuyang/miniconda3/envs/fedgraph-env-py310/lib/python3.10/site-packages/click/core.py", line 788, in invoke
    return __callback(*args, **kwargs)
  File "/Users/yuyang/miniconda3/envs/fedgraph-env-py310/lib/python3.10/site-packages/ray/dashboard/modules/job/cli_utils.py", line 54, in wrapper
    return func(*args, **kwargs)
  File "/Users/yuyang/miniconda3/envs/fedgraph-env-py310/lib/python3.10/site-packages/ray/autoscaler/_private/cli_logger.py", line 823, in wrapper
    return f(*args, **kwargs)
  File "/Users/yuyang/miniconda3/envs/fedgraph-env-py310/lib/python3.10/site-packages/ray/dashboard/modules/job/cli.py", line 310, in submit
    job_status = get_or_create_event_loop().run_until_complete(
  File "/Users/yuyang/miniconda3/envs/fedgraph-env-py310/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/Users/yuyang/miniconda3/envs/fedgraph-env-py310/lib/python3.10/site-packages/ray/dashboard/modules/job/cli.py", line 99, in _tail_logs
    return _log_job_status(client, job_id)
  File "/Users/yuyang/miniconda3/envs/fedgraph-env-py310/lib/python3.10/site-packages/ray/dashboard/modules/job/cli.py", line 78, in _log_job_status
    info = client.get_job_info(job_id)
  File "/Users/yuyang/miniconda3/envs/fedgraph-env-py310/lib/python3.10/site-packages/ray/dashboard/modules/job/sdk.py", line 355, in get_job_info
    return JobDetails(**r.json())
TypeError: 'NoneType' object is not callable
