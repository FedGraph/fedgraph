2025-05-14 16:52:19,720	INFO dashboard_sdk.py:338 -- Uploading package gcs://_ray_pkg_f82b624e2786f519.zip.
2025-05-14 16:52:19,722	INFO packaging.py:575 -- Creating a file package for local module '.'.
Job submission server address: http://localhost:8265

-------------------------------------------------------
Job 'raysubmit_9vmKa6xnSDzygfsE' submitted successfully
-------------------------------------------------------

Next steps
  Query the logs of the job:
    ray job logs raysubmit_9vmKa6xnSDzygfsE
  Query the status of the job:
    ray job status raysubmit_9vmKa6xnSDzygfsE
  Request the job to be stopped:
    ray job stop raysubmit_9vmKa6xnSDzygfsE

Tailing logs until the job exits (disable with --no-wait):
INFO:matplotlib.font_manager:generated new fontManager
using CPU

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: SelfTrain, Dataset: IMDB-BINARY, Trainers: 10
--------------------------------------------------------------------------------

Downloading https://www.chrsmrrs.com/graphkerneldatasets/IMDB-BINARY.zip
Processing...
Done!
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  IMDB-BINARY  Total number of graphs:  1000
Initialization start: network data collected.
using CPU
2025-05-14 20:52:43,303	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 20:52:43,304	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 20:52:43,313	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
[36m(pid=2021, ip=192.168.14.54)[0m INFO:matplotlib.font_manager:generated new fontManager
[36m(Trainer pid=2021, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=2021, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=2021, ip=192.168.14.54)[0m inx: 0
[36m(Trainer pid=2021, ip=192.168.14.54)[0m dataset_trainer_name: 0-IMDB-BINARY
[36m(Trainer pid=2021, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f38483ec2d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f384862bc90>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f384860b8d0>}
[36m(Trainer pid=2021, ip=192.168.14.54)[0m num_node_features: 136
[36m(Trainer pid=2021, ip=192.168.14.54)[0m num_graph_labels: 2
[36m(Trainer pid=2021, ip=192.168.14.54)[0m train_size: 89
[36m(pid=2076, ip=192.168.42.57)[0m INFO:matplotlib.font_manager:generated new fontManager[32m [repeated 2x across cluster] (Ray deduplicates logs by default. Set RAY_DEDUP_LOGS=0 to disable log deduplication, or see https://docs.ray.io/en/master/ray-observability/user-guides/configure-logging.html#log-deduplication for more options.)[0m
[36m(Trainer pid=2056, ip=192.168.39.156)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=2056, ip=192.168.39.156)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=2076, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=2076, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=2076, ip=192.168.42.57)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2076, ip=192.168.42.57)[0m dataset_trainer_name: 2-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2076, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f097e7a1510>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f09401ad310>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f09401af090>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2076, ip=192.168.42.57)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2076, ip=192.168.42.57)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2076, ip=192.168.42.57)[0m train_size: 85[32m [repeated 2x across cluster][0m
[36m(pid=6190, ip=192.168.14.62)[0m INFO:matplotlib.font_manager:generated new fontManager
[36m(Trainer pid=2195, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2195, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2195, ip=192.168.14.54)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2195, ip=192.168.14.54)[0m dataset_trainer_name: 4-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2195, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7faf6ba49e10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7faf6bcf1690>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7faf6b79c6d0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2195, ip=192.168.14.54)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2195, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2195, ip=192.168.14.54)[0m train_size: 79[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2250, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2250, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2250, ip=192.168.42.57)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2250, ip=192.168.42.57)[0m dataset_trainer_name: 6-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2250, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd2934e4b50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd292f0a6d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd2934c7bd0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2250, ip=192.168.42.57)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2250, ip=192.168.42.57)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2250, ip=192.168.42.57)[0m train_size: 84[32m [repeated 2x across cluster][0m
//Log init_time: 34408.875 ms //end
//Log Large1 init network: 4289430.0 //end
//Log Large2 init network: 7635132.0 //end
//Log Large3 init network: 2509841.0 //end
//Log Large4 init network: 3820854.0 //end
//Log Server init network: 11146681210.0 //end
//Log Initialization Communication Cost (MB): 10647.71 //end

Done setting up devices.
Running SelfTrain ...
Pretrain start time recorded.
//pretrain_time: 8.146 ms//end
[36m(Trainer pid=2358, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2358, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2358, ip=192.168.14.54)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2358, ip=192.168.14.54)[0m dataset_trainer_name: 8-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2358, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe63fe04390>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe640453cd0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe63ff46190>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2358, ip=192.168.14.54)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2358, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2358, ip=192.168.14.54)[0m train_size: 75[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 10124750848.0 //end
//Log Max memory for Large2: 7694761984.0 //end
//Log Max memory for Large3: 9538490368.0 //end
//Log Max memory for Large4: 7123083264.0 //end
//Log Max memory for Server: 15594442752.0 //end
//Log Large1 network: 557781.0 //end
//Log Large2 network: 1657170.0 //end
//Log Large3 network: 1650325.0 //end
//Log Large4 network: 522205.0 //end
//Log Server network: 2748529957.0 //end
//Log Total Actual Pretrain Comm Cost: 2625.39 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
  > 7-IMDB-BINARY done.
trainingaccs: 0.4375, valaccs: 0.6, acc: 0.45454545454545453
  > 3-IMDB-BINARY done.
trainingaccs: 0.5128205128205128, valaccs: 0.5, acc: 0.5
  > 2-IMDB-BINARY done.
trainingaccs: 0.4235294117647059, valaccs: 0.45454545454545453, acc: 0.5454545454545454
  > 6-IMDB-BINARY done.
trainingaccs: 0.4880952380952381, valaccs: 0.5, acc: 0.5454545454545454
  > 9-IMDB-BINARY done.
trainingaccs: 0.4578313253012048, valaccs: 0.5, acc: 0.45454545454545453
  > 1-IMDB-BINARY done.
trainingaccs: 0.4583333333333333, valaccs: 0.6666666666666666, acc: 0.3
  > 5-IMDB-BINARY done.
trainingaccs: 0.6056338028169014, valaccs: 0.4444444444444444, acc: 0.7777777777777778
  > 0-IMDB-BINARY done.
trainingaccs: 0.43820224719101125, valaccs: 0.6363636363636364, acc: 0.5
  > 8-IMDB-BINARY done.
trainingaccs: 0.38666666666666666, valaccs: 0.2222222222222222, acc: 0.5
  > 4-IMDB-BINARY done.
trainingaccs: 0.45569620253164556, valaccs: 0.5, acc: 0.8
//train_time: 53.644 ms//end
//Log Max memory for Large1: 10191286272.0 //end
//Log Max memory for Large2: 7726854144.0 //end
//Log Max memory for Large3: 9601499136.0 //end
//Log Max memory for Large4: 7167758336.0 //end
//Log Max memory for Server: 15595458560.0 //end
//Log Large1 network: 551282.0 //end
//Log Large2 network: 1640025.0 //end
//Log Large3 network: 600630.0 //end
//Log Large4 network: 468462.0 //end
//Log Server network: 911921.0 //end
//Log Total Actual Train Comm Cost: 3.98 MB //end
Train end time recorded and duration set to gauge.
               test_acc
7-IMDB-BINARY  0.454545
3-IMDB-BINARY  0.500000
2-IMDB-BINARY  0.545455
6-IMDB-BINARY  0.545455
9-IMDB-BINARY  0.454545
1-IMDB-BINARY  0.300000
5-IMDB-BINARY  0.777778
0-IMDB-BINARY  0.500000
8-IMDB-BINARY  0.500000
4-IMDB-BINARY  0.800000
Average test accuracy: 0.5424699253844982
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 2.22 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 2.22 MB //end
[36m(Trainer pid=2393, ip=192.168.39.156)[0m inx: 9
[36m(Trainer pid=2393, ip=192.168.39.156)[0m dataset_trainer_name: 9-IMDB-BINARY
[36m(Trainer pid=2393, ip=192.168.39.156)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc7a847bcd0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc7a42a07d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc7a88dd290>}
[36m(Trainer pid=2393, ip=192.168.39.156)[0m num_node_features: 136
[36m(Trainer pid=2393, ip=192.168.39.156)[0m num_graph_labels: 2
[36m(Trainer pid=2393, ip=192.168.39.156)[0m train_size: 83
[36m(Trainer pid=2393, ip=192.168.39.156)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=2393, ip=192.168.39.156)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: FedAvg, Dataset: IMDB-BINARY, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  IMDB-BINARY  Total number of graphs:  1000
Initialization start: network data collected.
using CPU
2025-05-14 20:54:23,416	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 20:54:23,417	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 20:54:23,424	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
[36m(Trainer pid=2733, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=2733, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=2733, ip=192.168.42.57)[0m inx: 0
[36m(Trainer pid=2733, ip=192.168.42.57)[0m dataset_trainer_name: 0-IMDB-BINARY
[36m(Trainer pid=2733, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6e69b3c150>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6e69fa6290>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6e69f3ae10>}
[36m(Trainer pid=2733, ip=192.168.42.57)[0m num_node_features: 136
[36m(Trainer pid=2733, ip=192.168.42.57)[0m num_graph_labels: 2
[36m(Trainer pid=2733, ip=192.168.42.57)[0m train_size: 89
[36m(Trainer pid=2853, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2853, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2853, ip=192.168.14.54)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2853, ip=192.168.14.54)[0m dataset_trainer_name: 2-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2853, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1d940a1390>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1d8c799750>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1d8c65a950>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2853, ip=192.168.14.54)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2853, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2853, ip=192.168.14.54)[0m train_size: 85[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2886, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2886, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2886, ip=192.168.42.57)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2886, ip=192.168.42.57)[0m dataset_trainer_name: 4-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2886, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa1cc391bd0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa1cc2d6ed0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa1cc2d56d0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2886, ip=192.168.42.57)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2886, ip=192.168.42.57)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=2886, ip=192.168.42.57)[0m train_size: 79[32m [repeated 2x across cluster][0m
[36m(Trainer pid=3014, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=3014, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=3014, ip=192.168.14.54)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=3014, ip=192.168.14.54)[0m dataset_trainer_name: 6-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=3014, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6f13280050>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6f131ca710>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6f13703190>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=3014, ip=192.168.14.54)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=3014, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=3014, ip=192.168.14.54)[0m train_size: 84[32m [repeated 2x across cluster][0m
//Log init_time: 30453.9 ms //end
//Log Large1 init network: 2932614.0 //end
//Log Large2 init network: 5061325.0 //end
//Log Large3 init network: 2707457.0 //end
//Log Large4 init network: 4319204.0 //end
//Log Server init network: 11978083985.0 //end
//Log Initialization Communication Cost (MB): 11437.52 //end

Done setting up devices.
Running FedAvg ...
Pretrain start time recorded.
//pretrain_time: 7.9319999999999995 ms//end
[36m(Trainer pid=3047, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=3047, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=3047, ip=192.168.42.57)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=3047, ip=192.168.42.57)[0m dataset_trainer_name: 8-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=3047, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7eedd5261950>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7eedd5420e10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7eedd4f19d10>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=3047, ip=192.168.42.57)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=3047, ip=192.168.42.57)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=3047, ip=192.168.42.57)[0m train_size: 75[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 8420356096.0 //end
//Log Max memory for Large2: 9552637952.0 //end
//Log Max memory for Large3: 7937802240.0 //end
//Log Max memory for Large4: 10097901568.0 //end
//Log Max memory for Server: 15565271040.0 //end
//Log Large1 network: 545045.0 //end
//Log Large2 network: 2919285.0 //end
//Log Large3 network: 509119.0 //end
//Log Large4 network: 1398580.0 //end
//Log Server network: 1898415919.0 //end
//Log Total Actual Pretrain Comm Cost: 1815.59 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 215764.699 ms//end
//Log Max memory for Large1: 8484630528.0 //end
//Log Max memory for Large2: 9644793856.0 //end
//Log Max memory for Large3: 7988158464.0 //end
//Log Max memory for Large4: 10195890176.0 //end
//Log Max memory for Server: 15617646592.0 //end
//Log Large1 network: 58978990.0 //end
//Log Large2 network: 87571795.0 //end
//Log Large3 network: 58933971.0 //end
//Log Large4 network: 86736701.0 //end
//Log Server network: 140222733.0 //end
//Log Total Actual Train Comm Cost: 412.41 MB //end
Train end time recorded and duration set to gauge.
               test_acc
1-IMDB-BINARY  0.500000
5-IMDB-BINARY  0.777778
2-IMDB-BINARY  0.727273
0-IMDB-BINARY  0.666667
3-IMDB-BINARY  0.700000
6-IMDB-BINARY  0.181818
7-IMDB-BINARY  0.727273
4-IMDB-BINARY  0.700000
8-IMDB-BINARY  0.600000
9-IMDB-BINARY  0.818182
Average test accuracy: 0.6438784833257195
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=7163, ip=192.168.14.62)[0m inx: 9
[36m(Trainer pid=7163, ip=192.168.14.62)[0m dataset_trainer_name: 9-IMDB-BINARY
[36m(Trainer pid=7163, ip=192.168.14.62)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5ef2adc690>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5ef2a0d1d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5ef2f25a50>}
[36m(Trainer pid=7163, ip=192.168.14.62)[0m num_node_features: 136
[36m(Trainer pid=7163, ip=192.168.14.62)[0m num_graph_labels: 2
[36m(Trainer pid=7163, ip=192.168.14.62)[0m train_size: 83
[36m(Trainer pid=7163, ip=192.168.14.62)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=7163, ip=192.168.14.62)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: FedProx, Dataset: IMDB-BINARY, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  IMDB-BINARY  Total number of graphs:  1000
Initialization start: network data collected.
using CPU
2025-05-14 20:59:35,544	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 20:59:35,544	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 20:59:35,551	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
[36m(Trainer pid=4399, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=4399, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=4399, ip=192.168.14.54)[0m inx: 0
[36m(Trainer pid=4399, ip=192.168.14.54)[0m dataset_trainer_name: 0-IMDB-BINARY
[36m(Trainer pid=4399, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f22b8a03450>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f22b8e9eb10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f22b8e2ead0>}
[36m(Trainer pid=4399, ip=192.168.14.54)[0m num_node_features: 136
[36m(Trainer pid=4399, ip=192.168.14.54)[0m num_graph_labels: 2
[36m(Trainer pid=4399, ip=192.168.14.54)[0m train_size: 89
[36m(Trainer pid=4457, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=4457, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=4457, ip=192.168.42.57)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=4457, ip=192.168.42.57)[0m dataset_trainer_name: 2-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=4457, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9c745d9fd0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9c7485e150>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9c744053d0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=4457, ip=192.168.42.57)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=4457, ip=192.168.42.57)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=4457, ip=192.168.42.57)[0m train_size: 85[32m [repeated 2x across cluster][0m
[36m(Trainer pid=4568, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=4568, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=4568, ip=192.168.14.54)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=4568, ip=192.168.14.54)[0m dataset_trainer_name: 4-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=4568, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5a876c0b50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5a874e7b10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5a874e7110>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=4568, ip=192.168.14.54)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=4568, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=4568, ip=192.168.14.54)[0m train_size: 79[32m [repeated 2x across cluster][0m
[36m(Trainer pid=4618, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=4618, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=4618, ip=192.168.42.57)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=4618, ip=192.168.42.57)[0m dataset_trainer_name: 6-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=4618, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f048c282d50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f048bc0e090>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f048c2361d0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=4618, ip=192.168.42.57)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=4618, ip=192.168.42.57)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=4618, ip=192.168.42.57)[0m train_size: 84[32m [repeated 2x across cluster][0m
//Log init_time: 30238.973 ms //end
//Log Large1 init network: 4069256.0 //end
//Log Large2 init network: 4422022.0 //end
//Log Large3 init network: 2384173.0 //end
//Log Large4 init network: 3791650.0 //end
//Log Server init network: 11127671934.0 //end
//Log Initialization Communication Cost (MB): 10626.16 //end

Done setting up devices.
Running FedAvg ...
Pretrain start time recorded.
//pretrain_time: 9.805 ms//end
[36m(Trainer pid=4721, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=4721, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=4721, ip=192.168.14.54)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=4721, ip=192.168.14.54)[0m dataset_trainer_name: 8-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=4721, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f216a1de8d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f216a210ed0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f216a22c790>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=4721, ip=192.168.14.54)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=4721, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=4721, ip=192.168.14.54)[0m train_size: 75[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 10136211456.0 //end
//Log Max memory for Large2: 7954972672.0 //end
//Log Max memory for Large3: 9538674688.0 //end
//Log Max memory for Large4: 8397938688.0 //end
//Log Max memory for Server: 15773921280.0 //end
//Log Large1 network: 592199.0 //end
//Log Large2 network: 564963.0 //end
//Log Large3 network: 1597479.0 //end
//Log Large4 network: 513632.0 //end
//Log Server network: 2748479593.0 //end
//Log Total Actual Pretrain Comm Cost: 2624.27 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 215549.989 ms//end
//Log Max memory for Large1: 10224492544.0 //end
//Log Max memory for Large2: 8011489280.0 //end
//Log Max memory for Large3: 9621630976.0 //end
//Log Max memory for Large4: 8457601024.0 //end
//Log Max memory for Server: 15730372608.0 //end
//Log Large1 network: 86460689.0 //end
//Log Large2 network: 59779025.0 //end
//Log Large3 network: 86636749.0 //end
//Log Large4 network: 59293698.0 //end
//Log Server network: 140034851.0 //end
//Log Total Actual Train Comm Cost: 412.18 MB //end
Train end time recorded and duration set to gauge.
               test_acc
1-IMDB-BINARY  0.700000
3-IMDB-BINARY  0.700000
4-IMDB-BINARY  0.500000
0-IMDB-BINARY  0.583333
6-IMDB-BINARY  0.181818
9-IMDB-BINARY  0.727273
2-IMDB-BINARY  0.636364
5-IMDB-BINARY  0.444444
8-IMDB-BINARY  0.600000
7-IMDB-BINARY  0.636364
Average test accuracy: 0.5697591492817623
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=4751, ip=192.168.39.156)[0m inx: 9
[36m(Trainer pid=4751, ip=192.168.39.156)[0m dataset_trainer_name: 9-IMDB-BINARY
[36m(Trainer pid=4751, ip=192.168.39.156)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f84b5083d50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f84b4fd8690>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f84b4fca090>}
[36m(Trainer pid=4751, ip=192.168.39.156)[0m num_node_features: 136
[36m(Trainer pid=4751, ip=192.168.39.156)[0m num_graph_labels: 2
[36m(Trainer pid=4751, ip=192.168.39.156)[0m train_size: 83
[36m(Trainer pid=4751, ip=192.168.39.156)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=4751, ip=192.168.39.156)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL, Dataset: IMDB-BINARY, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  IMDB-BINARY  Total number of graphs:  1000
Initialization start: network data collected.
using CPU
2025-05-14 21:04:47,048	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 21:04:47,048	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 21:04:47,055	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
[36m(Trainer pid=6005, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=6005, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=6005, ip=192.168.42.57)[0m inx: 0
[36m(Trainer pid=6005, ip=192.168.42.57)[0m dataset_trainer_name: 0-IMDB-BINARY
[36m(Trainer pid=6005, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe629bd9750>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe629f25450>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe62a029ad0>}
[36m(Trainer pid=6005, ip=192.168.42.57)[0m num_node_features: 136
[36m(Trainer pid=6005, ip=192.168.42.57)[0m num_graph_labels: 2
[36m(Trainer pid=6005, ip=192.168.42.57)[0m train_size: 89
[36m(Trainer pid=6134, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=6134, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=6134, ip=192.168.14.54)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=6134, ip=192.168.14.54)[0m dataset_trainer_name: 2-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=6134, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4efd2838d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4efd1c5310>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4efd08b790>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=6134, ip=192.168.14.54)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=6134, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=6134, ip=192.168.14.54)[0m train_size: 85[32m [repeated 2x across cluster][0m
[36m(Trainer pid=6167, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=6167, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=6167, ip=192.168.42.57)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=6167, ip=192.168.42.57)[0m dataset_trainer_name: 4-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=6167, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fce55b0a150>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fce55faefd0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fce55f81190>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=6167, ip=192.168.42.57)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=6167, ip=192.168.42.57)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=6167, ip=192.168.42.57)[0m train_size: 79[32m [repeated 2x across cluster][0m
[36m(Trainer pid=6287, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=6287, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=6287, ip=192.168.14.54)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=6287, ip=192.168.14.54)[0m dataset_trainer_name: 6-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=6287, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd97b2e3d10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd97b227110>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd97b7f0810>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=6287, ip=192.168.14.54)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=6287, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=6287, ip=192.168.14.54)[0m train_size: 84[32m [repeated 2x across cluster][0m
//Log init_time: 30824.646 ms //end
//Log Large1 init network: 2825332.0 //end
//Log Large2 init network: 4032865.0 //end
//Log Large3 init network: 2604006.0 //end
//Log Large4 init network: 5100502.0 //end
//Log Server init network: 11127943673.0 //end
//Log Initialization Communication Cost (MB): 10626.32 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 6.458 ms//end
[36m(Trainer pid=6328, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=6328, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=6328, ip=192.168.42.57)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=6328, ip=192.168.42.57)[0m dataset_trainer_name: 8-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=6328, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fdb0f5679d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fdb0f9ccad0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fdb0f4adc10>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=6328, ip=192.168.42.57)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=6328, ip=192.168.42.57)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=6328, ip=192.168.42.57)[0m train_size: 75[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 8430223360.0 //end
//Log Max memory for Large2: 9535303680.0 //end
//Log Max memory for Large3: 7945441280.0 //end
//Log Max memory for Large4: 10114031616.0 //end
//Log Max memory for Server: 15884693504.0 //end
//Log Large1 network: 553305.0 //end
//Log Large2 network: 2603303.0 //end
//Log Large3 network: 548416.0 //end
//Log Large4 network: 567566.0 //end
//Log Server network: 2747629427.0 //end
//Log Total Actual Pretrain Comm Cost: 2624.42 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 372266.512 ms//end
//Log Max memory for Large1: 8472866816.0 //end
//Log Max memory for Large2: 9614307328.0 //end
//Log Max memory for Large3: 8002850816.0 //end
//Log Max memory for Large4: 10193166336.0 //end
//Log Max memory for Server: 15817961472.0 //end
//Log Large1 network: 154760032.0 //end
//Log Large2 network: 229817453.0 //end
//Log Large3 network: 154852849.0 //end
//Log Large4 network: 229377469.0 //end
//Log Server network: 35739976.0 //end
//Log Total Actual Train Comm Cost: 767.28 MB //end
Train end time recorded and duration set to gauge.
               test_acc
0-IMDB-BINARY  0.600000
1-IMDB-BINARY  0.700000
2-IMDB-BINARY  0.500000
3-IMDB-BINARY  0.181818
4-IMDB-BINARY  0.636364
5-IMDB-BINARY  0.600000
6-IMDB-BINARY  0.818182
7-IMDB-BINARY  0.666667
8-IMDB-BINARY  0.636364
9-IMDB-BINARY  0.444444
Average test accuracy: 0.5779287853408457
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=10438, ip=192.168.14.62)[0m inx: 9
[36m(Trainer pid=10438, ip=192.168.14.62)[0m dataset_trainer_name: 9-IMDB-BINARY
[36m(Trainer pid=10438, ip=192.168.14.62)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2636e6a2d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2636db2210>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2637300310>}
[36m(Trainer pid=10438, ip=192.168.14.62)[0m num_node_features: 136
[36m(Trainer pid=10438, ip=192.168.14.62)[0m num_graph_labels: 2
[36m(Trainer pid=10438, ip=192.168.14.62)[0m train_size: 83
[36m(Trainer pid=10438, ip=192.168.14.62)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=10438, ip=192.168.14.62)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+, Dataset: IMDB-BINARY, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  IMDB-BINARY  Total number of graphs:  1000
Initialization start: network data collected.
using CPU
2025-05-14 21:12:35,728	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 21:12:35,728	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 21:12:35,734	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
[36m(Trainer pid=8334, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=8334, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=8334, ip=192.168.14.54)[0m inx: 0
[36m(Trainer pid=8334, ip=192.168.14.54)[0m dataset_trainer_name: 0-IMDB-BINARY
[36m(Trainer pid=8334, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f04287cfdd0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f04287124d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0428be6510>}
[36m(Trainer pid=8334, ip=192.168.14.54)[0m num_node_features: 136
[36m(Trainer pid=8334, ip=192.168.14.54)[0m num_graph_labels: 2
[36m(Trainer pid=8334, ip=192.168.14.54)[0m train_size: 89
[36m(Trainer pid=8393, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=8393, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=8393, ip=192.168.42.57)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=8393, ip=192.168.42.57)[0m dataset_trainer_name: 2-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=8393, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9894a0fcd0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9894953350>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9894833a50>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=8393, ip=192.168.42.57)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=8393, ip=192.168.42.57)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=8393, ip=192.168.42.57)[0m train_size: 85[32m [repeated 2x across cluster][0m
[36m(Trainer pid=8503, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=8503, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=8503, ip=192.168.14.54)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=8503, ip=192.168.14.54)[0m dataset_trainer_name: 4-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=8503, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4949ecb450>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4949e0fb90>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4949e0e150>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=8503, ip=192.168.14.54)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=8503, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=8503, ip=192.168.14.54)[0m train_size: 79[32m [repeated 2x across cluster][0m
[36m(Trainer pid=8552, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=8552, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=8552, ip=192.168.42.57)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=8552, ip=192.168.42.57)[0m dataset_trainer_name: 6-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=8552, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f779472dd10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f77ab4081d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f77a6bda590>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=8552, ip=192.168.42.57)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=8552, ip=192.168.42.57)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=8552, ip=192.168.42.57)[0m train_size: 84[32m [repeated 2x across cluster][0m
//Log init_time: 29488.549 ms //end
//Log Large1 init network: 3990046.0 //end
//Log Large2 init network: 4390968.0 //end
//Log Large3 init network: 2555946.0 //end
//Log Large4 init network: 3676026.0 //end
//Log Server init network: 12431475760.0 //end
//Log Initialization Communication Cost (MB): 11869.52 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 7.636 ms//end
[36m(Trainer pid=8655, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=8655, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=8655, ip=192.168.14.54)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=8655, ip=192.168.14.54)[0m dataset_trainer_name: 8-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=8655, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe50d3f1690>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe50d47c9d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe50cec0490>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=8655, ip=192.168.14.54)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=8655, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=8655, ip=192.168.14.54)[0m train_size: 75[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 8417189888.0 //end
//Log Max memory for Large2: 6527070208.0 //end
//Log Max memory for Large3: 7685169152.0 //end
//Log Max memory for Large4: 7698173952.0 //end
//Log Max memory for Server: 17398329344.0 //end
//Log Large1 network: 721268.0 //end
//Log Large2 network: 573772.0 //end
//Log Large3 network: 1756392.0 //end
//Log Large4 network: 574515.0 //end
//Log Server network: 1443840442.0 //end
//Log Total Actual Pretrain Comm Cost: 1380.41 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 372326.04500000004 ms//end
//Log Max memory for Large1: 10195292160.0 //end
//Log Max memory for Large2: 7984754688.0 //end
//Log Max memory for Large3: 9612931072.0 //end
//Log Max memory for Large4: 8468234240.0 //end
//Log Max memory for Server: 15960555520.0 //end
//Log Large1 network: 229370975.0 //end
//Log Large2 network: 155493316.0 //end
//Log Large3 network: 229373610.0 //end
//Log Large4 network: 154885441.0 //end
//Log Server network: 35919004.0 //end
//Log Total Actual Train Comm Cost: 767.75 MB //end
Train end time recorded and duration set to gauge.
               test_acc
0-IMDB-BINARY  0.600000
1-IMDB-BINARY  0.800000
2-IMDB-BINARY  0.583333
3-IMDB-BINARY  0.600000
4-IMDB-BINARY  0.600000
5-IMDB-BINARY  0.555556
6-IMDB-BINARY  0.181818
7-IMDB-BINARY  0.636364
8-IMDB-BINARY  0.818182
9-IMDB-BINARY  0.636364
Average test accuracy: 0.5962203695243896
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=8678, ip=192.168.39.156)[0m inx: 9
[36m(Trainer pid=8678, ip=192.168.39.156)[0m dataset_trainer_name: 9-IMDB-BINARY
[36m(Trainer pid=8678, ip=192.168.39.156)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fab5768f790>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fab575d3790>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fab575c8550>}
[36m(Trainer pid=8678, ip=192.168.39.156)[0m num_node_features: 136
[36m(Trainer pid=8678, ip=192.168.39.156)[0m num_graph_labels: 2
[36m(Trainer pid=8678, ip=192.168.39.156)[0m train_size: 83
[36m(Trainer pid=8678, ip=192.168.39.156)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=8678, ip=192.168.39.156)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+dWs, Dataset: IMDB-BINARY, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  IMDB-BINARY  Total number of graphs:  1000
Initialization start: network data collected.
using CPU
2025-05-14 21:20:23,169	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 21:20:23,169	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 21:20:23,175	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
[36m(Trainer pid=10598, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=10598, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=10598, ip=192.168.42.57)[0m inx: 0
[36m(Trainer pid=10598, ip=192.168.42.57)[0m dataset_trainer_name: 0-IMDB-BINARY
[36m(Trainer pid=10598, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1a670c4a10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1a67745950>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1a676fb3d0>}
[36m(Trainer pid=10598, ip=192.168.42.57)[0m num_node_features: 136
[36m(Trainer pid=10598, ip=192.168.42.57)[0m num_graph_labels: 2
[36m(Trainer pid=10598, ip=192.168.42.57)[0m train_size: 89
[36m(Trainer pid=10726, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10726, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10726, ip=192.168.14.54)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10726, ip=192.168.14.54)[0m dataset_trainer_name: 2-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10726, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2e53b23890>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2e53a5ca10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2e53f9b490>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10726, ip=192.168.14.54)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10726, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10726, ip=192.168.14.54)[0m train_size: 85[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10761, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10761, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10761, ip=192.168.42.57)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10761, ip=192.168.42.57)[0m dataset_trainer_name: 4-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10761, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f94236cff50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f942383b7d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9423d56d50>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10761, ip=192.168.42.57)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10761, ip=192.168.42.57)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10761, ip=192.168.42.57)[0m train_size: 79[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10881, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10881, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10881, ip=192.168.14.54)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10881, ip=192.168.14.54)[0m dataset_trainer_name: 6-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10881, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7ef81de0eb50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0957147350>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7ef81e334510>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10881, ip=192.168.14.54)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10881, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10881, ip=192.168.14.54)[0m train_size: 84[32m [repeated 2x across cluster][0m
//Log init_time: 29222.778000000002 ms //end
//Log Large1 init network: 3292832.0 //end
//Log Large2 init network: 3978114.0 //end
//Log Large3 init network: 2568572.0 //end
//Log Large4 init network: 4375192.0 //end
//Log Server init network: 11126563761.0 //end
//Log Initialization Communication Cost (MB): 10624.67 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 5.764 ms//end
[36m(Trainer pid=10922, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10922, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10922, ip=192.168.42.57)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10922, ip=192.168.42.57)[0m dataset_trainer_name: 8-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10922, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fab8cd53a50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fab8afe9610>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fab8a997190>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10922, ip=192.168.42.57)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10922, ip=192.168.42.57)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10922, ip=192.168.42.57)[0m train_size: 75[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 9709412352.0 //end
//Log Max memory for Large2: 7686070272.0 //end
//Log Max memory for Large3: 6527295488.0 //end
//Log Max memory for Large4: 8409948160.0 //end
//Log Max memory for Server: 17448316928.0 //end
//Log Large1 network: 519147.0 //end
//Log Large2 network: 2524578.0 //end
//Log Large3 network: 563705.0 //end
//Log Large4 network: 1223505.0 //end
//Log Server network: 2748343934.0 //end
//Log Total Actual Pretrain Comm Cost: 2625.63 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 371250.193 ms//end
//Log Max memory for Large1: 8456790016.0 //end
//Log Max memory for Large2: 9617285120.0 //end
//Log Max memory for Large3: 7967719424.0 //end
//Log Max memory for Large4: 10190512128.0 //end
//Log Max memory for Server: 16011177984.0 //end
//Log Large1 network: 154799323.0 //end
//Log Large2 network: 229724129.0 //end
//Log Large3 network: 154779674.0 //end
//Log Large4 network: 229203885.0 //end
//Log Server network: 35951522.0 //end
//Log Total Actual Train Comm Cost: 767.19 MB //end
Train end time recorded and duration set to gauge.
               test_acc
0-IMDB-BINARY  0.600000
1-IMDB-BINARY  0.800000
2-IMDB-BINARY  0.666667
3-IMDB-BINARY  0.818182
4-IMDB-BINARY  0.636364
5-IMDB-BINARY  0.500000
6-IMDB-BINARY  0.555556
7-IMDB-BINARY  0.600000
8-IMDB-BINARY  0.727273
9-IMDB-BINARY  0.181818
Average test accuracy: 0.6049756357545303
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=15006, ip=192.168.14.62)[0m inx: 9
[36m(Trainer pid=15006, ip=192.168.14.62)[0m dataset_trainer_name: 9-IMDB-BINARY
[36m(Trainer pid=15006, ip=192.168.14.62)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4faa8cdd90>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4faad4f250>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4faad0df90>}
[36m(Trainer pid=15006, ip=192.168.14.62)[0m num_node_features: 136
[36m(Trainer pid=15006, ip=192.168.14.62)[0m num_graph_labels: 2
[36m(Trainer pid=15006, ip=192.168.14.62)[0m train_size: 83
[36m(Trainer pid=15006, ip=192.168.14.62)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=15006, ip=192.168.14.62)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: SelfTrain, Dataset: IMDB-MULTI, Trainers: 10
--------------------------------------------------------------------------------

Downloading https://www.chrsmrrs.com/graphkerneldatasets/IMDB-MULTI.zip
Processing...
Done!
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  IMDB-MULTI  Total number of graphs:  1500
Initialization start: network data collected.
using CPU
2025-05-14 21:28:18,144	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 21:28:18,145	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 21:28:18,150	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
[36m(Trainer pid=12971, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=12971, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=12971, ip=192.168.14.54)[0m inx: 0
[36m(Trainer pid=12971, ip=192.168.14.54)[0m dataset_trainer_name: 0-IMDB-MULTI
[36m(Trainer pid=12971, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2247dbb810>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2248989490>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f224897ae50>}
[36m(Trainer pid=12971, ip=192.168.14.54)[0m num_node_features: 89
[36m(Trainer pid=12971, ip=192.168.14.54)[0m num_graph_labels: 3
[36m(Trainer pid=12971, ip=192.168.14.54)[0m train_size: 134
[36m(Trainer pid=13021, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13021, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13021, ip=192.168.42.57)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13021, ip=192.168.42.57)[0m dataset_trainer_name: 2-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13021, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f10e9aa1ad0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f10e9ea4150>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f10e98b93d0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13021, ip=192.168.42.57)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13021, ip=192.168.42.57)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13021, ip=192.168.42.57)[0m train_size: 128[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13133, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13133, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13133, ip=192.168.14.54)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13133, ip=192.168.14.54)[0m dataset_trainer_name: 4-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13133, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4a00002410>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4a00b6ca90>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4a00b6dbd0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13133, ip=192.168.14.54)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13133, ip=192.168.14.54)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13133, ip=192.168.14.54)[0m train_size: 125[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13183, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13183, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13183, ip=192.168.42.57)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13183, ip=192.168.42.57)[0m dataset_trainer_name: 6-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13183, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9747b4b810>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9747f5b550>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9748633b50>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13183, ip=192.168.42.57)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13183, ip=192.168.42.57)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13183, ip=192.168.42.57)[0m train_size: 115[32m [repeated 2x across cluster][0m
//Log init_time: 33174.558 ms //end
//Log Large1 init network: 4921735.0 //end
//Log Large2 init network: 4798804.0 //end
//Log Large3 init network: 2701697.0 //end
//Log Large4 init network: 3936463.0 //end
//Log Server init network: 12816797775.0 //end
//Log Initialization Communication Cost (MB): 12238.65 //end

Done setting up devices.
Running SelfTrain ...
Pretrain start time recorded.
//pretrain_time: 15.187000000000001 ms//end
[36m(Trainer pid=13295, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13295, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13295, ip=192.168.14.54)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13295, ip=192.168.14.54)[0m dataset_trainer_name: 8-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13295, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4efc186550>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4efef49bd0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4efef4a850>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13295, ip=192.168.14.54)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13295, ip=192.168.14.54)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13295, ip=192.168.14.54)[0m train_size: 112[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 11128414208.0 //end
//Log Max memory for Large2: 8173895680.0 //end
//Log Max memory for Large3: 10516746240.0 //end
//Log Max memory for Large4: 8562298880.0 //end
//Log Max memory for Server: 17406701568.0 //end
//Log Large1 network: 594376.0 //end
//Log Large2 network: 579628.0 //end
//Log Large3 network: 1748253.0 //end
//Log Large4 network: 532437.0 //end
//Log Server network: 2393410298.0 //end
//Log Total Actual Pretrain Comm Cost: 2285.83 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
  > 7-IMDB-MULTI done.
trainingaccs: 0.35, valaccs: 0.2, acc: 0.3333333333333333
  > 1-IMDB-MULTI done.
trainingaccs: 0.4056603773584906, valaccs: 0.3076923076923077, acc: 0.42857142857142855
  > 5-IMDB-MULTI done.
trainingaccs: 0.33620689655172414, valaccs: 0.3333333333333333, acc: 0.5333333333333333
  > 3-IMDB-MULTI done.
trainingaccs: 0.3652173913043478, valaccs: 0.2857142857142857, acc: 0.26666666666666666
  > 2-IMDB-MULTI done.
trainingaccs: 0.3671875, valaccs: 0.3125, acc: 0.375
  > 6-IMDB-MULTI done.
trainingaccs: 0.3739130434782609, valaccs: 0.35714285714285715, acc: 0.4
  > 4-IMDB-MULTI done.
trainingaccs: 0.32, valaccs: 0.3125, acc: 0.3125
  > 8-IMDB-MULTI done.
trainingaccs: 0.25892857142857145, valaccs: 0.2857142857142857, acc: 0.3333333333333333
  > 9-IMDB-MULTI done.
trainingaccs: 0.312, valaccs: 0.1875, acc: 0.4375
  > 0-IMDB-MULTI done.
trainingaccs: 0.291044776119403, valaccs: 0.29411764705882354, acc: 0.29411764705882354
//train_time: 58.806999999999995 ms//end
//Log Max memory for Large1: 11190788096.0 //end
//Log Max memory for Large2: 8212783104.0 //end
//Log Max memory for Large3: 10575351808.0 //end
//Log Max memory for Large4: 8604573696.0 //end
//Log Max memory for Server: 17408061440.0 //end
//Log Large1 network: 640530.0 //end
//Log Large2 network: 622612.0 //end
//Log Large3 network: 649418.0 //end
//Log Large4 network: 573681.0 //end
//Log Server network: 847322.0 //end
//Log Total Actual Train Comm Cost: 3.18 MB //end
Train end time recorded and duration set to gauge.
              test_acc
7-IMDB-MULTI  0.333333
1-IMDB-MULTI  0.428571
5-IMDB-MULTI  0.533333
3-IMDB-MULTI  0.266667
2-IMDB-MULTI  0.375000
6-IMDB-MULTI  0.400000
4-IMDB-MULTI  0.312500
8-IMDB-MULTI  0.333333
9-IMDB-MULTI  0.437500
0-IMDB-MULTI  0.294118
Average test accuracy: 0.37124228872150866
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 2.22 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 2.22 MB //end
[36m(Trainer pid=13304, ip=192.168.39.156)[0m inx: 9
[36m(Trainer pid=13304, ip=192.168.39.156)[0m dataset_trainer_name: 9-IMDB-MULTI
[36m(Trainer pid=13304, ip=192.168.39.156)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f58343bcfd0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f583519df10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f583519ee10>}
[36m(Trainer pid=13304, ip=192.168.39.156)[0m num_node_features: 89
[36m(Trainer pid=13304, ip=192.168.39.156)[0m num_graph_labels: 3
[36m(Trainer pid=13304, ip=192.168.39.156)[0m train_size: 125
[36m(Trainer pid=13304, ip=192.168.39.156)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=13304, ip=192.168.39.156)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: FedAvg, Dataset: IMDB-MULTI, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  IMDB-MULTI  Total number of graphs:  1500
Initialization start: network data collected.
using CPU
2025-05-14 21:29:56,886	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 21:29:56,886	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 21:29:56,891	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
[36m(Trainer pid=13668, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=13668, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=13668, ip=192.168.42.57)[0m inx: 0
[36m(Trainer pid=13668, ip=192.168.42.57)[0m dataset_trainer_name: 0-IMDB-MULTI
[36m(Trainer pid=13668, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa20c6bef90>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa20cebb7d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa20ceabb90>}
[36m(Trainer pid=13668, ip=192.168.42.57)[0m num_node_features: 89
[36m(Trainer pid=13668, ip=192.168.42.57)[0m num_graph_labels: 3
[36m(Trainer pid=13668, ip=192.168.42.57)[0m train_size: 134
[36m(Trainer pid=13797, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13797, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13797, ip=192.168.14.54)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13797, ip=192.168.14.54)[0m dataset_trainer_name: 2-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13797, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0785a9f690>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f078a24fdd0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1876c87450>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13797, ip=192.168.14.54)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13797, ip=192.168.14.54)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13797, ip=192.168.14.54)[0m train_size: 128[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13831, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13831, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13831, ip=192.168.42.57)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13831, ip=192.168.42.57)[0m dataset_trainer_name: 4-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13831, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd3c22df310>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd3c30b2210>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd3c30aced0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13831, ip=192.168.42.57)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13831, ip=192.168.42.57)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13831, ip=192.168.42.57)[0m train_size: 125[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13966, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13966, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13966, ip=192.168.14.54)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13966, ip=192.168.14.54)[0m dataset_trainer_name: 6-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13966, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f260cba3810>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f260ccc6310>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f260d766750>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13966, ip=192.168.14.54)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13966, ip=192.168.14.54)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13966, ip=192.168.14.54)[0m train_size: 115[32m [repeated 2x across cluster][0m
//Log init_time: 32672.853000000003 ms //end
//Log Large1 init network: 3181941.0 //end
//Log Large2 init network: 4505014.0 //end
//Log Large3 init network: 2850779.0 //end
//Log Large4 init network: 5772158.0 //end
//Log Server init network: 13613878543.0 //end
//Log Initialization Communication Cost (MB): 12998.76 //end

Done setting up devices.
Running FedAvg ...
Pretrain start time recorded.
//pretrain_time: 9.282 ms//end
[36m(Trainer pid=13992, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13992, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13992, ip=192.168.42.57)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13992, ip=192.168.42.57)[0m dataset_trainer_name: 8-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13992, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2eafa46790>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2eb065d6d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2eb0651a10>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13992, ip=192.168.42.57)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13992, ip=192.168.42.57)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13992, ip=192.168.42.57)[0m train_size: 112[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 9059885056.0 //end
//Log Max memory for Large2: 10504237056.0 //end
//Log Max memory for Large3: 8644993024.0 //end
//Log Max memory for Large4: 11119550464.0 //end
//Log Max memory for Server: 17395081216.0 //end
//Log Large1 network: 555679.0 //end
//Log Large2 network: 2874200.0 //end
//Log Large3 network: 516391.0 //end
//Log Large4 network: 671918.0 //end
//Log Server network: 1592292678.0 //end
//Log Total Actual Pretrain Comm Cost: 1522.93 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 218773.817 ms//end
//Log Max memory for Large1: 9120522240.0 //end
//Log Max memory for Large2: 10589913088.0 //end
//Log Max memory for Large3: 8711774208.0 //end
//Log Max memory for Large4: 11220512768.0 //end
//Log Max memory for Server: 17404231680.0 //end
//Log Large1 network: 58759904.0 //end
//Log Large2 network: 86758540.0 //end
//Log Large3 network: 58623549.0 //end
//Log Large4 network: 86949166.0 //end
//Log Server network: 140760555.0 //end
//Log Total Actual Train Comm Cost: 411.85 MB //end
Train end time recorded and duration set to gauge.
              test_acc
0-IMDB-MULTI  0.470588
3-IMDB-MULTI  0.400000
4-IMDB-MULTI  0.625000
6-IMDB-MULTI  0.400000
8-IMDB-MULTI  0.533333
9-IMDB-MULTI  0.625000
7-IMDB-MULTI  0.200000
1-IMDB-MULTI  0.428571
5-IMDB-MULTI  0.466667
2-IMDB-MULTI  0.250000
Average test accuracy: 0.4419487694743449
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=18088, ip=192.168.14.62)[0m inx: 9
[36m(Trainer pid=18088, ip=192.168.14.62)[0m dataset_trainer_name: 9-IMDB-MULTI
[36m(Trainer pid=18088, ip=192.168.14.62)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f79befdb950>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f79bffda310>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f79bffd6dd0>}
[36m(Trainer pid=18088, ip=192.168.14.62)[0m num_node_features: 89
[36m(Trainer pid=18088, ip=192.168.14.62)[0m num_graph_labels: 3
[36m(Trainer pid=18088, ip=192.168.14.62)[0m train_size: 125
[36m(Trainer pid=18088, ip=192.168.14.62)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=18088, ip=192.168.14.62)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: FedProx, Dataset: IMDB-MULTI, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  IMDB-MULTI  Total number of graphs:  1500
Initialization start: network data collected.
using CPU
2025-05-14 21:35:13,989	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 21:35:13,989	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 21:35:13,996	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
[36m(Trainer pid=15364, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=15364, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=15364, ip=192.168.14.54)[0m inx: 0
[36m(Trainer pid=15364, ip=192.168.14.54)[0m dataset_trainer_name: 0-IMDB-MULTI
[36m(Trainer pid=15364, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fb358cada90>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fb359a2ca50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc481d07450>}
[36m(Trainer pid=15364, ip=192.168.14.54)[0m num_node_features: 89
[36m(Trainer pid=15364, ip=192.168.14.54)[0m num_graph_labels: 3
[36m(Trainer pid=15364, ip=192.168.14.54)[0m train_size: 134
[36m(Trainer pid=15413, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=15413, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=15413, ip=192.168.42.57)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=15413, ip=192.168.42.57)[0m dataset_trainer_name: 2-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=15413, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1224f49cd0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1225b57650>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1225b477d0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=15413, ip=192.168.42.57)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=15413, ip=192.168.42.57)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=15413, ip=192.168.42.57)[0m train_size: 128[32m [repeated 2x across cluster][0m
[36m(Trainer pid=15533, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=15533, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=15533, ip=192.168.14.54)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=15533, ip=192.168.14.54)[0m dataset_trainer_name: 4-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=15533, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa1e1e94bd0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa1e2c76290>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa1e2c76710>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=15533, ip=192.168.14.54)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=15533, ip=192.168.14.54)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=15533, ip=192.168.14.54)[0m train_size: 125[32m [repeated 2x across cluster][0m
[36m(Trainer pid=15574, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=15574, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=15574, ip=192.168.42.57)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=15574, ip=192.168.42.57)[0m dataset_trainer_name: 6-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=15574, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fae100c1850>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fae1069f0d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fae10e95250>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=15574, ip=192.168.42.57)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=15574, ip=192.168.42.57)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=15574, ip=192.168.42.57)[0m train_size: 115[32m [repeated 2x across cluster][0m
//Log init_time: 31612.097999999998 ms //end
//Log Large1 init network: 3988925.0 //end
//Log Large2 init network: 4692463.0 //end
//Log Large3 init network: 2543847.0 //end
//Log Large4 init network: 3720245.0 //end
//Log Server init network: 13597756340.0 //end
//Log Initialization Communication Cost (MB): 12982.08 //end

Done setting up devices.
Running FedAvg ...
Pretrain start time recorded.
//pretrain_time: 9.246 ms//end
[36m(Trainer pid=15689, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=15689, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=15689, ip=192.168.14.54)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=15689, ip=192.168.14.54)[0m dataset_trainer_name: 8-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=15689, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6f3a39b650>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6f3b17ead0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6f3b176f10>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=15689, ip=192.168.14.54)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=15689, ip=192.168.14.54)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=15689, ip=192.168.14.54)[0m train_size: 112[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 11120877568.0 //end
//Log Max memory for Large2: 8649330688.0 //end
//Log Max memory for Large3: 10499747840.0 //end
//Log Max memory for Large4: 9048383488.0 //end
//Log Max memory for Server: 17389264896.0 //end
//Log Large1 network: 1065828.0 //end
//Log Large2 network: 571168.0 //end
//Log Large3 network: 1773970.0 //end
//Log Large4 network: 521921.0 //end
//Log Server network: 1605091221.0 //end
//Log Total Actual Pretrain Comm Cost: 1534.48 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 216436.918 ms//end
//Log Max memory for Large1: 11222970368.0 //end
//Log Max memory for Large2: 8717090816.0 //end
//Log Max memory for Large3: 10586423296.0 //end
//Log Max memory for Large4: 9113526272.0 //end
//Log Max memory for Server: 17397571584.0 //end
//Log Large1 network: 86304663.0 //end
//Log Large2 network: 59456172.0 //end
//Log Large3 network: 86222999.0 //end
//Log Large4 network: 59421218.0 //end
//Log Server network: 140829253.0 //end
//Log Total Actual Train Comm Cost: 412.21 MB //end
Train end time recorded and duration set to gauge.
              test_acc
1-IMDB-MULTI  0.428571
2-IMDB-MULTI  0.250000
3-IMDB-MULTI  0.533333
5-IMDB-MULTI  0.466667
7-IMDB-MULTI  0.200000
0-IMDB-MULTI  0.352941
6-IMDB-MULTI  0.466667
4-IMDB-MULTI  0.437500
8-IMDB-MULTI  0.533333
9-IMDB-MULTI  0.625000
Average test accuracy: 0.43129438230141554
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=15689, ip=192.168.39.156)[0m inx: 9
[36m(Trainer pid=15689, ip=192.168.39.156)[0m dataset_trainer_name: 9-IMDB-MULTI
[36m(Trainer pid=15689, ip=192.168.39.156)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7eefaf3f0350>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7eefb01af110>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7eefb01ad690>}
[36m(Trainer pid=15689, ip=192.168.39.156)[0m num_node_features: 89
[36m(Trainer pid=15689, ip=192.168.39.156)[0m num_graph_labels: 3
[36m(Trainer pid=15689, ip=192.168.39.156)[0m train_size: 125
[36m(Trainer pid=15689, ip=192.168.39.156)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=15689, ip=192.168.39.156)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL, Dataset: IMDB-MULTI, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  IMDB-MULTI  Total number of graphs:  1500
Initialization start: network data collected.
using CPU
2025-05-14 21:40:27,907	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 21:40:27,907	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 21:40:27,913	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
[36m(Trainer pid=16972, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=16972, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=16972, ip=192.168.42.57)[0m inx: 0
[36m(Trainer pid=16972, ip=192.168.42.57)[0m dataset_trainer_name: 0-IMDB-MULTI
[36m(Trainer pid=16972, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fbc7a287710>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fbc7a8f7490>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fcdaeb53210>}
[36m(Trainer pid=16972, ip=192.168.42.57)[0m num_node_features: 89
[36m(Trainer pid=16972, ip=192.168.42.57)[0m num_graph_labels: 3
[36m(Trainer pid=16972, ip=192.168.42.57)[0m train_size: 134
[36m(Trainer pid=17101, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=17101, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=17101, ip=192.168.14.54)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=17101, ip=192.168.14.54)[0m dataset_trainer_name: 2-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=17101, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3b47108c50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3b47f39950>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3b4713e750>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=17101, ip=192.168.14.54)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=17101, ip=192.168.14.54)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=17101, ip=192.168.14.54)[0m train_size: 128[32m [repeated 2x across cluster][0m
[36m(Trainer pid=17137, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=17137, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=17137, ip=192.168.42.57)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=17137, ip=192.168.42.57)[0m dataset_trainer_name: 4-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=17137, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe30be94210>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe30c876410>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe30c870510>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=17137, ip=192.168.42.57)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=17137, ip=192.168.42.57)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=17137, ip=192.168.42.57)[0m train_size: 125[32m [repeated 2x across cluster][0m
[36m(Trainer pid=17271, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=17271, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=17271, ip=192.168.14.54)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=17271, ip=192.168.14.54)[0m dataset_trainer_name: 6-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=17271, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7eeff7c3fbd0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7eeff7671b90>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7eeffc6e2e50>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=17271, ip=192.168.14.54)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=17271, ip=192.168.14.54)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=17271, ip=192.168.14.54)[0m train_size: 115[32m [repeated 2x across cluster][0m
//Log init_time: 33149.895000000004 ms //end
//Log Large1 init network: 3447689.0 //end
//Log Large2 init network: 4547314.0 //end
//Log Large3 init network: 2685224.0 //end
//Log Large4 init network: 3841400.0 //end
//Log Server init network: 13610394845.0 //end
//Log Initialization Communication Cost (MB): 12993.73 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 6.532 ms//end
[36m(Trainer pid=17299, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=17299, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=17299, ip=192.168.42.57)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=17299, ip=192.168.42.57)[0m dataset_trainer_name: 8-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=17299, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f67203e9d90>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f67211fda50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f67211fc990>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=17299, ip=192.168.42.57)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=17299, ip=192.168.42.57)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=17299, ip=192.168.42.57)[0m train_size: 112[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 9063325696.0 //end
//Log Max memory for Large2: 10513203200.0 //end
//Log Max memory for Large3: 8639602688.0 //end
//Log Max memory for Large4: 11124178944.0 //end
//Log Max memory for Server: 17316392960.0 //end
//Log Large1 network: 558349.0 //end
//Log Large2 network: 2796833.0 //end
//Log Large3 network: 515715.0 //end
//Log Large4 network: 2114644.0 //end
//Log Server network: 1591903023.0 //end
//Log Total Actual Pretrain Comm Cost: 1523.87 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 352106.12 ms//end
//Log Max memory for Large1: 9109606400.0 //end
//Log Max memory for Large2: 10583015424.0 //end
//Log Max memory for Large3: 8700198912.0 //end
//Log Max memory for Large4: 11201814528.0 //end
//Log Max memory for Server: 17301266432.0 //end
//Log Large1 network: 158519947.0 //end
//Log Large2 network: 235534851.0 //end
//Log Large3 network: 158539866.0 //end
//Log Large4 network: 235358738.0 //end
//Log Server network: 36085419.0 //end
//Log Total Actual Train Comm Cost: 785.86 MB //end
Train end time recorded and duration set to gauge.
              test_acc
0-IMDB-MULTI  0.352941
1-IMDB-MULTI  0.500000
2-IMDB-MULTI  0.400000
3-IMDB-MULTI  0.411765
4-IMDB-MULTI  0.600000
5-IMDB-MULTI  0.466667
6-IMDB-MULTI  0.375000
7-IMDB-MULTI  0.600000
8-IMDB-MULTI  0.600000
9-IMDB-MULTI  0.625000
Average test accuracy: 0.49199865564955086
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=21385, ip=192.168.14.62)[0m inx: 9
[36m(Trainer pid=21385, ip=192.168.14.62)[0m dataset_trainer_name: 9-IMDB-MULTI
[36m(Trainer pid=21385, ip=192.168.14.62)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5f20294b90>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5f211a2f10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5f211a30d0>}
[36m(Trainer pid=21385, ip=192.168.14.62)[0m num_node_features: 89
[36m(Trainer pid=21385, ip=192.168.14.62)[0m num_graph_labels: 3
[36m(Trainer pid=21385, ip=192.168.14.62)[0m train_size: 125
[36m(Trainer pid=21385, ip=192.168.14.62)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=21385, ip=192.168.14.62)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+, Dataset: IMDB-MULTI, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  IMDB-MULTI  Total number of graphs:  1500
Initialization start: network data collected.
using CPU
2025-05-14 21:47:58,796	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 21:47:58,796	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 21:47:58,802	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
[36m(Trainer pid=19238, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=19238, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=19238, ip=192.168.14.54)[0m inx: 0
[36m(Trainer pid=19238, ip=192.168.14.54)[0m dataset_trainer_name: 0-IMDB-MULTI
[36m(Trainer pid=19238, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4beec99d10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4befa70dd0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5d27cc69d0>}
[36m(Trainer pid=19238, ip=192.168.14.54)[0m num_node_features: 89
[36m(Trainer pid=19238, ip=192.168.14.54)[0m num_graph_labels: 3
[36m(Trainer pid=19238, ip=192.168.14.54)[0m train_size: 134
[36m(Trainer pid=19284, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=19284, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=19284, ip=192.168.42.57)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=19284, ip=192.168.42.57)[0m dataset_trainer_name: 2-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=19284, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fdfba9cc2d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fdfbb352310>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fdfba4f6710>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=19284, ip=192.168.42.57)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=19284, ip=192.168.42.57)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=19284, ip=192.168.42.57)[0m train_size: 128[32m [repeated 2x across cluster][0m
[36m(Trainer pid=19408, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=19408, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=19408, ip=192.168.14.54)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=19408, ip=192.168.14.54)[0m dataset_trainer_name: 4-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=19408, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f504c400690>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f504d088910>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f504d086ad0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=19408, ip=192.168.14.54)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=19408, ip=192.168.14.54)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=19408, ip=192.168.14.54)[0m train_size: 125[32m [repeated 2x across cluster][0m
[36m(Trainer pid=19454, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=19454, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=19454, ip=192.168.42.57)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=19454, ip=192.168.42.57)[0m dataset_trainer_name: 6-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=19454, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5ef460bc90>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5f18b0c390>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5f194971d0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=19454, ip=192.168.42.57)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=19454, ip=192.168.42.57)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=19454, ip=192.168.42.57)[0m train_size: 115[32m [repeated 2x across cluster][0m
//Log init_time: 32870.703 ms //end
//Log Large1 init network: 4759788.0 //end
//Log Large2 init network: 4838500.0 //end
//Log Large3 init network: 2627777.0 //end
//Log Large4 init network: 3774796.0 //end
//Log Server init network: 12857824096.0 //end
//Log Initialization Communication Cost (MB): 12277.44 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 5.904999999999999 ms//end
[36m(Trainer pid=19563, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=19563, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=19563, ip=192.168.14.54)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=19563, ip=192.168.14.54)[0m dataset_trainer_name: 8-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=19563, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe75e0b39d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe75ec96d90>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe75ec92150>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=19563, ip=192.168.14.54)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=19563, ip=192.168.14.54)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=19563, ip=192.168.14.54)[0m train_size: 112[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 11131908096.0 //end
//Log Max memory for Large2: 8668037120.0 //end
//Log Max memory for Large3: 10517524480.0 //end
//Log Max memory for Large4: 9062768640.0 //end
//Log Max memory for Server: 17417060352.0 //end
//Log Large1 network: 801081.0 //end
//Log Large2 network: 578203.0 //end
//Log Large3 network: 1831926.0 //end
//Log Large4 network: 528505.0 //end
//Log Server network: 2344394914.0 //end
//Log Total Actual Pretrain Comm Cost: 2239.36 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 336003.17699999997 ms//end
//Log Max memory for Large1: 11188883456.0 //end
//Log Max memory for Large2: 8720203776.0 //end
//Log Max memory for Large3: 10588127232.0 //end
//Log Max memory for Large4: 9100554240.0 //end
//Log Max memory for Server: 17415364608.0 //end
//Log Large1 network: 235055500.0 //end
//Log Large2 network: 158899624.0 //end
//Log Large3 network: 234753581.0 //end
//Log Large4 network: 158270009.0 //end
//Log Server network: 35781703.0 //end
//Log Total Actual Train Comm Cost: 784.65 MB //end
Train end time recorded and duration set to gauge.
              test_acc
0-IMDB-MULTI  0.500000
1-IMDB-MULTI  0.533333
2-IMDB-MULTI  0.466667
3-IMDB-MULTI  0.400000
4-IMDB-MULTI  0.500000
5-IMDB-MULTI  0.470588
6-IMDB-MULTI  0.500000
7-IMDB-MULTI  0.500000
8-IMDB-MULTI  0.533333
9-IMDB-MULTI  0.600000
Average test accuracy: 0.5004918355301987
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=19558, ip=192.168.39.156)[0m inx: 9
[36m(Trainer pid=19558, ip=192.168.39.156)[0m dataset_trainer_name: 9-IMDB-MULTI
[36m(Trainer pid=19558, ip=192.168.39.156)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6e17034d10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6e178971d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6e178a1b50>}
[36m(Trainer pid=19558, ip=192.168.39.156)[0m num_node_features: 89
[36m(Trainer pid=19558, ip=192.168.39.156)[0m num_graph_labels: 3
[36m(Trainer pid=19558, ip=192.168.39.156)[0m train_size: 125
[36m(Trainer pid=19558, ip=192.168.39.156)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=19558, ip=192.168.39.156)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+dWs, Dataset: IMDB-MULTI, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  IMDB-MULTI  Total number of graphs:  1500
Initialization start: network data collected.
using CPU
2025-05-14 21:55:13,459	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 21:55:13,460	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 21:55:13,465	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
[36m(Trainer pid=21357, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=21357, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=21357, ip=192.168.42.57)[0m inx: 0
[36m(Trainer pid=21357, ip=192.168.42.57)[0m dataset_trainer_name: 0-IMDB-MULTI
[36m(Trainer pid=21357, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f38aced78d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f38ad9a9c50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f38ad317190>}
[36m(Trainer pid=21357, ip=192.168.42.57)[0m num_node_features: 89
[36m(Trainer pid=21357, ip=192.168.42.57)[0m num_graph_labels: 3
[36m(Trainer pid=21357, ip=192.168.42.57)[0m train_size: 134
[36m(Trainer pid=21484, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=21484, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=21484, ip=192.168.14.54)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=21484, ip=192.168.14.54)[0m dataset_trainer_name: 2-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=21484, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f321dfb3fd0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f321eb97bd0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f321eb7e210>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=21484, ip=192.168.14.54)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=21484, ip=192.168.14.54)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=21484, ip=192.168.14.54)[0m train_size: 128[32m [repeated 2x across cluster][0m
[36m(Trainer pid=21520, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=21520, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=21520, ip=192.168.42.57)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=21520, ip=192.168.42.57)[0m dataset_trainer_name: 4-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=21520, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1e416b5110>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1e42334610>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1e42337390>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=21520, ip=192.168.42.57)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=21520, ip=192.168.42.57)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=21520, ip=192.168.42.57)[0m train_size: 125[32m [repeated 2x across cluster][0m
[36m(Trainer pid=21654, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=21654, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=21654, ip=192.168.14.54)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=21654, ip=192.168.14.54)[0m dataset_trainer_name: 6-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=21654, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd4ab308690>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd4ab712e50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd4ac09b510>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=21654, ip=192.168.14.54)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=21654, ip=192.168.14.54)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=21654, ip=192.168.14.54)[0m train_size: 115[32m [repeated 2x across cluster][0m
//Log init_time: 33462.424 ms //end
//Log Large1 init network: 3349672.0 //end
//Log Large2 init network: 4590099.0 //end
//Log Large3 init network: 2815019.0 //end
//Log Large4 init network: 5321468.0 //end
//Log Server init network: 12774110145.0 //end
//Log Initialization Communication Cost (MB): 12197.67 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 8.008 ms//end
[36m(Trainer pid=21682, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=21682, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=21682, ip=192.168.42.57)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=21682, ip=192.168.42.57)[0m dataset_trainer_name: 8-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=21682, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4647f81a10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f464894d910>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f464894e0d0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=21682, ip=192.168.42.57)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=21682, ip=192.168.42.57)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=21682, ip=192.168.42.57)[0m train_size: 112[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 9090048000.0 //end
//Log Max memory for Large2: 10529017856.0 //end
//Log Max memory for Large3: 8648437760.0 //end
//Log Max memory for Large4: 11125633024.0 //end
//Log Max memory for Server: 17477201920.0 //end
//Log Large1 network: 521378.0 //end
//Log Large2 network: 2719498.0 //end
//Log Large3 network: 571669.0 //end
//Log Large4 network: 947568.0 //end
//Log Server network: 2430268507.0 //end
//Log Total Actual Pretrain Comm Cost: 2322.22 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 333936.86600000004 ms//end
//Log Max memory for Large1: 9135890432.0 //end
//Log Max memory for Large2: 10600206336.0 //end
//Log Max memory for Large3: 8691458048.0 //end
//Log Max memory for Large4: 11204632576.0 //end
//Log Max memory for Server: 17479249920.0 //end
//Log Large1 network: 158253357.0 //end
//Log Large2 network: 235180519.0 //end
//Log Large3 network: 158235670.0 //end
//Log Large4 network: 235143292.0 //end
//Log Server network: 35941876.0 //end
//Log Total Actual Train Comm Cost: 784.64 MB //end
Train end time recorded and duration set to gauge.
              test_acc
0-IMDB-MULTI  0.666667
1-IMDB-MULTI  0.428571
2-IMDB-MULTI  0.333333
3-IMDB-MULTI  0.333333
4-IMDB-MULTI  0.533333
5-IMDB-MULTI  0.625000
6-IMDB-MULTI  0.600000
7-IMDB-MULTI  0.466667
8-IMDB-MULTI  0.600000
9-IMDB-MULTI  0.500000
Average test accuracy: 0.5097228858098424
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=25749, ip=192.168.14.62)[0m inx: 9
[36m(Trainer pid=25749, ip=192.168.14.62)[0m dataset_trainer_name: 9-IMDB-MULTI
[36m(Trainer pid=25749, ip=192.168.14.62)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9e1eaead10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9e1f4d1b90>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9e1eb56890>}
[36m(Trainer pid=25749, ip=192.168.14.62)[0m num_node_features: 89
[36m(Trainer pid=25749, ip=192.168.14.62)[0m num_graph_labels: 3
[36m(Trainer pid=25749, ip=192.168.14.62)[0m train_size: 125
[36m(Trainer pid=25749, ip=192.168.14.62)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=25749, ip=192.168.14.62)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: SelfTrain, Dataset: MUTAG, Trainers: 10
--------------------------------------------------------------------------------

Downloading https://www.chrsmrrs.com/graphkerneldatasets/MUTAG.zip
Processing...
Done!
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  MUTAG  Total number of graphs:  188
Initialization start: network data collected.
using CPU
2025-05-14 22:02:27,275	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 22:02:27,275	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 22:02:27,281	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
//Log init_time: 274.88800000000003 ms //end
//Log Large1 init network: 35291.0 //end
//Log Large2 init network: 0.0 //end
//Log Large3 init network: 0.0 //end
//Log Large4 init network: 0.0 //end
//Log Server init network: 0.0 //end
//Log Initialization Communication Cost (MB): 0.03 //end

Done setting up devices.
Running SelfTrain ...
Pretrain start time recorded.
//pretrain_time: 8.404 ms//end
[36m(Trainer pid=27597, ip=192.168.14.62)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=27597, ip=192.168.14.62)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=27597, ip=192.168.14.62)[0m inx: 3
[36m(Trainer pid=27597, ip=192.168.14.62)[0m dataset_trainer_name: 3-MUTAG
[36m(Trainer pid=27597, ip=192.168.14.62)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd2da4b3ed0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd2da2fd210>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd2da2fd890>}
[36m(Trainer pid=27597, ip=192.168.14.62)[0m num_node_features: 7
[36m(Trainer pid=27597, ip=192.168.14.62)[0m num_graph_labels: 2
[36m(Trainer pid=27597, ip=192.168.14.62)[0m train_size: 15
//Log Max memory for Large1: 6380347392.0 //end
//Log Max memory for Large2: 5652287488.0 //end
//Log Max memory for Large3: 6061117440.0 //end
//Log Max memory for Large4: 5941321728.0 //end
//Log Max memory for Server: 17340559360.0 //end
//Log Large1 network: 660476.0 //end
//Log Large2 network: 747657.0 //end
//Log Large3 network: 789897.0 //end
//Log Large4 network: 566029.0 //end
//Log Server network: 66182371.0 //end
//Log Total Actual Pretrain Comm Cost: 65.75 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
  > 1-MUTAG done.
trainingaccs: 0.7857142857142857, valaccs: 1.0, acc: 0.5
  > 3-MUTAG done.
trainingaccs: 0.3333333333333333, valaccs: 0.0, acc: 0.5
  > 7-MUTAG done.
trainingaccs: 0.3333333333333333, valaccs: 0.0, acc: 0.0
  > 2-MUTAG done.
trainingaccs: 0.4, valaccs: 1.0, acc: 0.5
  > 9-MUTAG done.
trainingaccs: 0.6, valaccs: 1.0, acc: 0.5
  > 0-MUTAG done.
trainingaccs: 0.42857142857142855, valaccs: 0.5, acc: 0.5
  > 5-MUTAG done.
trainingaccs: 0.42857142857142855, valaccs: 1.0, acc: 1.0
  > 6-MUTAG done.
trainingaccs: 0.4375, valaccs: 0.5, acc: 0.3333333333333333
  > 4-MUTAG done.
trainingaccs: 0.5333333333333333, valaccs: 1.0, acc: 0.5
  > 8-MUTAG done.
trainingaccs: 0.42857142857142855, valaccs: 1.0, acc: 0.5
//train_time: 41.080999999999996 ms//end
//Log Max memory for Large1: 6388137984.0 //end
//Log Max memory for Large2: 5657665536.0 //end
//Log Max memory for Large3: 6067728384.0 //end
//Log Max memory for Large4: 5942489088.0 //end
//Log Max memory for Server: 17339576320.0 //end
//Log Large1 network: 637130.0 //end
//Log Large2 network: 618465.0 //end
//Log Large3 network: 640002.0 //end
//Log Large4 network: 569713.0 //end
//Log Server network: 1053070.0 //end
//Log Total Actual Train Comm Cost: 3.36 MB //end
Train end time recorded and duration set to gauge.
         test_acc
1-MUTAG  0.500000
3-MUTAG  0.500000
7-MUTAG  0.000000
2-MUTAG  0.500000
9-MUTAG  0.500000
0-MUTAG  0.500000
5-MUTAG  1.000000
6-MUTAG  0.333333
4-MUTAG  0.500000
8-MUTAG  0.500000
Average test accuracy: 0.48639455782312924
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 2.22 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 2.22 MB //end
[36m(Trainer pid=23561, ip=192.168.42.57)[0m inx: 6[32m [repeated 9x across cluster][0m
[36m(Trainer pid=23561, ip=192.168.42.57)[0m dataset_trainer_name: 6-MUTAG[32m [repeated 9x across cluster][0m
[36m(Trainer pid=23561, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f03066ae310>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f03064e4d10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f03064e5a10>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=23561, ip=192.168.42.57)[0m num_node_features: 7[32m [repeated 9x across cluster][0m
[36m(Trainer pid=23561, ip=192.168.42.57)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=23561, ip=192.168.42.57)[0m train_size: 16[32m [repeated 9x across cluster][0m
[36m(Trainer pid=23533, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=23533, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: FedAvg, Dataset: MUTAG, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  MUTAG  Total number of graphs:  188
Initialization start: network data collected.
using CPU
2025-05-14 22:03:32,976	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 22:03:32,976	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 22:03:32,983	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
//Log init_time: 278.185 ms //end
//Log Large1 init network: 0.0 //end
//Log Large2 init network: 0.0 //end
//Log Large3 init network: 0.0 //end
//Log Large4 init network: 0.0 //end
//Log Server init network: 0.0 //end
//Log Initialization Communication Cost (MB): 0.00 //end

Done setting up devices.
Running FedAvg ...
Pretrain start time recorded.
//pretrain_time: 7.603999999999999 ms//end
[36m(Trainer pid=28128, ip=192.168.14.62)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=28128, ip=192.168.14.62)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=28128, ip=192.168.14.62)[0m inx: 5
[36m(Trainer pid=28128, ip=192.168.14.62)[0m dataset_trainer_name: 5-MUTAG
[36m(Trainer pid=28128, ip=192.168.14.62)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd9d31c2610>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd9d2be9450>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd9d2bea250>}
[36m(Trainer pid=28128, ip=192.168.14.62)[0m num_node_features: 7
[36m(Trainer pid=28128, ip=192.168.14.62)[0m num_graph_labels: 2
[36m(Trainer pid=28128, ip=192.168.14.62)[0m train_size: 14
//Log Max memory for Large1: 5962645504.0 //end
//Log Max memory for Large2: 6100180992.0 //end
//Log Max memory for Large3: 5644668928.0 //end
//Log Max memory for Large4: 6385299456.0 //end
//Log Max memory for Server: 17344143360.0 //end
//Log Large1 network: 571751.0 //end
//Log Large2 network: 766319.0 //end
//Log Large3 network: 602533.0 //end
//Log Large4 network: 717173.0 //end
//Log Server network: 66564830.0 //end
//Log Total Actual Pretrain Comm Cost: 66.02 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 218083.13100000002 ms//end
//Log Max memory for Large1: 5965037568.0 //end
//Log Max memory for Large2: 6119841792.0 //end
//Log Max memory for Large3: 5658529792.0 //end
//Log Max memory for Large4: 6396104704.0 //end
//Log Max memory for Server: 17354354688.0 //end
//Log Large1 network: 58963140.0 //end
//Log Large2 network: 87189965.0 //end
//Log Large3 network: 58889664.0 //end
//Log Large4 network: 87333425.0 //end
//Log Server network: 141390014.0 //end
//Log Total Actual Train Comm Cost: 413.67 MB //end
Train end time recorded and duration set to gauge.
         test_acc
0-MUTAG  1.000000
2-MUTAG  0.500000
6-MUTAG  0.666667
8-MUTAG  1.000000
9-MUTAG  0.500000
3-MUTAG  0.500000
7-MUTAG  1.000000
4-MUTAG  0.500000
1-MUTAG  0.500000
5-MUTAG  1.000000
Average test accuracy: 0.7210884353741497
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=28126, ip=192.168.14.62)[0m inx: 1[32m [repeated 9x across cluster][0m
[36m(Trainer pid=28126, ip=192.168.14.62)[0m dataset_trainer_name: 1-MUTAG[32m [repeated 9x across cluster][0m
[36m(Trainer pid=28126, ip=192.168.14.62)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0a5029acd0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0a500d88d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0a500d9a90>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=28126, ip=192.168.14.62)[0m num_node_features: 7[32m [repeated 9x across cluster][0m
[36m(Trainer pid=28126, ip=192.168.14.62)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=28126, ip=192.168.14.62)[0m train_size: 14[32m [repeated 9x across cluster][0m
[36m(Trainer pid=28126, ip=192.168.14.62)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=28126, ip=192.168.14.62)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: FedProx, Dataset: MUTAG, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  MUTAG  Total number of graphs:  188
Initialization start: network data collected.
using CPU
2025-05-14 22:08:16,550	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 22:08:16,550	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 22:08:16,556	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
//Log init_time: 266.721 ms //end
//Log Large1 init network: 0.0 //end
//Log Large2 init network: 0.0 //end
//Log Large3 init network: 0.0 //end
//Log Large4 init network: 0.0 //end
//Log Server init network: 0.0 //end
//Log Initialization Communication Cost (MB): 0.00 //end

Done setting up devices.
Running FedAvg ...
Pretrain start time recorded.
//pretrain_time: 7.157 ms//end
[36m(Trainer pid=25611, ip=192.168.39.156)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=25611, ip=192.168.39.156)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=25611, ip=192.168.39.156)[0m inx: 1
[36m(Trainer pid=25611, ip=192.168.39.156)[0m dataset_trainer_name: 1-MUTAG
[36m(Trainer pid=25611, ip=192.168.39.156)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7efb7050b1d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7efb703441d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7efb70345410>}
[36m(Trainer pid=25611, ip=192.168.39.156)[0m num_node_features: 7
[36m(Trainer pid=25611, ip=192.168.39.156)[0m num_graph_labels: 2
[36m(Trainer pid=25611, ip=192.168.39.156)[0m train_size: 14
//Log Max memory for Large1: 6379081728.0 //end
//Log Max memory for Large2: 5661847552.0 //end
//Log Max memory for Large3: 6071672832.0 //end
//Log Max memory for Large4: 5953204224.0 //end
//Log Max memory for Server: 17355644928.0 //end
//Log Large1 network: 758528.0 //end
//Log Large2 network: 756345.0 //end
//Log Large3 network: 800898.0 //end
//Log Large4 network: 581418.0 //end
//Log Server network: 66125190.0 //end
//Log Total Actual Pretrain Comm Cost: 65.82 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 219321.54 ms//end
//Log Max memory for Large1: 6395781120.0 //end
//Log Max memory for Large2: 5673058304.0 //end
//Log Max memory for Large3: 6082859008.0 //end
//Log Max memory for Large4: 5964505088.0 //end
//Log Max memory for Server: 17349128192.0 //end
//Log Large1 network: 86637053.0 //end
//Log Large2 network: 59817037.0 //end
//Log Large3 network: 86418089.0 //end
//Log Large4 network: 59717612.0 //end
//Log Server network: 141469013.0 //end
//Log Total Actual Train Comm Cost: 413.95 MB //end
Train end time recorded and duration set to gauge.
         test_acc
2-MUTAG  0.500000
0-MUTAG  1.000000
3-MUTAG  0.000000
5-MUTAG  1.000000
6-MUTAG  0.666667
7-MUTAG  1.000000
8-MUTAG  1.000000
1-MUTAG  0.500000
9-MUTAG  0.500000
4-MUTAG  0.500000
Average test accuracy: 0.6666666666666666
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=25651, ip=192.168.14.54)[0m inx: 4[32m [repeated 9x across cluster][0m
[36m(Trainer pid=25651, ip=192.168.14.54)[0m dataset_trainer_name: 4-MUTAG[32m [repeated 9x across cluster][0m
[36m(Trainer pid=25651, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f012ce382d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f012ce79b10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f012ce7a8d0>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=25651, ip=192.168.14.54)[0m num_node_features: 7[32m [repeated 9x across cluster][0m
[36m(Trainer pid=25651, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=25651, ip=192.168.14.54)[0m train_size: 15[32m [repeated 9x across cluster][0m
[36m(Trainer pid=25651, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=25651, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL, Dataset: MUTAG, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  MUTAG  Total number of graphs:  188
Initialization start: network data collected.
using CPU
2025-05-14 22:13:01,429	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 22:13:01,429	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 22:13:01,436	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
//Log init_time: 301.272 ms //end
//Log Large1 init network: 0.0 //end
//Log Large2 init network: 0.0 //end
//Log Large3 init network: 35112.0 //end
//Log Large4 init network: 0.0 //end
//Log Server init network: 0.0 //end
//Log Initialization Communication Cost (MB): 0.03 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 6.792000000000001 ms//end
[36m(Trainer pid=27194, ip=192.168.39.156)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=27194, ip=192.168.39.156)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=27194, ip=192.168.39.156)[0m inx: 3
[36m(Trainer pid=27194, ip=192.168.39.156)[0m dataset_trainer_name: 3-MUTAG
[36m(Trainer pid=27194, ip=192.168.39.156)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fcc09487d50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fcc094d0b50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fcc094d16d0>}
[36m(Trainer pid=27194, ip=192.168.39.156)[0m num_node_features: 7
[36m(Trainer pid=27194, ip=192.168.39.156)[0m num_graph_labels: 2
[36m(Trainer pid=27194, ip=192.168.39.156)[0m train_size: 15
//Log Max memory for Large1: 5941329920.0 //end
//Log Max memory for Large2: 6083018752.0 //end
//Log Max memory for Large3: 5632942080.0 //end
//Log Max memory for Large4: 6368886784.0 //end
//Log Max memory for Server: 17372610560.0 //end
//Log Large1 network: 534653.0 //end
//Log Large2 network: 695086.0 //end
//Log Large3 network: 537345.0 //end
//Log Large4 network: 629353.0 //end
//Log Server network: 65982708.0 //end
//Log Total Actual Pretrain Comm Cost: 65.21 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 99389.20199999999 ms//end
//Log Max memory for Large1: 5946482688.0 //end
//Log Max memory for Large2: 6085558272.0 //end
//Log Max memory for Large3: 5645336576.0 //end
//Log Max memory for Large4: 6369898496.0 //end
//Log Max memory for Server: 17381003264.0 //end
//Log Large1 network: 174842360.0 //end
//Log Large2 network: 261044015.0 //end
//Log Large3 network: 174543118.0 //end
//Log Large4 network: 261475655.0 //end
//Log Server network: 28165077.0 //end
//Log Total Actual Train Comm Cost: 858.37 MB //end
Train end time recorded and duration set to gauge.
         test_acc
0-MUTAG  0.500000
1-MUTAG  0.500000
2-MUTAG  0.500000
3-MUTAG  0.500000
4-MUTAG  0.500000
5-MUTAG  0.500000
6-MUTAG  0.666667
7-MUTAG  1.000000
8-MUTAG  1.000000
9-MUTAG  1.000000
Average test accuracy: 0.6678004535147392
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=31170, ip=192.168.14.62)[0m inx: 5[32m [repeated 9x across cluster][0m
[36m(Trainer pid=31170, ip=192.168.14.62)[0m dataset_trainer_name: 5-MUTAG[32m [repeated 9x across cluster][0m
[36m(Trainer pid=31170, ip=192.168.14.62)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3c77a7cc90>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3c77abcad0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3c77abd750>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=31170, ip=192.168.14.62)[0m num_node_features: 7[32m [repeated 9x across cluster][0m
[36m(Trainer pid=31170, ip=192.168.14.62)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=31170, ip=192.168.14.62)[0m train_size: 14[32m [repeated 9x across cluster][0m
[36m(Trainer pid=31170, ip=192.168.14.62)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=31170, ip=192.168.14.62)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+, Dataset: MUTAG, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  MUTAG  Total number of graphs:  188
Initialization start: network data collected.
using CPU
2025-05-14 22:15:46,356	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 22:15:46,356	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 22:15:46,363	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
//Log init_time: 262.13199999999995 ms //end
//Log Large1 init network: 0.0 //end
//Log Large2 init network: 0.0 //end
//Log Large3 init network: 0.0 //end
//Log Large4 init network: 0.0 //end
//Log Server init network: 0.0 //end
//Log Initialization Communication Cost (MB): 0.00 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 6.518999999999999 ms//end
[36m(Trainer pid=28147, ip=192.168.39.156)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=28147, ip=192.168.39.156)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=28147, ip=192.168.39.156)[0m inx: 1
[36m(Trainer pid=28147, ip=192.168.39.156)[0m dataset_trainer_name: 1-MUTAG
[36m(Trainer pid=28147, ip=192.168.39.156)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa6743d38d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa673defcd0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa673df9150>}
[36m(Trainer pid=28147, ip=192.168.39.156)[0m num_node_features: 7
[36m(Trainer pid=28147, ip=192.168.39.156)[0m num_graph_labels: 2
[36m(Trainer pid=28147, ip=192.168.39.156)[0m train_size: 14
//Log Max memory for Large1: 6367117312.0 //end
//Log Max memory for Large2: 5657714688.0 //end
//Log Max memory for Large3: 6066868224.0 //end
//Log Max memory for Large4: 5944324096.0 //end
//Log Max memory for Server: 17404952576.0 //end
//Log Large1 network: 644749.0 //end
//Log Large2 network: 659423.0 //end
//Log Large3 network: 637506.0 //end
//Log Large4 network: 596706.0 //end
//Log Server network: 66086761.0 //end
//Log Total Actual Pretrain Comm Cost: 65.45 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 98888.002 ms//end
//Log Max memory for Large1: 6381113344.0 //end
//Log Max memory for Large2: 5664800768.0 //end
//Log Max memory for Large3: 6079954944.0 //end
//Log Max memory for Large4: 5951344640.0 //end
//Log Max memory for Server: 17393033216.0 //end
//Log Large1 network: 261469245.0 //end
//Log Large2 network: 174696892.0 //end
//Log Large3 network: 260894114.0 //end
//Log Large4 network: 174784848.0 //end
//Log Server network: 28057927.0 //end
//Log Total Actual Train Comm Cost: 858.21 MB //end
Train end time recorded and duration set to gauge.
         test_acc
0-MUTAG  1.000000
1-MUTAG  0.500000
2-MUTAG  1.000000
3-MUTAG  0.500000
4-MUTAG  0.500000
5-MUTAG  1.000000
6-MUTAG  1.000000
7-MUTAG  0.500000
8-MUTAG  0.666667
9-MUTAG  0.500000
Average test accuracy: 0.7165532879818594
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=28200, ip=192.168.14.54)[0m inx: 8[32m [repeated 9x across cluster][0m
[36m(Trainer pid=28200, ip=192.168.14.54)[0m dataset_trainer_name: 8-MUTAG[32m [repeated 9x across cluster][0m
[36m(Trainer pid=28200, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe4e29d3550>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe4d873ca10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe4d873dc50>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=28200, ip=192.168.14.54)[0m num_node_features: 7[32m [repeated 9x across cluster][0m
[36m(Trainer pid=28200, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=28200, ip=192.168.14.54)[0m train_size: 14[32m [repeated 9x across cluster][0m
[36m(Trainer pid=28200, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=28200, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+dWs, Dataset: MUTAG, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  MUTAG  Total number of graphs:  188
Initialization start: network data collected.
using CPU
2025-05-14 22:18:30,836	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 22:18:30,836	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 22:18:30,844	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
//Log init_time: 277.005 ms //end
//Log Large1 init network: 0.0 //end
//Log Large2 init network: 0.0 //end
//Log Large3 init network: 0.0 //end
//Log Large4 init network: 0.0 //end
//Log Server init network: 0.0 //end
//Log Initialization Communication Cost (MB): 0.00 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 6.471 ms//end
[36m(Trainer pid=29224, ip=192.168.39.156)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=29224, ip=192.168.39.156)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=29224, ip=192.168.39.156)[0m inx: 3
[36m(Trainer pid=29224, ip=192.168.39.156)[0m dataset_trainer_name: 3-MUTAG
[36m(Trainer pid=29224, ip=192.168.39.156)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1f2d597250>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1f2d3e4610>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1f2d3e4f90>}
[36m(Trainer pid=29224, ip=192.168.39.156)[0m num_node_features: 7
[36m(Trainer pid=29224, ip=192.168.39.156)[0m num_graph_labels: 2
[36m(Trainer pid=29224, ip=192.168.39.156)[0m train_size: 15
//Log Max memory for Large1: 5937397760.0 //end
//Log Max memory for Large2: 6087655424.0 //end
//Log Max memory for Large3: 5625815040.0 //end
//Log Max memory for Large4: 6374928384.0 //end
//Log Max memory for Server: 17419231232.0 //end
//Log Large1 network: 598068.0 //end
//Log Large2 network: 720440.0 //end
//Log Large3 network: 562595.0 //end
//Log Large4 network: 679387.0 //end
//Log Server network: 66004463.0 //end
//Log Total Actual Pretrain Comm Cost: 65.39 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 99735.401 ms//end
//Log Max memory for Large1: 5941817344.0 //end
//Log Max memory for Large2: 6090633216.0 //end
//Log Max memory for Large3: 5638459392.0 //end
//Log Max memory for Large4: 6378323968.0 //end
//Log Max memory for Server: 17420795904.0 //end
//Log Large1 network: 174631920.0 //end
//Log Large2 network: 261071951.0 //end
//Log Large3 network: 174560840.0 //end
//Log Large4 network: 261665107.0 //end
//Log Server network: 28258197.0 //end
//Log Total Actual Train Comm Cost: 858.49 MB //end
Train end time recorded and duration set to gauge.
         test_acc
0-MUTAG  0.500000
1-MUTAG  0.500000
2-MUTAG  1.000000
3-MUTAG  0.500000
4-MUTAG  0.500000
5-MUTAG  0.500000
6-MUTAG  1.000000
7-MUTAG  0.666667
8-MUTAG  1.000000
9-MUTAG  0.500000
Average test accuracy: 0.6700680272108843
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=33209, ip=192.168.14.62)[0m inx: 9[32m [repeated 9x across cluster][0m
[36m(Trainer pid=33209, ip=192.168.14.62)[0m dataset_trainer_name: 9-MUTAG[32m [repeated 9x across cluster][0m
[36m(Trainer pid=33209, ip=192.168.14.62)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f47c0395b90>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f47c01cc8d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f47c01cded0>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=33209, ip=192.168.14.62)[0m num_node_features: 7[32m [repeated 9x across cluster][0m
[36m(Trainer pid=33209, ip=192.168.14.62)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=33209, ip=192.168.14.62)[0m train_size: 15[32m [repeated 9x across cluster][0m
[36m(Trainer pid=33209, ip=192.168.14.62)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=33209, ip=192.168.14.62)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: SelfTrain, Dataset: BZR, Trainers: 10
--------------------------------------------------------------------------------

Downloading https://www.chrsmrrs.com/graphkerneldatasets/BZR.zip
Processing...
Done!
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  BZR  Total number of graphs:  405
Initialization start: network data collected.
using CPU
2025-05-14 22:21:18,001	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 22:21:18,002	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 22:21:18,007	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
//Log init_time: 3084.0930000000003 ms //end
//Log Large1 init network: 36040.0 //end
//Log Large2 init network: 34175.0 //end
//Log Large3 init network: 198990.0 //end
//Log Large4 init network: 37982.0 //end
//Log Server init network: 103126.0 //end
//Log Initialization Communication Cost (MB): 0.39 //end

Done setting up devices.
Running SelfTrain ...
Pretrain start time recorded.
//pretrain_time: 14.172 ms//end
[36m(Trainer pid=30239, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=30239, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=30239, ip=192.168.14.54)[0m inx: 0
[36m(Trainer pid=30239, ip=192.168.14.54)[0m dataset_trainer_name: 0-BZR
[36m(Trainer pid=30239, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f98793edb10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9879234a50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f98792360d0>}
[36m(Trainer pid=30239, ip=192.168.14.54)[0m num_node_features: 53
[36m(Trainer pid=30239, ip=192.168.14.54)[0m num_graph_labels: 2
[36m(Trainer pid=30239, ip=192.168.14.54)[0m train_size: 32
//Log Max memory for Large1: 6917107712.0 //end
//Log Max memory for Large2: 6039662592.0 //end
//Log Max memory for Large3: 6595706880.0 //end
//Log Max memory for Large4: 6332383232.0 //end
//Log Max memory for Server: 17443794944.0 //end
//Log Large1 network: 1146951.0 //end
//Log Large2 network: 1096570.0 //end
//Log Large3 network: 878175.0 //end
//Log Large4 network: 1129312.0 //end
//Log Server network: 1521785927.0 //end
//Log Total Actual Pretrain Comm Cost: 1455.34 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
  > 5-BZR done.
trainingaccs: 0.46875, valaccs: 0.5, acc: 0.5
  > 1-BZR done.
trainingaccs: 0.53125, valaccs: 1.0, acc: 0.75
  > 9-BZR done.
trainingaccs: 0.71875, valaccs: 1.0, acc: 0.75
  > 0-BZR done.
trainingaccs: 0.5, valaccs: 1.0, acc: 0.75
  > 2-BZR done.
trainingaccs: 0.34375, valaccs: 0.75, acc: 0.75
  > 8-BZR done.
trainingaccs: 0.5, valaccs: 0.5, acc: 0.75
  > 4-BZR done.
trainingaccs: 0.71875, valaccs: 1.0, acc: 0.8
  > 3-BZR done.
trainingaccs: 1.0, valaccs: 1.0, acc: 1.0
  > 7-BZR done.
trainingaccs: 0.5625, valaccs: 0.75, acc: 0.6
  > 6-BZR done.
trainingaccs: 0.5151515151515151, valaccs: 0.75, acc: 0.6
//train_time: 42.296 ms//end
//Log Max memory for Large1: 6929879040.0 //end
//Log Max memory for Large2: 6048391168.0 //end
//Log Max memory for Large3: 6609879040.0 //end
//Log Max memory for Large4: 6339338240.0 //end
//Log Max memory for Server: 17442852864.0 //end
//Log Large1 network: 593948.0 //end
//Log Large2 network: 577629.0 //end
//Log Large3 network: 596013.0 //end
//Log Large4 network: 529186.0 //end
//Log Server network: 1139115.0 //end
//Log Total Actual Train Comm Cost: 3.28 MB //end
Train end time recorded and duration set to gauge.
       test_acc
5-BZR      0.50
1-BZR      0.75
9-BZR      0.75
0-BZR      0.75
2-BZR      0.75
8-BZR      0.75
4-BZR      0.80
3-BZR      1.00
7-BZR      0.60
6-BZR      0.60
Average test accuracy: 0.725233644859813
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 2.22 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 2.22 MB //end
[36m(Trainer pid=30380, ip=192.168.39.156)[0m inx: 9[32m [repeated 9x across cluster][0m
[36m(Trainer pid=30380, ip=192.168.39.156)[0m dataset_trainer_name: 9-BZR[32m [repeated 9x across cluster][0m
[36m(Trainer pid=30380, ip=192.168.39.156)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f135528e4d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1354cc04d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1354cc21d0>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=30380, ip=192.168.39.156)[0m num_node_features: 53[32m [repeated 9x across cluster][0m
[36m(Trainer pid=30380, ip=192.168.39.156)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=30380, ip=192.168.39.156)[0m train_size: 32[32m [repeated 9x across cluster][0m
[36m(Trainer pid=30380, ip=192.168.39.156)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=30380, ip=192.168.39.156)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: FedAvg, Dataset: BZR, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  BZR  Total number of graphs:  405
Initialization start: network data collected.
using CPU
2025-05-14 22:22:26,460	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 22:22:26,461	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 22:22:26,468	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
//Log init_time: 3140.02 ms //end
//Log Large1 init network: 185928.0 //end
//Log Large2 init network: 261789.0 //end
//Log Large3 init network: 331768.0 //end
//Log Large4 init network: 155590.0 //end
//Log Server init network: 300392208.0 //end
//Log Initialization Communication Cost (MB): 287.37 //end

Done setting up devices.
Running FedAvg ...
Pretrain start time recorded.
//pretrain_time: 9.459 ms//end
[36m(Trainer pid=30796, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=30796, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=30796, ip=192.168.42.57)[0m inx: 0
[36m(Trainer pid=30796, ip=192.168.42.57)[0m dataset_trainer_name: 0-BZR
[36m(Trainer pid=30796, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1329a43b90>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1329aa4550>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1329aa6050>}
[36m(Trainer pid=30796, ip=192.168.42.57)[0m num_node_features: 53
[36m(Trainer pid=30796, ip=192.168.42.57)[0m num_graph_labels: 2
[36m(Trainer pid=30796, ip=192.168.42.57)[0m train_size: 32
//Log Max memory for Large1: 6330957824.0 //end
//Log Max memory for Large2: 6613110784.0 //end
//Log Max memory for Large3: 6017724416.0 //end
//Log Max memory for Large4: 6903152640.0 //end
//Log Max memory for Server: 17443422208.0 //end
//Log Large1 network: 647095.0 //end
//Log Large2 network: 1092261.0 //end
//Log Large3 network: 553702.0 //end
//Log Large4 network: 1040987.0 //end
//Log Server network: 1221644878.0 //end
//Log Total Actual Pretrain Comm Cost: 1168.23 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 218739.09900000002 ms//end
//Log Max memory for Large1: 6327119872.0 //end
//Log Max memory for Large2: 6621384704.0 //end
//Log Max memory for Large3: 6019010560.0 //end
//Log Max memory for Large4: 6921461760.0 //end
//Log Max memory for Server: 17449455616.0 //end
//Log Large1 network: 58919929.0 //end
//Log Large2 network: 87293884.0 //end
//Log Large3 network: 58747695.0 //end
//Log Large4 network: 87471176.0 //end
//Log Server network: 142274545.0 //end
//Log Total Actual Train Comm Cost: 414.57 MB //end
Train end time recorded and duration set to gauge.
       test_acc
0-BZR      0.75
2-BZR      0.75
7-BZR      0.60
1-BZR      0.75
4-BZR      0.80
8-BZR      0.75
9-BZR      0.75
3-BZR      1.00
6-BZR      0.80
5-BZR      0.75
Average test accuracy: 0.7699376947040498
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=35033, ip=192.168.14.62)[0m inx: 9[32m [repeated 9x across cluster][0m
[36m(Trainer pid=35033, ip=192.168.14.62)[0m dataset_trainer_name: 9-BZR[32m [repeated 9x across cluster][0m
[36m(Trainer pid=35033, ip=192.168.14.62)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd4d9549090>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd4d959c5d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd4d959e390>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=35033, ip=192.168.14.62)[0m num_node_features: 53[32m [repeated 9x across cluster][0m
[36m(Trainer pid=35033, ip=192.168.14.62)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=35033, ip=192.168.14.62)[0m train_size: 32[32m [repeated 9x across cluster][0m
[36m(Trainer pid=35033, ip=192.168.14.62)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=35033, ip=192.168.14.62)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: FedProx, Dataset: BZR, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  BZR  Total number of graphs:  405
Initialization start: network data collected.
using CPU
2025-05-14 22:27:13,579	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 22:27:13,579	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 22:27:13,586	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
//Log init_time: 3155.618 ms //end
//Log Large1 init network: 165963.0 //end
//Log Large2 init network: 40551.0 //end
//Log Large3 init network: 194320.0 //end
//Log Large4 init network: 36211.0 //end
//Log Server init network: 0.0 //end
//Log Initialization Communication Cost (MB): 0.42 //end

Done setting up devices.
Running FedAvg ...
Pretrain start time recorded.
//pretrain_time: 22.517 ms//end
[36m(Trainer pid=32375, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=32375, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=32375, ip=192.168.14.54)[0m inx: 0
[36m(Trainer pid=32375, ip=192.168.14.54)[0m dataset_trainer_name: 0-BZR
[36m(Trainer pid=32375, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9c8a7636d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9c8a5bae50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9c8a5d0610>}
[36m(Trainer pid=32375, ip=192.168.14.54)[0m num_node_features: 53
[36m(Trainer pid=32375, ip=192.168.14.54)[0m num_graph_labels: 2
[36m(Trainer pid=32375, ip=192.168.14.54)[0m train_size: 32
//Log Max memory for Large1: 6911188992.0 //end
//Log Max memory for Large2: 6040375296.0 //end
//Log Max memory for Large3: 6588133376.0 //end
//Log Max memory for Large4: 6325559296.0 //end
//Log Max memory for Server: 17454907392.0 //end
//Log Large1 network: 1105543.0 //end
//Log Large2 network: 1072511.0 //end
//Log Large3 network: 806723.0 //end
//Log Large4 network: 936045.0 //end
//Log Server network: 1522003126.0 //end
//Log Total Actual Pretrain Comm Cost: 1455.23 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 219987.828 ms//end
//Log Max memory for Large1: 6921465856.0 //end
//Log Max memory for Large2: 6040940544.0 //end
//Log Max memory for Large3: 6603350016.0 //end
//Log Max memory for Large4: 6330089472.0 //end
//Log Max memory for Server: 17432932352.0 //end
//Log Large1 network: 86577677.0 //end
//Log Large2 network: 59627042.0 //end
//Log Large3 network: 86593571.0 //end
//Log Large4 network: 59539317.0 //end
//Log Server network: 142302258.0 //end
//Log Total Actual Train Comm Cost: 414.50 MB //end
Train end time recorded and duration set to gauge.
       test_acc
1-BZR      0.75
7-BZR      0.60
6-BZR      0.60
5-BZR      0.50
9-BZR      0.75
2-BZR      0.75
4-BZR      0.80
0-BZR      0.75
3-BZR      1.00
8-BZR      0.75
Average test accuracy: 0.7252336448598131
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=32516, ip=192.168.39.156)[0m inx: 9[32m [repeated 9x across cluster][0m
[36m(Trainer pid=32516, ip=192.168.39.156)[0m dataset_trainer_name: 9-BZR[32m [repeated 9x across cluster][0m
[36m(Trainer pid=32516, ip=192.168.39.156)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7eef81648a90>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7eef81348250>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7eef81349cd0>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=32516, ip=192.168.39.156)[0m num_node_features: 53[32m [repeated 9x across cluster][0m
[36m(Trainer pid=32516, ip=192.168.39.156)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=32516, ip=192.168.39.156)[0m train_size: 32[32m [repeated 9x across cluster][0m
[36m(Trainer pid=32516, ip=192.168.39.156)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=32516, ip=192.168.39.156)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL, Dataset: BZR, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  BZR  Total number of graphs:  405
Initialization start: network data collected.
using CPU
2025-05-14 22:32:02,100	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 22:32:02,100	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 22:32:02,108	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
//Log init_time: 3200.566 ms //end
//Log Large1 init network: 191783.0 //end
//Log Large2 init network: 144446.0 //end
//Log Large3 init network: 28074.0 //end
//Log Large4 init network: 475320.0 //end
//Log Server init network: 451602181.0 //end
//Log Initialization Communication Cost (MB): 431.48 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 6.869 ms//end
[36m(Trainer pid=33873, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=33873, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=33873, ip=192.168.42.57)[0m inx: 0
[36m(Trainer pid=33873, ip=192.168.42.57)[0m dataset_trainer_name: 0-BZR
[36m(Trainer pid=33873, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f44877e0790>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f448462ca10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f448462df90>}
[36m(Trainer pid=33873, ip=192.168.42.57)[0m num_node_features: 53
[36m(Trainer pid=33873, ip=192.168.42.57)[0m num_graph_labels: 2
[36m(Trainer pid=33873, ip=192.168.42.57)[0m train_size: 32
//Log Max memory for Large1: 6322159616.0 //end
//Log Max memory for Large2: 6610591744.0 //end
//Log Max memory for Large3: 6009421824.0 //end
//Log Max memory for Large4: 6905286656.0 //end
//Log Max memory for Server: 17482006528.0 //end
//Log Large1 network: 648746.0 //end
//Log Large2 network: 1259134.0 //end
//Log Large3 network: 848560.0 //end
//Log Large4 network: 755790.0 //end
//Log Server network: 1072386455.0 //end
//Log Total Actual Pretrain Comm Cost: 1026.06 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 101592.56000000001 ms//end
//Log Max memory for Large1: 6326173696.0 //end
//Log Max memory for Large2: 6615535616.0 //end
//Log Max memory for Large3: 6017187840.0 //end
//Log Max memory for Large4: 6910783488.0 //end
//Log Max memory for Server: 17467224064.0 //end
//Log Large1 network: 181708447.0 //end
//Log Large2 network: 270612835.0 //end
//Log Large3 network: 180867777.0 //end
//Log Large4 network: 270347849.0 //end
//Log Server network: 28933421.0 //end
//Log Total Actual Train Comm Cost: 889.27 MB //end
Train end time recorded and duration set to gauge.
       test_acc
0-BZR      1.00
1-BZR      1.00
2-BZR      1.00
3-BZR      0.75
4-BZR      0.75
5-BZR      0.80
6-BZR      0.75
7-BZR      0.75
8-BZR      0.80
9-BZR      1.00
Average test accuracy: 0.8596573208722741
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=38109, ip=192.168.14.62)[0m inx: 9[32m [repeated 9x across cluster][0m
[36m(Trainer pid=38109, ip=192.168.14.62)[0m dataset_trainer_name: 9-BZR[32m [repeated 9x across cluster][0m
[36m(Trainer pid=38109, ip=192.168.14.62)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f28bb3351d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f28bb38c490>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f28bb38e010>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=38109, ip=192.168.14.62)[0m num_node_features: 53[32m [repeated 9x across cluster][0m
[36m(Trainer pid=38109, ip=192.168.14.62)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=38109, ip=192.168.14.62)[0m train_size: 32[32m [repeated 9x across cluster][0m
[36m(Trainer pid=38109, ip=192.168.14.62)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=38109, ip=192.168.14.62)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+, Dataset: BZR, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  BZR  Total number of graphs:  405
Initialization start: network data collected.
using CPU
2025-05-14 22:34:52,395	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 22:34:52,395	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 22:34:52,403	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
//Log init_time: 3105.263 ms //end
//Log Large1 init network: 349321.0 //end
//Log Large2 init network: 269640.0 //end
//Log Large3 init network: 355803.0 //end
//Log Large4 init network: 157617.0 //end
//Log Server init network: 76936.0 //end
//Log Initialization Communication Cost (MB): 1.15 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 11.663 ms//end
[36m(Trainer pid=34960, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=34960, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=34960, ip=192.168.14.54)[0m inx: 0
[36m(Trainer pid=34960, ip=192.168.14.54)[0m dataset_trainer_name: 0-BZR
[36m(Trainer pid=34960, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc9e77384d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc9e71f48d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc9e71f6450>}
[36m(Trainer pid=34960, ip=192.168.14.54)[0m num_node_features: 53
[36m(Trainer pid=34960, ip=192.168.14.54)[0m num_graph_labels: 2
[36m(Trainer pid=34960, ip=192.168.14.54)[0m train_size: 32
//Log Max memory for Large1: 6909403136.0 //end
//Log Max memory for Large2: 6043770880.0 //end
//Log Max memory for Large3: 6583566336.0 //end
//Log Max memory for Large4: 6329282560.0 //end
//Log Max memory for Server: 17474396160.0 //end
//Log Large1 network: 691732.0 //end
//Log Large2 network: 793204.0 //end
//Log Large3 network: 735107.0 //end
//Log Large4 network: 705059.0 //end
//Log Server network: 1522560642.0 //end
//Log Total Actual Pretrain Comm Cost: 1454.82 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 103209.022 ms//end
//Log Max memory for Large1: 6913306624.0 //end
//Log Max memory for Large2: 6039203840.0 //end
//Log Max memory for Large3: 6590361600.0 //end
//Log Max memory for Large4: 6341173248.0 //end
//Log Max memory for Server: 17467236352.0 //end
//Log Large1 network: 270414876.0 //end
//Log Large2 network: 181151956.0 //end
//Log Large3 network: 270565210.0 //end
//Log Large4 network: 181576101.0 //end
//Log Server network: 28681705.0 //end
//Log Total Actual Train Comm Cost: 889.20 MB //end
Train end time recorded and duration set to gauge.
       test_acc
0-BZR      0.75
1-BZR      1.00
2-BZR      1.00
3-BZR      1.00
4-BZR      0.75
5-BZR      1.00
6-BZR      0.80
7-BZR      0.80
8-BZR      0.80
9-BZR      0.80
Average test accuracy: 0.8697819314641744
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=35109, ip=192.168.39.156)[0m inx: 9[32m [repeated 9x across cluster][0m
[36m(Trainer pid=35109, ip=192.168.39.156)[0m dataset_trainer_name: 9-BZR[32m [repeated 9x across cluster][0m
[36m(Trainer pid=35109, ip=192.168.39.156)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f02a2ea4c90>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f02a2ee7f50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f02a2ef9d10>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=35109, ip=192.168.39.156)[0m num_node_features: 53[32m [repeated 9x across cluster][0m
[36m(Trainer pid=35109, ip=192.168.39.156)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=35109, ip=192.168.39.156)[0m train_size: 32[32m [repeated 9x across cluster][0m
[36m(Trainer pid=35109, ip=192.168.39.156)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=35109, ip=192.168.39.156)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+dWs, Dataset: BZR, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  BZR  Total number of graphs:  405
Initialization start: network data collected.
using CPU
2025-05-14 22:37:44,133	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 22:37:44,133	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 22:37:44,143	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
//Log init_time: 3149.963 ms //end
//Log Large1 init network: 28634.0 //end
//Log Large2 init network: 248880.0 //end
//Log Large3 init network: 139237.0 //end
//Log Large4 init network: 196573.0 //end
//Log Server init network: 150312687.0 //end
//Log Initialization Communication Cost (MB): 143.93 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 7.129 ms//end
[36m(Trainer pid=35951, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=35951, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=35951, ip=192.168.42.57)[0m inx: 0
[36m(Trainer pid=35951, ip=192.168.42.57)[0m dataset_trainer_name: 0-BZR
[36m(Trainer pid=35951, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f74e4498450>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f74e41c8650>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f74e41c9d10>}
[36m(Trainer pid=35951, ip=192.168.42.57)[0m num_node_features: 53
[36m(Trainer pid=35951, ip=192.168.42.57)[0m num_graph_labels: 2
[36m(Trainer pid=35951, ip=192.168.42.57)[0m train_size: 32
//Log Max memory for Large1: 6335778816.0 //end
//Log Max memory for Large2: 6608658432.0 //end
//Log Max memory for Large3: 6012747776.0 //end
//Log Max memory for Large4: 6897287168.0 //end
//Log Max memory for Server: 17512624128.0 //end
//Log Large1 network: 863097.0 //end
//Log Large2 network: 1085971.0 //end
//Log Large3 network: 655790.0 //end
//Log Large4 network: 968024.0 //end
//Log Server network: 1371277320.0 //end
//Log Total Actual Pretrain Comm Cost: 1311.16 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 102927.07 ms//end
//Log Max memory for Large1: 6342565888.0 //end
//Log Max memory for Large2: 6617935872.0 //end
//Log Max memory for Large3: 6018170880.0 //end
//Log Max memory for Large4: 6911352832.0 //end
//Log Max memory for Server: 17482670080.0 //end
//Log Large1 network: 181540749.0 //end
//Log Large2 network: 270741747.0 //end
//Log Large3 network: 180926781.0 //end
//Log Large4 network: 270433060.0 //end
//Log Server network: 28854713.0 //end
//Log Total Actual Train Comm Cost: 889.30 MB //end
Train end time recorded and duration set to gauge.
       test_acc
0-BZR      0.75
1-BZR      1.00
2-BZR      1.00
3-BZR      0.75
4-BZR      0.75
5-BZR      0.80
6-BZR      1.00
7-BZR      0.80
8-BZR      0.80
9-BZR      0.75
Average test accuracy: 0.8404984423676011
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=36161, ip=192.168.42.57)[0m inx: 8[32m [repeated 9x across cluster][0m
[36m(Trainer pid=36161, ip=192.168.42.57)[0m dataset_trainer_name: 8-BZR[32m [repeated 9x across cluster][0m
[36m(Trainer pid=36161, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f7ce93c9510>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f7ce920c410>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f7ce920dfd0>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=36161, ip=192.168.42.57)[0m num_node_features: 53[32m [repeated 9x across cluster][0m
[36m(Trainer pid=36161, ip=192.168.42.57)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=36161, ip=192.168.42.57)[0m train_size: 32[32m [repeated 9x across cluster][0m
[36m(Trainer pid=40200, ip=192.168.14.62)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=40200, ip=192.168.14.62)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: SelfTrain, Dataset: COX2, Trainers: 10
--------------------------------------------------------------------------------

Downloading https://www.chrsmrrs.com/graphkerneldatasets/COX2.zip
Processing...
Done!
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  COX2  Total number of graphs:  467
Initialization start: network data collected.
using CPU
2025-05-14 22:40:37,819	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 22:40:37,819	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 22:40:37,826	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
//Log init_time: 3527.419 ms //end
//Log Large1 init network: 163810.0 //end
//Log Large2 init network: 329156.0 //end
//Log Large3 init network: 28128.0 //end
//Log Large4 init network: 171169.0 //end
//Log Server init network: 658333114.0 //end
//Log Initialization Communication Cost (MB): 628.50 //end

Done setting up devices.
Running SelfTrain ...
Pretrain start time recorded.
//pretrain_time: 10.404 ms//end
[36m(Trainer pid=37061, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=37061, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=37061, ip=192.168.14.54)[0m inx: 0
[36m(Trainer pid=37061, ip=192.168.14.54)[0m dataset_trainer_name: 0-COX2
[36m(Trainer pid=37061, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f99dfd18ad0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f99dfd6d590>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f99e8c48d50>}
[36m(Trainer pid=37061, ip=192.168.14.54)[0m num_node_features: 35
[36m(Trainer pid=37061, ip=192.168.14.54)[0m num_graph_labels: 2
[36m(Trainer pid=37061, ip=192.168.14.54)[0m train_size: 36
//Log Max memory for Large1: 6977409024.0 //end
//Log Max memory for Large2: 6081605632.0 //end
//Log Max memory for Large3: 6682140672.0 //end
//Log Max memory for Large4: 6391869440.0 //end
//Log Max memory for Server: 17528586240.0 //end
//Log Large1 network: 1121686.0 //end
//Log Large2 network: 815073.0 //end
//Log Large3 network: 1245522.0 //end
//Log Large4 network: 712922.0 //end
//Log Server network: 1019078059.0 //end
//Log Total Actual Pretrain Comm Cost: 975.58 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
  > 1-COX2 done.
trainingaccs: 0.19444444444444445, valaccs: 0.8, acc: 1.0
  > 5-COX2 done.
trainingaccs: 0.2222222222222222, valaccs: 0.8, acc: 1.0
  > 7-COX2 done.
trainingaccs: 0.5945945945945946, valaccs: 0.6, acc: 0.6
  > 9-COX2 done.
trainingaccs: 0.2972972972972973, valaccs: 0.8, acc: 1.0
  > 2-COX2 done.
trainingaccs: 0.2972972972972973, valaccs: 0.6, acc: 0.8
  > 3-COX2 done.
trainingaccs: 0.4864864864864865, valaccs: 0.6, acc: 0.8
  > 6-COX2 done.
trainingaccs: 0.5263157894736842, valaccs: 0.6, acc: 0.8
  > 8-COX2 done.
trainingaccs: 0.6944444444444444, valaccs: 1.0, acc: 1.0
  > 0-COX2 done.
trainingaccs: 0.5833333333333334, valaccs: 0.6, acc: 0.8
  > 4-COX2 done.
trainingaccs: 0.5945945945945946, valaccs: 0.8, acc: 1.0
//train_time: 43.568000000000005 ms//end
//Log Max memory for Large1: 6989557760.0 //end
//Log Max memory for Large2: 6091755520.0 //end
//Log Max memory for Large3: 6693351424.0 //end
//Log Max memory for Large4: 6401019904.0 //end
//Log Max memory for Server: 17528774656.0 //end
//Log Large1 network: 594411.0 //end
//Log Large2 network: 621787.0 //end
//Log Large3 network: 590503.0 //end
//Log Large4 network: 531163.0 //end
//Log Server network: 1228665.0 //end
//Log Total Actual Train Comm Cost: 3.40 MB //end
Train end time recorded and duration set to gauge.
        test_acc
1-COX2       1.0
5-COX2       1.0
7-COX2       0.6
9-COX2       1.0
2-COX2       0.8
3-COX2       0.8
6-COX2       0.8
8-COX2       1.0
0-COX2       0.8
4-COX2       1.0
Average test accuracy: 0.8795640326975477
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 2.22 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 2.22 MB //end
[36m(Trainer pid=37185, ip=192.168.39.156)[0m inx: 9[32m [repeated 9x across cluster][0m
[36m(Trainer pid=37185, ip=192.168.39.156)[0m dataset_trainer_name: 9-COX2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=37185, ip=192.168.39.156)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9b8d9d4150>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9b8d81e650>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9b8de34250>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=37185, ip=192.168.39.156)[0m num_node_features: 35[32m [repeated 9x across cluster][0m
[36m(Trainer pid=37185, ip=192.168.39.156)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=37185, ip=192.168.39.156)[0m train_size: 37[32m [repeated 9x across cluster][0m
[36m(Trainer pid=37185, ip=192.168.39.156)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=37185, ip=192.168.39.156)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: FedAvg, Dataset: COX2, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  COX2  Total number of graphs:  467
Initialization start: network data collected.
using CPU
2025-05-14 22:41:46,701	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 22:41:46,701	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 22:41:46,707	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
//Log init_time: 3458.662 ms //end
//Log Large1 init network: 30077.0 //end
//Log Large2 init network: 272648.0 //end
//Log Large3 init network: 145927.0 //end
//Log Large4 init network: 268412.0 //end
//Log Server init network: 566706630.0 //end
//Log Initialization Communication Cost (MB): 541.14 //end

Done setting up devices.
Running FedAvg ...
Pretrain start time recorded.
//pretrain_time: 7.679 ms//end
[36m(Trainer pid=37619, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=37619, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=41652, ip=192.168.14.62)[0m inx: 1
[36m(Trainer pid=41652, ip=192.168.14.62)[0m dataset_trainer_name: 1-COX2
[36m(Trainer pid=41652, ip=192.168.14.62)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7eff6a1ea610>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7eff6a031490>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7eff6a680c10>}
[36m(Trainer pid=41652, ip=192.168.14.62)[0m num_node_features: 35
[36m(Trainer pid=41652, ip=192.168.14.62)[0m num_graph_labels: 2
[36m(Trainer pid=41652, ip=192.168.14.62)[0m train_size: 36
//Log Max memory for Large1: 6379528192.0 //end
//Log Max memory for Large2: 6686302208.0 //end
//Log Max memory for Large3: 6058192896.0 //end
//Log Max memory for Large4: 6992367616.0 //end
//Log Max memory for Server: 17537372160.0 //end
//Log Large1 network: 839822.0 //end
//Log Large2 network: 1294955.0 //end
//Log Large3 network: 678827.0 //end
//Log Large4 network: 1066653.0 //end
//Log Server network: 1110886174.0 //end
//Log Total Actual Pretrain Comm Cost: 1063.12 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 220884.274 ms//end
//Log Max memory for Large1: 6381154304.0 //end
//Log Max memory for Large2: 6702682112.0 //end
//Log Max memory for Large3: 6065508352.0 //end
//Log Max memory for Large4: 7003697152.0 //end
//Log Max memory for Server: 17495883776.0 //end
//Log Large1 network: 58914314.0 //end
//Log Large2 network: 87383494.0 //end
//Log Large3 network: 59079074.0 //end
//Log Large4 network: 87401782.0 //end
//Log Server network: 142872745.0 //end
//Log Total Actual Train Comm Cost: 415.47 MB //end
Train end time recorded and duration set to gauge.
        test_acc
0-COX2       0.8
1-COX2       1.0
4-COX2       1.0
8-COX2       1.0
5-COX2       1.0
7-COX2       0.6
2-COX2       0.8
3-COX2       0.8
6-COX2       0.8
9-COX2       1.0
Average test accuracy: 0.8806539509536785
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=41869, ip=192.168.14.62)[0m inx: 9[32m [repeated 9x across cluster][0m
[36m(Trainer pid=41869, ip=192.168.14.62)[0m dataset_trainer_name: 9-COX2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=41869, ip=192.168.14.62)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4e677d3950>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4e5f4ea3d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4e6761e210>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=41869, ip=192.168.14.62)[0m num_node_features: 35[32m [repeated 9x across cluster][0m
[36m(Trainer pid=41869, ip=192.168.14.62)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=41869, ip=192.168.14.62)[0m train_size: 37[32m [repeated 9x across cluster][0m
[36m(Trainer pid=41869, ip=192.168.14.62)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=41869, ip=192.168.14.62)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: FedProx, Dataset: COX2, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  COX2  Total number of graphs:  467
Initialization start: network data collected.
using CPU
2025-05-14 22:46:36,403	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 22:46:36,403	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 22:46:36,410	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
//Log init_time: 3536.106 ms //end
//Log Large1 init network: 335727.0 //end
//Log Large2 init network: 228784.0 //end
//Log Large3 init network: 183131.0 //end
//Log Large4 init network: 267001.0 //end
//Log Server init network: 165147438.0 //end
//Log Initialization Communication Cost (MB): 158.46 //end

Done setting up devices.
Running FedAvg ...
Pretrain start time recorded.
//pretrain_time: 8.861 ms//end
[36m(Trainer pid=39218, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=39218, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=39218, ip=192.168.14.54)[0m inx: 0
[36m(Trainer pid=39218, ip=192.168.14.54)[0m dataset_trainer_name: 0-COX2
[36m(Trainer pid=39218, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6fe01bb690>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6fc0769f10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6fe4e3cb10>}
[36m(Trainer pid=39218, ip=192.168.14.54)[0m num_node_features: 35
[36m(Trainer pid=39218, ip=192.168.14.54)[0m num_graph_labels: 2
[36m(Trainer pid=39218, ip=192.168.14.54)[0m train_size: 36
//Log Max memory for Large1: 6989987840.0 //end
//Log Max memory for Large2: 6084702208.0 //end
//Log Max memory for Large3: 6666665984.0 //end
//Log Max memory for Large4: 6374318080.0 //end
//Log Max memory for Server: 17548800000.0 //end
//Log Large1 network: 717575.0 //end
//Log Large2 network: 833488.0 //end
//Log Large3 network: 1048846.0 //end
//Log Large4 network: 810817.0 //end
//Log Server network: 1512243774.0 //end
//Log Total Actual Pretrain Comm Cost: 1445.44 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 219100.046 ms//end
//Log Max memory for Large1: 7012417536.0 //end
//Log Max memory for Large2: 6095511552.0 //end
//Log Max memory for Large3: 6689271808.0 //end
//Log Max memory for Large4: 6380748800.0 //end
//Log Max memory for Server: 17532243968.0 //end
//Log Large1 network: 86368872.0 //end
//Log Large2 network: 59441050.0 //end
//Log Large3 network: 86432051.0 //end
//Log Large4 network: 59113154.0 //end
//Log Server network: 142745118.0 //end
//Log Total Actual Train Comm Cost: 413.99 MB //end
Train end time recorded and duration set to gauge.
        test_acc
1-COX2       1.0
5-COX2       1.0
9-COX2       1.0
4-COX2       1.0
7-COX2       0.6
2-COX2       0.8
0-COX2       0.8
3-COX2       0.8
6-COX2       0.8
8-COX2       1.0
Average test accuracy: 0.8795640326975477
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=39405, ip=192.168.14.54)[0m inx: 8[32m [repeated 9x across cluster][0m
[36m(Trainer pid=39405, ip=192.168.14.54)[0m dataset_trainer_name: 8-COX2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=39405, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd5bafd89d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd5bb02a950>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd5bb640a50>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=39405, ip=192.168.14.54)[0m num_node_features: 35[32m [repeated 9x across cluster][0m
[36m(Trainer pid=39405, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=39405, ip=192.168.14.54)[0m train_size: 36[32m [repeated 9x across cluster][0m
[36m(Trainer pid=39330, ip=192.168.39.156)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=39330, ip=192.168.39.156)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL, Dataset: COX2, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  COX2  Total number of graphs:  467
Initialization start: network data collected.
using CPU
2025-05-14 22:51:24,452	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 22:51:24,452	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 22:51:24,460	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
//Log init_time: 3484.207 ms //end
//Log Large1 init network: 244451.0 //end
//Log Large2 init network: 267791.0 //end
//Log Large3 init network: 229608.0 //end
//Log Large4 init network: 251700.0 //end
//Log Server init network: 330176670.0 //end
//Log Initialization Communication Cost (MB): 315.83 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 6.976000000000001 ms//end
[36m(Trainer pid=40704, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=40704, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=40704, ip=192.168.42.57)[0m inx: 0
[36m(Trainer pid=40704, ip=192.168.42.57)[0m dataset_trainer_name: 0-COX2
[36m(Trainer pid=40704, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4882297790>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f48800e21d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f48826b3150>}
[36m(Trainer pid=40704, ip=192.168.42.57)[0m num_node_features: 35
[36m(Trainer pid=40704, ip=192.168.42.57)[0m num_graph_labels: 2
[36m(Trainer pid=40704, ip=192.168.42.57)[0m train_size: 36
//Log Max memory for Large1: 6377181184.0 //end
//Log Max memory for Large2: 6678683648.0 //end
//Log Max memory for Large3: 6064730112.0 //end
//Log Max memory for Large4: 6999326720.0 //end
//Log Max memory for Server: 17566547968.0 //end
//Log Large1 network: 666293.0 //end
//Log Large2 network: 1108330.0 //end
//Log Large3 network: 692508.0 //end
//Log Large4 network: 897977.0 //end
//Log Server network: 1348583354.0 //end
//Log Total Actual Pretrain Comm Cost: 1289.32 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 107521.523 ms//end
//Log Max memory for Large1: 6367096832.0 //end
//Log Max memory for Large2: 6696542208.0 //end
//Log Max memory for Large3: 6071173120.0 //end
//Log Max memory for Large4: 7008710656.0 //end
//Log Max memory for Server: 17580466176.0 //end
//Log Large1 network: 179966428.0 //end
//Log Large2 network: 269057674.0 //end
//Log Large3 network: 179867953.0 //end
//Log Large4 network: 269970557.0 //end
//Log Server network: 29347055.0 //end
//Log Total Actual Train Comm Cost: 885.21 MB //end
Train end time recorded and duration set to gauge.
        test_acc
0-COX2       1.0
1-COX2       1.0
2-COX2       1.0
3-COX2       1.0
4-COX2       1.0
5-COX2       1.0
6-COX2       1.0
7-COX2       1.0
8-COX2       1.0
9-COX2       0.8
Average test accuracy: 0.9798365122615804
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=44925, ip=192.168.14.62)[0m inx: 9[32m [repeated 9x across cluster][0m
[36m(Trainer pid=44925, ip=192.168.14.62)[0m dataset_trainer_name: 9-COX2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=44925, ip=192.168.14.62)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f535ddd3e10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f535dc16d10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f535e22cad0>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=44925, ip=192.168.14.62)[0m num_node_features: 35[32m [repeated 9x across cluster][0m
[36m(Trainer pid=44925, ip=192.168.14.62)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=44925, ip=192.168.14.62)[0m train_size: 37[32m [repeated 9x across cluster][0m
[36m(Trainer pid=44925, ip=192.168.14.62)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=44925, ip=192.168.14.62)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+, Dataset: COX2, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  COX2  Total number of graphs:  467
Initialization start: network data collected.
using CPU
2025-05-14 22:54:20,706	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 22:54:20,707	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 22:54:20,714	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
//Log init_time: 3436.2439999999997 ms //end
//Log Large1 init network: 342760.0 //end
//Log Large2 init network: 41556.0 //end
//Log Large3 init network: 151178.0 //end
//Log Large4 init network: 37351.0 //end
//Log Server init network: 1296124119.0 //end
//Log Initialization Communication Cost (MB): 1236.63 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 6.517 ms//end
[36m(Trainer pid=41826, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=41826, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=41826, ip=192.168.14.54)[0m inx: 0
[36m(Trainer pid=41826, ip=192.168.14.54)[0m dataset_trainer_name: 0-COX2
[36m(Trainer pid=41826, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fbf2bb95e50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fbf2b9ddcd0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fbf2c006790>}
[36m(Trainer pid=41826, ip=192.168.14.54)[0m num_node_features: 35
[36m(Trainer pid=41826, ip=192.168.14.54)[0m num_graph_labels: 2
[36m(Trainer pid=41826, ip=192.168.14.54)[0m train_size: 36
//Log Max memory for Large1: 6979817472.0 //end
//Log Max memory for Large2: 6072369152.0 //end
//Log Max memory for Large3: 6679379968.0 //end
//Log Max memory for Large4: 6384361472.0 //end
//Log Max memory for Server: 17580412928.0 //end
//Log Large1 network: 751047.0 //end
//Log Large2 network: 1117736.0 //end
//Log Large3 network: 896031.0 //end
//Log Large4 network: 923114.0 //end
//Log Server network: 381128370.0 //end
//Log Total Actual Pretrain Comm Cost: 366.99 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 105196.06 ms//end
//Log Max memory for Large1: 6976598016.0 //end
//Log Max memory for Large2: 6073425920.0 //end
//Log Max memory for Large3: 6683533312.0 //end
//Log Max memory for Large4: 6383050752.0 //end
//Log Max memory for Server: 17560911872.0 //end
//Log Large1 network: 269913194.0 //end
//Log Large2 network: 180040789.0 //end
//Log Large3 network: 268776307.0 //end
//Log Large4 network: 179983014.0 //end
//Log Server network: 29202558.0 //end
//Log Total Actual Train Comm Cost: 884.93 MB //end
Train end time recorded and duration set to gauge.
        test_acc
0-COX2       1.0
1-COX2       1.0
2-COX2       1.0
3-COX2       1.0
4-COX2       0.8
5-COX2       1.0
6-COX2       1.0
7-COX2       1.0
8-COX2       1.0
9-COX2       1.0
Average test accuracy: 0.9798365122615804
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=42029, ip=192.168.14.54)[0m inx: 8[32m [repeated 9x across cluster][0m
[36m(Trainer pid=42029, ip=192.168.14.54)[0m dataset_trainer_name: 8-COX2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=42029, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f01fba17f50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f01fb66e890>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f01fbc6cd50>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=42029, ip=192.168.14.54)[0m num_node_features: 35[32m [repeated 9x across cluster][0m
[36m(Trainer pid=42029, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=42029, ip=192.168.14.54)[0m train_size: 36[32m [repeated 9x across cluster][0m
[36m(Trainer pid=42029, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=42029, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+dWs, Dataset: COX2, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  COX2  Total number of graphs:  467
Initialization start: network data collected.
using CPU
2025-05-14 22:57:14,596	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 22:57:14,596	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 22:57:14,605	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
//Log init_time: 3529.699 ms //end
//Log Large1 init network: 38326.0 //end
//Log Large2 init network: 33234.0 //end
//Log Large3 init network: 38651.0 //end
//Log Large4 init network: 253144.0 //end
//Log Server init network: 1324496056.0 //end
//Log Initialization Communication Cost (MB): 1263.48 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 7.71 ms//end
[36m(Trainer pid=42820, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=42820, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=42820, ip=192.168.42.57)[0m inx: 0
[36m(Trainer pid=42820, ip=192.168.42.57)[0m dataset_trainer_name: 0-COX2
[36m(Trainer pid=42820, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9cda9e8050>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9cda8318d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9cdae488d0>}
[36m(Trainer pid=42820, ip=192.168.42.57)[0m num_node_features: 35
[36m(Trainer pid=42820, ip=192.168.42.57)[0m num_graph_labels: 2
[36m(Trainer pid=42820, ip=192.168.42.57)[0m train_size: 36
//Log Max memory for Large1: 6378053632.0 //end
//Log Max memory for Large2: 6692139008.0 //end
//Log Max memory for Large3: 6074040320.0 //end
//Log Max memory for Large4: 6976507904.0 //end
//Log Max memory for Server: 17619107840.0 //end
//Log Large1 network: 858524.0 //end
//Log Large2 network: 1311244.0 //end
//Log Large3 network: 879579.0 //end
//Log Large4 network: 1060873.0 //end
//Log Server network: 352974811.0 //end
//Log Total Actual Pretrain Comm Cost: 340.54 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 106608.54999999999 ms//end
//Log Max memory for Large1: 6381391872.0 //end
//Log Max memory for Large2: 6695280640.0 //end
//Log Max memory for Large3: 6074179584.0 //end
//Log Max memory for Large4: 6981128192.0 //end
//Log Max memory for Server: 17590333440.0 //end
//Log Large1 network: 180021254.0 //end
//Log Large2 network: 269100851.0 //end
//Log Large3 network: 179877006.0 //end
//Log Large4 network: 269897166.0 //end
//Log Server network: 29464838.0 //end
//Log Total Actual Train Comm Cost: 885.35 MB //end
Train end time recorded and duration set to gauge.
        test_acc
0-COX2       0.8
1-COX2       0.8
2-COX2       1.0
3-COX2       1.0
4-COX2       1.0
5-COX2       1.0
6-COX2       1.0
7-COX2       1.0
8-COX2       1.0
9-COX2       1.0
Average test accuracy: 0.9607629427792916
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=47039, ip=192.168.14.62)[0m inx: 9[32m [repeated 9x across cluster][0m
[36m(Trainer pid=47039, ip=192.168.14.62)[0m dataset_trainer_name: 9-COX2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=47039, ip=192.168.14.62)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f879fc99c90>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f879fad03d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f87a00c8bd0>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=47039, ip=192.168.14.62)[0m num_node_features: 35[32m [repeated 9x across cluster][0m
[36m(Trainer pid=47039, ip=192.168.14.62)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=47039, ip=192.168.14.62)[0m train_size: 37[32m [repeated 9x across cluster][0m
[36m(Trainer pid=47039, ip=192.168.14.62)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=47039, ip=192.168.14.62)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: SelfTrain, Dataset: DHFR, Trainers: 10
--------------------------------------------------------------------------------

Downloading https://www.chrsmrrs.com/graphkerneldatasets/DHFR.zip
Processing...
Done!
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  DHFR  Total number of graphs:  756
Initialization start: network data collected.
using CPU
2025-05-14 23:00:12,458	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 23:00:12,458	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 23:00:12,465	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
[36m(Trainer pid=43946, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=43946, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=43946, ip=192.168.14.54)[0m inx: 0
[36m(Trainer pid=43946, ip=192.168.14.54)[0m dataset_trainer_name: 0-DHFR
[36m(Trainer pid=43946, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f907ad54390>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f907afdd010>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f907aa8b990>}
[36m(Trainer pid=43946, ip=192.168.14.54)[0m num_node_features: 53
[36m(Trainer pid=43946, ip=192.168.14.54)[0m num_graph_labels: 2
[36m(Trainer pid=43946, ip=192.168.14.54)[0m train_size: 64
[36m(Trainer pid=44076, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 4x across cluster][0m
[36m(Trainer pid=44076, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 4x across cluster][0m
[36m(Trainer pid=44076, ip=192.168.14.54)[0m inx: 4[32m [repeated 4x across cluster][0m
[36m(Trainer pid=44076, ip=192.168.14.54)[0m dataset_trainer_name: 4-DHFR[32m [repeated 4x across cluster][0m
[36m(Trainer pid=44076, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fcea0197510>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fcea05f0c50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fcea06021d0>}[32m [repeated 4x across cluster][0m
[36m(Trainer pid=44076, ip=192.168.14.54)[0m num_node_features: 53[32m [repeated 4x across cluster][0m
[36m(Trainer pid=44076, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 4x across cluster][0m
[36m(Trainer pid=44076, ip=192.168.14.54)[0m train_size: 57[32m [repeated 4x across cluster][0m
//Log init_time: 13060.368 ms //end
//Log Large1 init network: 1444261.0 //end
//Log Large2 init network: 1134738.0 //end
//Log Large3 init network: 1279934.0 //end
//Log Large4 init network: 1789843.0 //end
//Log Server init network: 4364819391.0 //end
//Log Initialization Communication Cost (MB): 4168.00 //end

Done setting up devices.
Running SelfTrain ...
Pretrain start time recorded.
//pretrain_time: 7.37 ms//end
[36m(Trainer pid=44206, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 4x across cluster][0m
[36m(Trainer pid=44206, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 4x across cluster][0m
[36m(Trainer pid=44206, ip=192.168.14.54)[0m inx: 8[32m [repeated 4x across cluster][0m
[36m(Trainer pid=44206, ip=192.168.14.54)[0m dataset_trainer_name: 8-DHFR[32m [repeated 4x across cluster][0m
[36m(Trainer pid=44206, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3e901d42d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3e908455d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3e9087cd50>}[32m [repeated 4x across cluster][0m
[36m(Trainer pid=44206, ip=192.168.14.54)[0m num_node_features: 53[32m [repeated 4x across cluster][0m
[36m(Trainer pid=44206, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 4x across cluster][0m
[36m(Trainer pid=44206, ip=192.168.14.54)[0m train_size: 61[32m [repeated 4x across cluster][0m
//Log Max memory for Large1: 8531988480.0 //end
//Log Max memory for Large2: 7159304192.0 //end
//Log Max memory for Large3: 8067022848.0 //end
//Log Max memory for Large4: 7465672704.0 //end
//Log Max memory for Server: 17654091776.0 //end
//Log Large1 network: 1029672.0 //end
//Log Large2 network: 1619138.0 //end
//Log Large3 network: 1033482.0 //end
//Log Large4 network: 588158.0 //end
//Log Server network: 1898346039.0 //end
//Log Total Actual Pretrain Comm Cost: 1814.48 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
  > 1-DHFR done.
trainingaccs: 0.625, valaccs: 0.7142857142857143, acc: 0.7142857142857143
  > 3-DHFR done.
trainingaccs: 0.5573770491803278, valaccs: 0.75, acc: 0.75
  > 2-DHFR done.
trainingaccs: 0.3870967741935484, valaccs: 0.75, acc: 0.5
  > 7-DHFR done.
trainingaccs: 0.578125, valaccs: 0.5, acc: 0.5
  > 6-DHFR done.
trainingaccs: 0.484375, valaccs: 0.5, acc: 0.4444444444444444
  > 4-DHFR done.
trainingaccs: 0.543859649122807, valaccs: 0.5714285714285714, acc: 0.625
  > 0-DHFR done.
trainingaccs: 0.328125, valaccs: 0.875, acc: 0.75
  > 5-DHFR done.
trainingaccs: 0.4909090909090909, valaccs: 0.7142857142857143, acc: 0.7142857142857143
  > 8-DHFR done.
trainingaccs: 0.4262295081967213, valaccs: 0.5, acc: 0.5
  > 9-DHFR done.
trainingaccs: 0.40350877192982454, valaccs: 0.2857142857142857, acc: 0.375
//train_time: 50.253 ms//end
//Log Max memory for Large1: 8538161152.0 //end
//Log Max memory for Large2: 7167533056.0 //end
//Log Max memory for Large3: 8083394560.0 //end
//Log Max memory for Large4: 7472558080.0 //end
//Log Max memory for Server: 17654444032.0 //end
//Log Large1 network: 638960.0 //end
//Log Large2 network: 578298.0 //end
//Log Large3 network: 596921.0 //end
//Log Large4 network: 523895.0 //end
//Log Server network: 1289832.0 //end
//Log Total Actual Train Comm Cost: 3.46 MB //end
Train end time recorded and duration set to gauge.
        test_acc
1-DHFR  0.714286
3-DHFR  0.750000
2-DHFR  0.500000
7-DHFR  0.500000
6-DHFR  0.444444
4-DHFR  0.625000
0-DHFR  0.750000
5-DHFR  0.714286
8-DHFR  0.500000
9-DHFR  0.375000
Average test accuracy: 0.5898700578401077
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 2.22 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 2.22 MB //end
[36m(Trainer pid=44129, ip=192.168.39.156)[0m inx: 9
[36m(Trainer pid=44129, ip=192.168.39.156)[0m dataset_trainer_name: 9-DHFR
[36m(Trainer pid=44129, ip=192.168.39.156)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f81178dfb90>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8117d27790>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8117d35e90>}
[36m(Trainer pid=44129, ip=192.168.39.156)[0m num_node_features: 53
[36m(Trainer pid=44129, ip=192.168.39.156)[0m num_graph_labels: 2
[36m(Trainer pid=44129, ip=192.168.39.156)[0m train_size: 57
[36m(Trainer pid=44129, ip=192.168.39.156)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=44129, ip=192.168.39.156)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: FedAvg, Dataset: DHFR, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  DHFR  Total number of graphs:  756
Initialization start: network data collected.
using CPU
2025-05-14 23:01:30,925	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 23:01:30,925	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 23:01:30,930	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
[36m(Trainer pid=44555, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=44555, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=44555, ip=192.168.42.57)[0m inx: 0
[36m(Trainer pid=44555, ip=192.168.42.57)[0m dataset_trainer_name: 0-DHFR
[36m(Trainer pid=44555, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd4a3c08590>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd4a830f310>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd4a8341610>}
[36m(Trainer pid=44555, ip=192.168.42.57)[0m num_node_features: 53
[36m(Trainer pid=44555, ip=192.168.42.57)[0m num_graph_labels: 2
[36m(Trainer pid=44555, ip=192.168.42.57)[0m train_size: 64
[36m(Trainer pid=44684, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 4x across cluster][0m
[36m(Trainer pid=44684, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 4x across cluster][0m
[36m(Trainer pid=44684, ip=192.168.42.57)[0m inx: 4[32m [repeated 4x across cluster][0m
[36m(Trainer pid=44684, ip=192.168.42.57)[0m dataset_trainer_name: 4-DHFR[32m [repeated 4x across cluster][0m
[36m(Trainer pid=44684, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0455357c10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0455265e50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0455248490>}[32m [repeated 4x across cluster][0m
[36m(Trainer pid=44684, ip=192.168.42.57)[0m num_node_features: 53[32m [repeated 4x across cluster][0m
[36m(Trainer pid=44684, ip=192.168.42.57)[0m num_graph_labels: 2[32m [repeated 4x across cluster][0m
[36m(Trainer pid=44684, ip=192.168.42.57)[0m train_size: 57[32m [repeated 4x across cluster][0m
//Log init_time: 13172.945 ms //end
//Log Large1 init network: 1458462.0 //end
//Log Large2 init network: 1878926.0 //end
//Log Large3 init network: 1241449.0 //end
//Log Large4 init network: 1484530.0 //end
//Log Server init network: 4364833514.0 //end
//Log Initialization Communication Cost (MB): 4168.41 //end

Done setting up devices.
Running FedAvg ...
Pretrain start time recorded.
//pretrain_time: 9.657 ms//end
[36m(Trainer pid=44815, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 4x across cluster][0m
[36m(Trainer pid=44815, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 4x across cluster][0m
[36m(Trainer pid=44815, ip=192.168.42.57)[0m inx: 8[32m [repeated 4x across cluster][0m
[36m(Trainer pid=44815, ip=192.168.42.57)[0m dataset_trainer_name: 8-DHFR[32m [repeated 4x across cluster][0m
[36m(Trainer pid=44815, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f75c2b9ad10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f75c2e328d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f75c2e0c750>}[32m [repeated 4x across cluster][0m
[36m(Trainer pid=44815, ip=192.168.42.57)[0m num_node_features: 53[32m [repeated 4x across cluster][0m
[36m(Trainer pid=44815, ip=192.168.42.57)[0m num_graph_labels: 2[32m [repeated 4x across cluster][0m
[36m(Trainer pid=44815, ip=192.168.42.57)[0m train_size: 61[32m [repeated 4x across cluster][0m
//Log Max memory for Large1: 7453605888.0 //end
//Log Max memory for Large2: 8082247680.0 //end
//Log Max memory for Large3: 7136301056.0 //end
//Log Max memory for Large4: 8539373568.0 //end
//Log Max memory for Server: 17679765504.0 //end
//Log Large1 network: 540377.0 //end
//Log Large2 network: 1512660.0 //end
//Log Large3 network: 549562.0 //end
//Log Large4 network: 1258842.0 //end
//Log Server network: 1898505566.0 //end
//Log Total Actual Pretrain Comm Cost: 1814.24 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 220639.648 ms//end
//Log Max memory for Large1: 7474085888.0 //end
//Log Max memory for Large2: 8089567232.0 //end
//Log Max memory for Large3: 7152672768.0 //end
//Log Max memory for Large4: 8566063104.0 //end
//Log Max memory for Server: 17644736512.0 //end
//Log Large1 network: 58964310.0 //end
//Log Large2 network: 87339732.0 //end
//Log Large3 network: 59191832.0 //end
//Log Large4 network: 87072568.0 //end
//Log Server network: 142953440.0 //end
//Log Total Actual Train Comm Cost: 415.35 MB //end
Train end time recorded and duration set to gauge.
        test_acc
3-DHFR  0.750000
0-DHFR  0.750000
4-DHFR  0.625000
6-DHFR  0.555556
7-DHFR  0.375000
8-DHFR  0.625000
1-DHFR  0.714286
2-DHFR  0.625000
9-DHFR  0.625000
5-DHFR  0.714286
Average test accuracy: 0.6371754747378707
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=48836, ip=192.168.14.62)[0m inx: 9
[36m(Trainer pid=48836, ip=192.168.14.62)[0m dataset_trainer_name: 9-DHFR
[36m(Trainer pid=48836, ip=192.168.14.62)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f53dbe4e150>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f53dc2b4310>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f53dc2cee90>}
[36m(Trainer pid=48836, ip=192.168.14.62)[0m num_node_features: 53
[36m(Trainer pid=48836, ip=192.168.14.62)[0m num_graph_labels: 2
[36m(Trainer pid=48836, ip=192.168.14.62)[0m train_size: 57
[36m(Trainer pid=48836, ip=192.168.14.62)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=48836, ip=192.168.14.62)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: FedProx, Dataset: DHFR, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  DHFR  Total number of graphs:  756
Initialization start: network data collected.
using CPU
2025-05-14 23:06:30,129	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 23:06:30,129	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 23:06:30,136	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
[36m(Trainer pid=46189, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=46189, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=46189, ip=192.168.14.54)[0m inx: 0
[36m(Trainer pid=46189, ip=192.168.14.54)[0m dataset_trainer_name: 0-DHFR
[36m(Trainer pid=46189, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f7e7c12e590>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f7e7c3b2550>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f7e7c3cacd0>}
[36m(Trainer pid=46189, ip=192.168.14.54)[0m num_node_features: 53
[36m(Trainer pid=46189, ip=192.168.14.54)[0m num_graph_labels: 2
[36m(Trainer pid=46189, ip=192.168.14.54)[0m train_size: 64
[36m(Trainer pid=46320, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 4x across cluster][0m
[36m(Trainer pid=46320, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 4x across cluster][0m
[36m(Trainer pid=46320, ip=192.168.14.54)[0m inx: 4[32m [repeated 4x across cluster][0m
[36m(Trainer pid=46320, ip=192.168.14.54)[0m dataset_trainer_name: 4-DHFR[32m [repeated 4x across cluster][0m
[36m(Trainer pid=46320, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3a48b67f90>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3a48fef650>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3a49005590>}[32m [repeated 4x across cluster][0m
[36m(Trainer pid=46320, ip=192.168.14.54)[0m num_node_features: 53[32m [repeated 4x across cluster][0m
[36m(Trainer pid=46320, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 4x across cluster][0m
[36m(Trainer pid=46320, ip=192.168.14.54)[0m train_size: 57[32m [repeated 4x across cluster][0m
//Log init_time: 13573.181999999999 ms //end
//Log Large1 init network: 1335330.0 //end
//Log Large2 init network: 1995268.0 //end
//Log Large3 init network: 1276965.0 //end
//Log Large4 init network: 1856719.0 //end
//Log Server init network: 2793605545.0 //end
//Log Initialization Communication Cost (MB): 2670.35 //end

Done setting up devices.
Running FedAvg ...
Pretrain start time recorded.
//pretrain_time: 9.6 ms//end
[36m(Trainer pid=46450, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 4x across cluster][0m
[36m(Trainer pid=46450, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 4x across cluster][0m
[36m(Trainer pid=46450, ip=192.168.14.54)[0m inx: 8[32m [repeated 4x across cluster][0m
[36m(Trainer pid=46450, ip=192.168.14.54)[0m dataset_trainer_name: 8-DHFR[32m [repeated 4x across cluster][0m
[36m(Trainer pid=46450, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fb4f63cac10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fb4f64163d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fb4f624e110>}[32m [repeated 4x across cluster][0m
[36m(Trainer pid=46450, ip=192.168.14.54)[0m num_node_features: 53[32m [repeated 4x across cluster][0m
[36m(Trainer pid=46450, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 4x across cluster][0m
[36m(Trainer pid=46450, ip=192.168.14.54)[0m train_size: 61[32m [repeated 4x across cluster][0m
//Log Max memory for Large1: 8541634560.0 //end
//Log Max memory for Large2: 7149264896.0 //end
//Log Max memory for Large3: 8048177152.0 //end
//Log Max memory for Large4: 7464226816.0 //end
//Log Max memory for Server: 17678925824.0 //end
//Log Large1 network: 1178800.0 //end
//Log Large2 network: 575709.0 //end
//Log Large3 network: 991086.0 //end
//Log Large4 network: 523791.0 //end
//Log Server network: 3469608551.0 //end
//Log Total Actual Pretrain Comm Cost: 3311.99 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 221732.56 ms//end
//Log Max memory for Large1: 8561709056.0 //end
//Log Max memory for Large2: 7173394432.0 //end
//Log Max memory for Large3: 8063619072.0 //end
//Log Max memory for Large4: 7482105856.0 //end
//Log Max memory for Server: 17683763200.0 //end
//Log Large1 network: 86652100.0 //end
//Log Large2 network: 59496591.0 //end
//Log Large3 network: 86582825.0 //end
//Log Large4 network: 59101921.0 //end
//Log Server network: 143249485.0 //end
//Log Total Actual Train Comm Cost: 414.93 MB //end
Train end time recorded and duration set to gauge.
        test_acc
3-DHFR  0.750000
4-DHFR  0.625000
9-DHFR  0.625000
7-DHFR  0.750000
8-DHFR  0.500000
5-DHFR  0.714286
0-DHFR  0.750000
1-DHFR  0.714286
2-DHFR  0.625000
6-DHFR  0.555556
Average test accuracy: 0.663546866333888
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=46342, ip=192.168.39.156)[0m inx: 9
[36m(Trainer pid=46342, ip=192.168.39.156)[0m dataset_trainer_name: 9-DHFR
[36m(Trainer pid=46342, ip=192.168.39.156)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9da36a1c10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9da3b19ad0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9da3b05d90>}
[36m(Trainer pid=46342, ip=192.168.39.156)[0m num_node_features: 53
[36m(Trainer pid=46342, ip=192.168.39.156)[0m num_graph_labels: 2
[36m(Trainer pid=46342, ip=192.168.39.156)[0m train_size: 57
[36m(Trainer pid=46342, ip=192.168.39.156)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=46342, ip=192.168.39.156)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL, Dataset: DHFR, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  DHFR  Total number of graphs:  756
Initialization start: network data collected.
using CPU
2025-05-14 23:11:30,938	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 23:11:30,938	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 23:11:30,944	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
[36m(Trainer pid=47728, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=47728, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=47728, ip=192.168.42.57)[0m inx: 0
[36m(Trainer pid=47728, ip=192.168.42.57)[0m dataset_trainer_name: 0-DHFR
[36m(Trainer pid=47728, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f31e5bff350>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f31e6069ad0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f31e6082a90>}
[36m(Trainer pid=47728, ip=192.168.42.57)[0m num_node_features: 53
[36m(Trainer pid=47728, ip=192.168.42.57)[0m num_graph_labels: 2
[36m(Trainer pid=47728, ip=192.168.42.57)[0m train_size: 64
[36m(Trainer pid=47857, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 4x across cluster][0m
[36m(Trainer pid=47857, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 4x across cluster][0m
[36m(Trainer pid=47857, ip=192.168.42.57)[0m inx: 4[32m [repeated 4x across cluster][0m
[36m(Trainer pid=47857, ip=192.168.42.57)[0m dataset_trainer_name: 4-DHFR[32m [repeated 4x across cluster][0m
[36m(Trainer pid=47857, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f23481cdd10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f234be4b9d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f234be3c490>}[32m [repeated 4x across cluster][0m
[36m(Trainer pid=47857, ip=192.168.42.57)[0m num_node_features: 53[32m [repeated 4x across cluster][0m
[36m(Trainer pid=47857, ip=192.168.42.57)[0m num_graph_labels: 2[32m [repeated 4x across cluster][0m
[36m(Trainer pid=47857, ip=192.168.42.57)[0m train_size: 57[32m [repeated 4x across cluster][0m
//Log init_time: 13912.738 ms //end
//Log Large1 init network: 1332197.0 //end
//Log Large2 init network: 1983664.0 //end
//Log Large3 init network: 824217.0 //end
//Log Large4 init network: 2326582.0 //end
//Log Server init network: 4364734793.0 //end
//Log Initialization Communication Cost (MB): 4168.70 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 7.297 ms//end
[36m(Trainer pid=47989, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 4x across cluster][0m
[36m(Trainer pid=47989, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 4x across cluster][0m
[36m(Trainer pid=47989, ip=192.168.42.57)[0m inx: 8[32m [repeated 4x across cluster][0m
[36m(Trainer pid=47989, ip=192.168.42.57)[0m dataset_trainer_name: 8-DHFR[32m [repeated 4x across cluster][0m
[36m(Trainer pid=47989, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0c2d60b590>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0c2d922310>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0c2d950510>}[32m [repeated 4x across cluster][0m
[36m(Trainer pid=47989, ip=192.168.42.57)[0m num_node_features: 53[32m [repeated 4x across cluster][0m
[36m(Trainer pid=47989, ip=192.168.42.57)[0m num_graph_labels: 2[32m [repeated 4x across cluster][0m
[36m(Trainer pid=47989, ip=192.168.42.57)[0m train_size: 61[32m [repeated 4x across cluster][0m
//Log Max memory for Large1: 7474806784.0 //end
//Log Max memory for Large2: 8066572288.0 //end
//Log Max memory for Large3: 7147429888.0 //end
//Log Max memory for Large4: 8536608768.0 //end
//Log Max memory for Server: 17701023744.0 //end
//Log Large1 network: 566772.0 //end
//Log Large2 network: 1629980.0 //end
//Log Large3 network: 1021490.0 //end
//Log Large4 network: 591068.0 //end
//Log Server network: 1897894377.0 //end
//Log Total Actual Pretrain Comm Cost: 1813.61 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 108394.78 ms//end
//Log Max memory for Large1: 7495618560.0 //end
//Log Max memory for Large2: 8077615104.0 //end
//Log Max memory for Large3: 7162966016.0 //end
//Log Max memory for Large4: 8555933696.0 //end
//Log Max memory for Server: 17638649856.0 //end
//Log Large1 network: 180961673.0 //end
//Log Large2 network: 271580161.0 //end
//Log Large3 network: 181029342.0 //end
//Log Large4 network: 270493486.0 //end
//Log Server network: 29325028.0 //end
//Log Total Actual Train Comm Cost: 890.15 MB //end
Train end time recorded and duration set to gauge.
        test_acc
0-DHFR  0.750000
1-DHFR  0.750000
2-DHFR  0.750000
3-DHFR  0.714286
4-DHFR  0.750000
5-DHFR  0.714286
6-DHFR  0.625000
7-DHFR  0.750000
8-DHFR  0.750000
9-DHFR  0.625000
Average test accuracy: 0.7179403375326836
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=52008, ip=192.168.14.62)[0m inx: 9
[36m(Trainer pid=52008, ip=192.168.14.62)[0m dataset_trainer_name: 9-DHFR
[36m(Trainer pid=52008, ip=192.168.14.62)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd3176be650>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd318e134d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd317b00d50>}
[36m(Trainer pid=52008, ip=192.168.14.62)[0m num_node_features: 53
[36m(Trainer pid=52008, ip=192.168.14.62)[0m num_graph_labels: 2
[36m(Trainer pid=52008, ip=192.168.14.62)[0m train_size: 57
[36m(Trainer pid=52008, ip=192.168.14.62)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=52008, ip=192.168.14.62)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+, Dataset: DHFR, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  DHFR  Total number of graphs:  756
Initialization start: network data collected.
using CPU
2025-05-14 23:14:38,634	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 23:14:38,634	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 23:14:38,640	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
[36m(Trainer pid=48888, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=48888, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=48888, ip=192.168.14.54)[0m inx: 0
[36m(Trainer pid=48888, ip=192.168.14.54)[0m dataset_trainer_name: 0-DHFR
[36m(Trainer pid=48888, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f223879a390>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2238c0ae10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2238bfd2d0>}
[36m(Trainer pid=48888, ip=192.168.14.54)[0m num_node_features: 53
[36m(Trainer pid=48888, ip=192.168.14.54)[0m num_graph_labels: 2
[36m(Trainer pid=48888, ip=192.168.14.54)[0m train_size: 64
[36m(Trainer pid=49017, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 4x across cluster][0m
[36m(Trainer pid=49017, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 4x across cluster][0m
[36m(Trainer pid=49017, ip=192.168.14.54)[0m inx: 4[32m [repeated 4x across cluster][0m
[36m(Trainer pid=49017, ip=192.168.14.54)[0m dataset_trainer_name: 4-DHFR[32m [repeated 4x across cluster][0m
[36m(Trainer pid=49017, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6c7c28f410>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6c7f70bfd0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6c7f702310>}[32m [repeated 4x across cluster][0m
[36m(Trainer pid=49017, ip=192.168.14.54)[0m num_node_features: 53[32m [repeated 4x across cluster][0m
[36m(Trainer pid=49017, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 4x across cluster][0m
[36m(Trainer pid=49017, ip=192.168.14.54)[0m train_size: 57[32m [repeated 4x across cluster][0m
//Log init_time: 13527.508 ms //end
//Log Large1 init network: 1250922.0 //end
//Log Large2 init network: 1075642.0 //end
//Log Large3 init network: 1014410.0 //end
//Log Large4 init network: 1702356.0 //end
//Log Server init network: 4364924703.0 //end
//Log Initialization Communication Cost (MB): 4167.53 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 9.806000000000001 ms//end
[36m(Trainer pid=49157, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 4x across cluster][0m
[36m(Trainer pid=49157, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 4x across cluster][0m
[36m(Trainer pid=49157, ip=192.168.14.54)[0m inx: 8[32m [repeated 4x across cluster][0m
[36m(Trainer pid=49157, ip=192.168.14.54)[0m dataset_trainer_name: 8-DHFR[32m [repeated 4x across cluster][0m
[36m(Trainer pid=49157, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fb2f0b65890>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fb2f0b73cd0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fb2f0b66f90>}[32m [repeated 4x across cluster][0m
[36m(Trainer pid=49157, ip=192.168.14.54)[0m num_node_features: 53[32m [repeated 4x across cluster][0m
[36m(Trainer pid=49157, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 4x across cluster][0m
[36m(Trainer pid=49157, ip=192.168.14.54)[0m train_size: 61[32m [repeated 4x across cluster][0m
//Log Max memory for Large1: 8548823040.0 //end
//Log Max memory for Large2: 7157968896.0 //end
//Log Max memory for Large3: 8067776512.0 //end
//Log Max memory for Large4: 7467089920.0 //end
//Log Max memory for Server: 17716097024.0 //end
//Log Large1 network: 1054099.0 //end
//Log Large2 network: 580724.0 //end
//Log Large3 network: 1069232.0 //end
//Log Large4 network: 531189.0 //end
//Log Server network: 1897798424.0 //end
//Log Total Actual Pretrain Comm Cost: 1812.97 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 105291.886 ms//end
//Log Max memory for Large1: 8576421888.0 //end
//Log Max memory for Large2: 7170670592.0 //end
//Log Max memory for Large3: 8080617472.0 //end
//Log Max memory for Large4: 7469703168.0 //end
//Log Max memory for Server: 17657012224.0 //end
//Log Large1 network: 270444470.0 //end
//Log Large2 network: 181201917.0 //end
//Log Large3 network: 271337849.0 //end
//Log Large4 network: 181010268.0 //end
//Log Server network: 29510341.0 //end
//Log Total Actual Train Comm Cost: 890.26 MB //end
Train end time recorded and duration set to gauge.
        test_acc
0-DHFR     0.750
1-DHFR     0.750
2-DHFR     0.750
3-DHFR     0.750
4-DHFR     0.750
5-DHFR     0.625
6-DHFR     0.750
7-DHFR     0.750
8-DHFR     0.625
9-DHFR     0.625
Average test accuracy: 0.714018302828619
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=49054, ip=192.168.39.156)[0m inx: 9
[36m(Trainer pid=49054, ip=192.168.39.156)[0m dataset_trainer_name: 9-DHFR
[36m(Trainer pid=49054, ip=192.168.39.156)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc837f67d90>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc8385c5d10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc8385fb710>}
[36m(Trainer pid=49054, ip=192.168.39.156)[0m num_node_features: 53
[36m(Trainer pid=49054, ip=192.168.39.156)[0m num_graph_labels: 2
[36m(Trainer pid=49054, ip=192.168.39.156)[0m train_size: 57
[36m(Trainer pid=49054, ip=192.168.39.156)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=49054, ip=192.168.39.156)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+dWs, Dataset: DHFR, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  DHFR  Total number of graphs:  756
Initialization start: network data collected.
using CPU
2025-05-14 23:17:42,849	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 23:17:42,849	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 23:17:42,856	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
[36m(Trainer pid=49927, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=49927, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=49927, ip=192.168.42.57)[0m inx: 0
[36m(Trainer pid=49927, ip=192.168.42.57)[0m dataset_trainer_name: 0-DHFR
[36m(Trainer pid=49927, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa4f7aefed0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa4f8179710>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa4f7c58650>}
[36m(Trainer pid=49927, ip=192.168.42.57)[0m num_node_features: 53
[36m(Trainer pid=49927, ip=192.168.42.57)[0m num_graph_labels: 2
[36m(Trainer pid=49927, ip=192.168.42.57)[0m train_size: 64
[36m(Trainer pid=50056, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 4x across cluster][0m
[36m(Trainer pid=50056, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 4x across cluster][0m
[36m(Trainer pid=50056, ip=192.168.42.57)[0m inx: 4[32m [repeated 4x across cluster][0m
[36m(Trainer pid=50056, ip=192.168.42.57)[0m dataset_trainer_name: 4-DHFR[32m [repeated 4x across cluster][0m
[36m(Trainer pid=50056, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f17a46f8b50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f17a4d87b50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f17a4d7dcd0>}[32m [repeated 4x across cluster][0m
[36m(Trainer pid=50056, ip=192.168.42.57)[0m num_node_features: 53[32m [repeated 4x across cluster][0m
[36m(Trainer pid=50056, ip=192.168.42.57)[0m num_graph_labels: 2[32m [repeated 4x across cluster][0m
[36m(Trainer pid=50056, ip=192.168.42.57)[0m train_size: 57[32m [repeated 4x across cluster][0m
//Log init_time: 13019.588 ms //end
//Log Large1 init network: 1246097.0 //end
//Log Large2 init network: 1921096.0 //end
//Log Large3 init network: 703466.0 //end
//Log Large4 init network: 1705621.0 //end
//Log Server init network: 4364940212.0 //end
//Log Initialization Communication Cost (MB): 4168.05 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 6.898 ms//end
[36m(Trainer pid=50187, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 4x across cluster][0m
[36m(Trainer pid=50187, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 4x across cluster][0m
[36m(Trainer pid=50187, ip=192.168.42.57)[0m inx: 8[32m [repeated 4x across cluster][0m
[36m(Trainer pid=50187, ip=192.168.42.57)[0m dataset_trainer_name: 8-DHFR[32m [repeated 4x across cluster][0m
[36m(Trainer pid=50187, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f43328c8b10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4332f344d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4332f3de90>}[32m [repeated 4x across cluster][0m
[36m(Trainer pid=50187, ip=192.168.42.57)[0m num_node_features: 53[32m [repeated 4x across cluster][0m
[36m(Trainer pid=50187, ip=192.168.42.57)[0m num_graph_labels: 2[32m [repeated 4x across cluster][0m
[36m(Trainer pid=50187, ip=192.168.42.57)[0m train_size: 61[32m [repeated 4x across cluster][0m
//Log Max memory for Large1: 7471685632.0 //end
//Log Max memory for Large2: 8058900480.0 //end
//Log Max memory for Large3: 7144132608.0 //end
//Log Max memory for Large4: 8539459584.0 //end
//Log Max memory for Server: 17719840768.0 //end
//Log Large1 network: 530208.0 //end
//Log Large2 network: 1492021.0 //end
//Log Large3 network: 1149579.0 //end
//Log Large4 network: 1257129.0 //end
//Log Server network: 1897914272.0 //end
//Log Total Actual Pretrain Comm Cost: 1814.22 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 106943.19799999999 ms//end
//Log Max memory for Large1: 7489093632.0 //end
//Log Max memory for Large2: 8073404416.0 //end
//Log Max memory for Large3: 7154860032.0 //end
//Log Max memory for Large4: 8557936640.0 //end
//Log Max memory for Server: 17733279744.0 //end
//Log Large1 network: 181037889.0 //end
//Log Large2 network: 271289449.0 //end
//Log Large3 network: 181038876.0 //end
//Log Large4 network: 270719554.0 //end
//Log Server network: 29579039.0 //end
//Log Total Actual Train Comm Cost: 890.41 MB //end
Train end time recorded and duration set to gauge.
        test_acc
0-DHFR  0.750000
1-DHFR  0.750000
2-DHFR  0.750000
3-DHFR  0.750000
4-DHFR  0.750000
5-DHFR  0.714286
6-DHFR  0.625000
7-DHFR  0.714286
8-DHFR  0.625000
9-DHFR  0.625000
Average test accuracy: 0.7050748752079867
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=54209, ip=192.168.14.62)[0m inx: 9
[36m(Trainer pid=54209, ip=192.168.14.62)[0m dataset_trainer_name: 9-DHFR
[36m(Trainer pid=54209, ip=192.168.14.62)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa6002759d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa6006c5410>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa6006e9710>}
[36m(Trainer pid=54209, ip=192.168.14.62)[0m num_node_features: 53
[36m(Trainer pid=54209, ip=192.168.14.62)[0m num_graph_labels: 2
[36m(Trainer pid=54209, ip=192.168.14.62)[0m train_size: 57
[36m(Trainer pid=54209, ip=192.168.14.62)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=54209, ip=192.168.14.62)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: SelfTrain, Dataset: AIDS, Trainers: 10
--------------------------------------------------------------------------------

Downloading https://www.chrsmrrs.com/graphkerneldatasets/AIDS.zip
Processing...
Done!
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  AIDS  Total number of graphs:  2000
Initialization start: network data collected.
using CPU
2025-05-14 23:20:50,916	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 23:20:50,917	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 23:20:50,922	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
[36m(Trainer pid=51105, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=51105, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=51105, ip=192.168.14.54)[0m inx: 0
[36m(Trainer pid=51105, ip=192.168.14.54)[0m dataset_trainer_name: 0-AIDS
[36m(Trainer pid=51105, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f84205ed1d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8420176f10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8420181bd0>}
[36m(Trainer pid=51105, ip=192.168.14.54)[0m num_node_features: 38
[36m(Trainer pid=51105, ip=192.168.14.54)[0m num_graph_labels: 2
[36m(Trainer pid=51105, ip=192.168.14.54)[0m train_size: 177
[36m(Trainer pid=51147, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51147, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51147, ip=192.168.42.57)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51147, ip=192.168.42.57)[0m dataset_trainer_name: 2-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51147, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fac3330e350>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fac331cfcd0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fac331d81d0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51147, ip=192.168.42.57)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51147, ip=192.168.42.57)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51147, ip=192.168.42.57)[0m train_size: 168[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51268, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51268, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51268, ip=192.168.14.54)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51268, ip=192.168.14.54)[0m dataset_trainer_name: 4-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51268, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f341c0ece50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f33f01748d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f33f0175c50>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51268, ip=192.168.14.54)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51268, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51268, ip=192.168.14.54)[0m train_size: 168[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51308, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51308, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51308, ip=192.168.42.57)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51308, ip=192.168.42.57)[0m dataset_trainer_name: 6-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51308, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd540be9350>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd5042c52d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd5042e45d0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51308, ip=192.168.42.57)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51308, ip=192.168.42.57)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51308, ip=192.168.42.57)[0m train_size: 157[32m [repeated 2x across cluster][0m
//Log init_time: 30180.001 ms //end
//Log Large1 init network: 4411279.0 //end
//Log Large2 init network: 4571545.0 //end
//Log Large3 init network: 2566411.0 //end
//Log Large4 init network: 3999347.0 //end
//Log Server init network: 12756937784.0 //end
//Log Initialization Communication Cost (MB): 12180.79 //end

Done setting up devices.
Running SelfTrain ...
Pretrain start time recorded.
//pretrain_time: 9.036000000000001 ms//end
[36m(Trainer pid=51422, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51422, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51422, ip=192.168.14.54)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51422, ip=192.168.14.54)[0m dataset_trainer_name: 8-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51422, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fcf3e5e5c90>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fcf3e494290>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fcf3e4aa750>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51422, ip=192.168.14.54)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51422, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51422, ip=192.168.14.54)[0m train_size: 155[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 12013449216.0 //end
//Log Max memory for Large2: 9118982144.0 //end
//Log Max memory for Large3: 11311005696.0 //end
//Log Max memory for Large4: 9643487232.0 //end
//Log Max memory for Server: 17841188864.0 //end
//Log Large1 network: 650457.0 //end
//Log Large2 network: 588217.0 //end
//Log Large3 network: 1718430.0 //end
//Log Large4 network: 533552.0 //end
//Log Server network: 1474290346.0 //end
//Log Total Actual Pretrain Comm Cost: 1409.32 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
  > 3-AIDS done.
trainingaccs: 0.5244755244755245, valaccs: 1.0, acc: 0.8333333333333334
  > 5-AIDS done.
trainingaccs: 0.4266666666666667, valaccs: 0.21052631578947367, acc: 0.2631578947368421
  > 1-AIDS done.
trainingaccs: 0.1610738255033557, valaccs: 0.05263157894736842, acc: 0.10526315789473684
  > 9-AIDS done.
trainingaccs: 0.4909090909090909, valaccs: 0.42857142857142855, acc: 0.38095238095238093
  > 7-AIDS done.
trainingaccs: 0.4451219512195122, valaccs: 0.8, acc: 0.8095238095238095
  > 2-AIDS done.
trainingaccs: 0.5952380952380952, valaccs: 0.6190476190476191, acc: 0.4090909090909091
  > 4-AIDS done.
trainingaccs: 0.4107142857142857, valaccs: 0.19047619047619047, acc: 0.23809523809523808
  > 0-AIDS done.
trainingaccs: 0.5706214689265536, valaccs: 0.22727272727272727, acc: 0.2608695652173913
  > 8-AIDS done.
trainingaccs: 0.2645161290322581, valaccs: 0.0, acc: 0.0
  > 6-AIDS done.
trainingaccs: 0.20382165605095542, valaccs: 0.8, acc: 0.65
//train_time: 63.792 ms//end
//Log Max memory for Large1: 12023435264.0 //end
//Log Max memory for Large2: 9121202176.0 //end
//Log Max memory for Large3: 11319214080.0 //end
//Log Max memory for Large4: 9652449280.0 //end
//Log Max memory for Server: 17841692672.0 //end
//Log Large1 network: 597292.0 //end
//Log Large2 network: 640047.0 //end
//Log Large3 network: 591782.0 //end
//Log Large4 network: 532111.0 //end
//Log Server network: 1279636.0 //end
//Log Total Actual Train Comm Cost: 3.47 MB //end
Train end time recorded and duration set to gauge.
        test_acc
3-AIDS  0.833333
5-AIDS  0.263158
1-AIDS  0.105263
9-AIDS  0.380952
7-AIDS  0.809524
2-AIDS  0.409091
4-AIDS  0.238095
0-AIDS  0.260870
8-AIDS  0.000000
6-AIDS  0.650000
Average test accuracy: 0.4032882987208876
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 2.22 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 2.22 MB //end
[36m(Trainer pid=51337, ip=192.168.39.156)[0m inx: 9
[36m(Trainer pid=51337, ip=192.168.39.156)[0m dataset_trainer_name: 9-AIDS
[36m(Trainer pid=51337, ip=192.168.39.156)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4c7f8bdc90>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4c7f23ac90>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4c7f25a190>}
[36m(Trainer pid=51337, ip=192.168.39.156)[0m num_node_features: 38
[36m(Trainer pid=51337, ip=192.168.39.156)[0m num_graph_labels: 2
[36m(Trainer pid=51337, ip=192.168.39.156)[0m train_size: 165
[36m(Trainer pid=51337, ip=192.168.39.156)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=51337, ip=192.168.39.156)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: FedAvg, Dataset: AIDS, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  AIDS  Total number of graphs:  2000
Initialization start: network data collected.
using CPU
2025-05-14 23:22:26,817	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 23:22:26,818	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 23:22:26,824	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
[36m(Trainer pid=51781, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=51781, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=51781, ip=192.168.42.57)[0m inx: 0
[36m(Trainer pid=51781, ip=192.168.42.57)[0m dataset_trainer_name: 0-AIDS
[36m(Trainer pid=51781, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3c210f96d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3c20fb4190>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3c20fb43d0>}
[36m(Trainer pid=51781, ip=192.168.42.57)[0m num_node_features: 38
[36m(Trainer pid=51781, ip=192.168.42.57)[0m num_graph_labels: 2
[36m(Trainer pid=51781, ip=192.168.42.57)[0m train_size: 177
[36m(Trainer pid=51925, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51925, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51925, ip=192.168.14.54)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51925, ip=192.168.14.54)[0m dataset_trainer_name: 2-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51925, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f96c7f05d50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f96c7dcbe90>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f96c7dd38d0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51925, ip=192.168.14.54)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51925, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51925, ip=192.168.14.54)[0m train_size: 168[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51942, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51942, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51942, ip=192.168.42.57)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51942, ip=192.168.42.57)[0m dataset_trainer_name: 4-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51942, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fb21dc6d950>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fb21b9d98d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fb21b9e7b90>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51942, ip=192.168.42.57)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51942, ip=192.168.42.57)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=51942, ip=192.168.42.57)[0m train_size: 168[32m [repeated 2x across cluster][0m
[36m(Trainer pid=52079, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=52079, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=52079, ip=192.168.14.54)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=52079, ip=192.168.14.54)[0m dataset_trainer_name: 6-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=52079, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2203bb3e50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f21dc2a13d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f21dc2c0650>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=52079, ip=192.168.14.54)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=52079, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=52079, ip=192.168.14.54)[0m train_size: 157[32m [repeated 2x across cluster][0m
//Log init_time: 30204.443000000003 ms //end
//Log Large1 init network: 3129257.0 //end
//Log Large2 init network: 4243408.0 //end
//Log Large3 init network: 2496335.0 //end
//Log Large4 init network: 5273504.0 //end
//Log Server init network: 12754739680.0 //end
//Log Initialization Communication Cost (MB): 12178.31 //end

Done setting up devices.
Running FedAvg ...
Pretrain start time recorded.
//pretrain_time: 9.461 ms//end
[36m(Trainer pid=52095, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=52095, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=52095, ip=192.168.42.57)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=52095, ip=192.168.42.57)[0m dataset_trainer_name: 8-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=52095, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f13216bc550>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f132136bd50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f13213862d0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=52095, ip=192.168.42.57)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=52095, ip=192.168.42.57)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=52095, ip=192.168.42.57)[0m train_size: 155[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 9637171200.0 //end
//Log Max memory for Large2: 11310297088.0 //end
//Log Max memory for Large3: 9119715328.0 //end
//Log Max memory for Large4: 12004237312.0 //end
//Log Max memory for Server: 17872879616.0 //end
//Log Large1 network: 515241.0 //end
//Log Large2 network: 2497417.0 //end
//Log Large3 network: 508464.0 //end
//Log Large4 network: 827598.0 //end
//Log Server network: 1474280781.0 //end
//Log Total Actual Pretrain Comm Cost: 1410.13 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 222214.115 ms//end
//Log Max memory for Large1: 9633783808.0 //end
//Log Max memory for Large2: 11333009408.0 //end
//Log Max memory for Large3: 9133871104.0 //end
//Log Max memory for Large4: 12024152064.0 //end
//Log Max memory for Server: 17778761728.0 //end
//Log Large1 network: 58927092.0 //end
//Log Large2 network: 87402307.0 //end
//Log Large3 network: 58887903.0 //end
//Log Large4 network: 86410624.0 //end
//Log Server network: 143618796.0 //end
//Log Total Actual Train Comm Cost: 415.08 MB //end
Train end time recorded and duration set to gauge.
        test_acc
3-AIDS  0.944444
4-AIDS  0.952381
2-AIDS  1.000000
7-AIDS  1.000000
1-AIDS  1.000000
8-AIDS  1.000000
0-AIDS  1.000000
9-AIDS  0.952381
6-AIDS  1.000000
5-AIDS  1.000000
Average test accuracy: 0.9844999403270079
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=56113, ip=192.168.14.62)[0m inx: 9
[36m(Trainer pid=56113, ip=192.168.14.62)[0m dataset_trainer_name: 9-AIDS
[36m(Trainer pid=56113, ip=192.168.14.62)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0b71605dd0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0b384140d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0b38427510>}
[36m(Trainer pid=56113, ip=192.168.14.62)[0m num_node_features: 38
[36m(Trainer pid=56113, ip=192.168.14.62)[0m num_graph_labels: 2
[36m(Trainer pid=56113, ip=192.168.14.62)[0m train_size: 165
[36m(Trainer pid=56113, ip=192.168.14.62)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=56113, ip=192.168.14.62)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: FedProx, Dataset: AIDS, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  AIDS  Total number of graphs:  2000
Initialization start: network data collected.
using CPU
2025-05-14 23:27:45,015	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 23:27:45,015	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 23:27:45,022	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
[36m(Trainer pid=53492, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=53492, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=53492, ip=192.168.14.54)[0m inx: 0
[36m(Trainer pid=53492, ip=192.168.14.54)[0m dataset_trainer_name: 0-AIDS
[36m(Trainer pid=53492, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0282a41e10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f02803df0d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f02803ea2d0>}
[36m(Trainer pid=53492, ip=192.168.14.54)[0m num_node_features: 38
[36m(Trainer pid=53492, ip=192.168.14.54)[0m num_graph_labels: 2
[36m(Trainer pid=53492, ip=192.168.14.54)[0m train_size: 177
[36m(Trainer pid=53536, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=53536, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=53536, ip=192.168.42.57)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=53536, ip=192.168.42.57)[0m dataset_trainer_name: 2-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=53536, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6ac05e1f10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6a802c4390>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6a802c64d0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=53536, ip=192.168.42.57)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=53536, ip=192.168.42.57)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=53536, ip=192.168.42.57)[0m train_size: 168[32m [repeated 2x across cluster][0m
[36m(Trainer pid=53662, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=53662, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=53662, ip=192.168.14.54)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=53662, ip=192.168.14.54)[0m dataset_trainer_name: 4-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=53662, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f50695df990>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f50380e9090>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f50380ea290>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=53662, ip=192.168.14.54)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=53662, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=53662, ip=192.168.14.54)[0m train_size: 168[32m [repeated 2x across cluster][0m
[36m(Trainer pid=53697, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=53697, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=53697, ip=192.168.42.57)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=53697, ip=192.168.42.57)[0m dataset_trainer_name: 6-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=53697, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8781d75190>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f878168cc90>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f878169f4d0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=53697, ip=192.168.42.57)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=53697, ip=192.168.42.57)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=53697, ip=192.168.42.57)[0m train_size: 157[32m [repeated 2x across cluster][0m
//Log init_time: 31118.821 ms //end
//Log Large1 init network: 3667052.0 //end
//Log Large2 init network: 4298883.0 //end
//Log Large3 init network: 2616366.0 //end
//Log Large4 init network: 3527327.0 //end
//Log Server init network: 12754850187.0 //end
//Log Initialization Communication Cost (MB): 12177.43 //end

Done setting up devices.
Running FedAvg ...
Pretrain start time recorded.
//pretrain_time: 12.770999999999999 ms//end
[36m(Trainer pid=53815, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=53815, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=53815, ip=192.168.14.54)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=53815, ip=192.168.14.54)[0m dataset_trainer_name: 8-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=53815, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0bd43042d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0bcc7cba50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0bcc7edf10>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=53815, ip=192.168.14.54)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=53815, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=53815, ip=192.168.14.54)[0m train_size: 155[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 12010237952.0 //end
//Log Max memory for Large2: 9116487680.0 //end
//Log Max memory for Large3: 11310747648.0 //end
//Log Max memory for Large4: 9634000896.0 //end
//Log Max memory for Server: 17810673664.0 //end
//Log Large1 network: 1299852.0 //end
//Log Large2 network: 572966.0 //end
//Log Large3 network: 1612568.0 //end
//Log Large4 network: 522332.0 //end
//Log Server network: 1474227608.0 //end
//Log Total Actual Pretrain Comm Cost: 1409.76 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 224001.858 ms//end
//Log Max memory for Large1: 12015935488.0 //end
//Log Max memory for Large2: 9137631232.0 //end
//Log Max memory for Large3: 11300880384.0 //end
//Log Max memory for Large4: 9642774528.0 //end
//Log Max memory for Server: 17752260608.0 //end
//Log Large1 network: 86595044.0 //end
//Log Large2 network: 59898718.0 //end
//Log Large3 network: 86856013.0 //end
//Log Large4 network: 59062213.0 //end
//Log Server network: 143897922.0 //end
//Log Total Actual Train Comm Cost: 416.10 MB //end
Train end time recorded and duration set to gauge.
        test_acc
1-AIDS  1.000000
3-AIDS  1.000000
6-AIDS  1.000000
0-AIDS  1.000000
4-AIDS  0.952381
7-AIDS  1.000000
9-AIDS  0.952381
2-AIDS  1.000000
5-AIDS  1.000000
8-AIDS  1.000000
Average test accuracy: 0.9903031387993795
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=53724, ip=192.168.39.156)[0m inx: 9
[36m(Trainer pid=53724, ip=192.168.39.156)[0m dataset_trainer_name: 9-AIDS
[36m(Trainer pid=53724, ip=192.168.39.156)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe9c8ad2b50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe988182810>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe98819a4d0>}
[36m(Trainer pid=53724, ip=192.168.39.156)[0m num_node_features: 38
[36m(Trainer pid=53724, ip=192.168.39.156)[0m num_graph_labels: 2
[36m(Trainer pid=53724, ip=192.168.39.156)[0m train_size: 165
[36m(Trainer pid=53724, ip=192.168.39.156)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=53724, ip=192.168.39.156)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL, Dataset: AIDS, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  AIDS  Total number of graphs:  2000
Initialization start: network data collected.
using CPU
2025-05-14 23:33:05,895	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 23:33:05,895	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 23:33:05,901	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
[36m(Trainer pid=55117, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=55117, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=55117, ip=192.168.42.57)[0m inx: 0
[36m(Trainer pid=55117, ip=192.168.42.57)[0m dataset_trainer_name: 0-AIDS
[36m(Trainer pid=55117, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f99a0a07ed0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f996c0b0210>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f996c0b0810>}
[36m(Trainer pid=55117, ip=192.168.42.57)[0m num_node_features: 38
[36m(Trainer pid=55117, ip=192.168.42.57)[0m num_graph_labels: 2
[36m(Trainer pid=55117, ip=192.168.42.57)[0m train_size: 177
[36m(Trainer pid=55268, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=55268, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=55268, ip=192.168.14.54)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=55268, ip=192.168.14.54)[0m dataset_trainer_name: 2-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=55268, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f7d5632bc50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f7d5239d010>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f7d5239eed0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=55268, ip=192.168.14.54)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=55268, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=55268, ip=192.168.14.54)[0m train_size: 168[32m [repeated 2x across cluster][0m
[36m(Trainer pid=55278, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=55278, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=55278, ip=192.168.42.57)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=55278, ip=192.168.42.57)[0m dataset_trainer_name: 4-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=55278, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9a8fa2dc10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9a58417e10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9a5841f750>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=55278, ip=192.168.42.57)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=55278, ip=192.168.42.57)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=55278, ip=192.168.42.57)[0m train_size: 168[32m [repeated 2x across cluster][0m
[36m(Trainer pid=55421, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=55421, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=55421, ip=192.168.14.54)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=55421, ip=192.168.14.54)[0m dataset_trainer_name: 6-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=55421, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9b7ddadad0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9b77e4c850>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9b77e5b550>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=55421, ip=192.168.14.54)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=55421, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=55421, ip=192.168.14.54)[0m train_size: 157[32m [repeated 2x across cluster][0m
//Log init_time: 30471.448 ms //end
//Log Large1 init network: 2986414.0 //end
//Log Large2 init network: 4219773.0 //end
//Log Large3 init network: 2589404.0 //end
//Log Large4 init network: 5448508.0 //end
//Log Server init network: 12755022893.0 //end
//Log Initialization Communication Cost (MB): 12178.68 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 6.515 ms//end
[36m(Trainer pid=55439, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=55439, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=55439, ip=192.168.42.57)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=55439, ip=192.168.42.57)[0m dataset_trainer_name: 8-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=55439, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd36390bf90>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd3639c76d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd3639e9f10>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=55439, ip=192.168.42.57)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=55439, ip=192.168.42.57)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=55439, ip=192.168.42.57)[0m train_size: 155[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 9632980992.0 //end
//Log Max memory for Large2: 11313745920.0 //end
//Log Max memory for Large3: 9100877824.0 //end
//Log Max memory for Large4: 12008579072.0 //end
//Log Max memory for Server: 17873358848.0 //end
//Log Large1 network: 563755.0 //end
//Log Large2 network: 2626964.0 //end
//Log Large3 network: 567262.0 //end
//Log Large4 network: 581645.0 //end
//Log Server network: 1473713679.0 //end
//Log Total Actual Pretrain Comm Cost: 1409.58 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 165082.11 ms//end
//Log Max memory for Large1: 9635282944.0 //end
//Log Max memory for Large2: 11327369216.0 //end
//Log Max memory for Large3: 9104412672.0 //end
//Log Max memory for Large4: 12012584960.0 //end
//Log Max memory for Server: 17749766144.0 //end
//Log Large1 network: 181233930.0 //end
//Log Large2 network: 270574249.0 //end
//Log Large3 network: 181296279.0 //end
//Log Large4 network: 271248238.0 //end
//Log Server network: 31924554.0 //end
//Log Total Actual Train Comm Cost: 892.90 MB //end
Train end time recorded and duration set to gauge.
        test_acc
0-AIDS  1.000000
1-AIDS  0.952381
2-AIDS  0.954545
3-AIDS  0.952381
4-AIDS  1.000000
5-AIDS  0.954545
6-AIDS  0.950000
7-AIDS  1.000000
8-AIDS  0.952381
9-AIDS  0.952381
Average test accuracy: 0.9677647853399733
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=59449, ip=192.168.14.62)[0m inx: 9
[36m(Trainer pid=59449, ip=192.168.14.62)[0m dataset_trainer_name: 9-AIDS
[36m(Trainer pid=59449, ip=192.168.14.62)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7eecbe2e9690>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7eecbe07e910>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7eecbe095c50>}
[36m(Trainer pid=59449, ip=192.168.14.62)[0m num_node_features: 38
[36m(Trainer pid=59449, ip=192.168.14.62)[0m num_graph_labels: 2
[36m(Trainer pid=59449, ip=192.168.14.62)[0m train_size: 165
[36m(Trainer pid=59449, ip=192.168.14.62)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=59449, ip=192.168.14.62)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+, Dataset: AIDS, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  AIDS  Total number of graphs:  2000
Initialization start: network data collected.
using CPU
2025-05-14 23:37:27,444	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 23:37:27,444	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 23:37:27,450	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
[36m(Trainer pid=56602, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=56602, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=56602, ip=192.168.14.54)[0m inx: 0
[36m(Trainer pid=56602, ip=192.168.14.54)[0m dataset_trainer_name: 0-AIDS
[36m(Trainer pid=56602, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2743a23b50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f273f99f550>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f273f9ab1d0>}
[36m(Trainer pid=56602, ip=192.168.14.54)[0m num_node_features: 38
[36m(Trainer pid=56602, ip=192.168.14.54)[0m num_graph_labels: 2
[36m(Trainer pid=56602, ip=192.168.14.54)[0m train_size: 177
[36m(Trainer pid=56638, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=56638, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=56638, ip=192.168.42.57)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=56638, ip=192.168.42.57)[0m dataset_trainer_name: 2-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=56638, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc099683f50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc06c245610>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc06c253f90>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=56638, ip=192.168.42.57)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=56638, ip=192.168.42.57)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=56638, ip=192.168.42.57)[0m train_size: 168[32m [repeated 2x across cluster][0m
[36m(Trainer pid=56756, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=56756, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=56756, ip=192.168.14.54)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=56756, ip=192.168.14.54)[0m dataset_trainer_name: 4-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=56756, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f838aa64d10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f838ab391d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f838ab46290>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=56756, ip=192.168.14.54)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=56756, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=56756, ip=192.168.14.54)[0m train_size: 168[32m [repeated 2x across cluster][0m
[36m(Trainer pid=56800, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=56800, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=56800, ip=192.168.42.57)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=56800, ip=192.168.42.57)[0m dataset_trainer_name: 6-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=56800, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f29d8e2ad10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f29a439c7d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f29a43ab2d0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=56800, ip=192.168.42.57)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=56800, ip=192.168.42.57)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=56800, ip=192.168.42.57)[0m train_size: 157[32m [repeated 2x across cluster][0m
//Log init_time: 31775.257 ms //end
//Log Large1 init network: 4501317.0 //end
//Log Large2 init network: 4501189.0 //end
//Log Large3 init network: 2596825.0 //end
//Log Large4 init network: 3649015.0 //end
//Log Server init network: 11673299391.0 //end
//Log Initialization Communication Cost (MB): 11147.07 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 6.842 ms//end
[36m(Trainer pid=56927, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=56927, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=56927, ip=192.168.14.54)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=56927, ip=192.168.14.54)[0m dataset_trainer_name: 8-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=56927, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f76a25ae610>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f767c38f890>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f767c3b1cd0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=56927, ip=192.168.14.54)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=56927, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=56927, ip=192.168.14.54)[0m train_size: 155[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 12005285888.0 //end
//Log Max memory for Large2: 9116774400.0 //end
//Log Max memory for Large3: 11295825920.0 //end
//Log Max memory for Large4: 9638731776.0 //end
//Log Max memory for Server: 17922002944.0 //end
//Log Large1 network: 594287.0 //end
//Log Large2 network: 576719.0 //end
//Log Large3 network: 1664678.0 //end
//Log Large4 network: 526170.0 //end
//Log Server network: 2556120041.0 //end
//Log Total Actual Pretrain Comm Cost: 2440.91 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 164931.337 ms//end
//Log Max memory for Large1: 12013174784.0 //end
//Log Max memory for Large2: 9124704256.0 //end
//Log Max memory for Large3: 11309125632.0 //end
//Log Max memory for Large4: 9649799168.0 //end
//Log Max memory for Server: 17892159488.0 //end
//Log Large1 network: 271016431.0 //end
//Log Large2 network: 181605660.0 //end
//Log Large3 network: 270546022.0 //end
//Log Large4 network: 181252621.0 //end
//Log Server network: 31812994.0 //end
//Log Total Actual Train Comm Cost: 892.86 MB //end
Train end time recorded and duration set to gauge.
        test_acc
0-AIDS  1.000000
1-AIDS  1.000000
2-AIDS  1.000000
3-AIDS  0.952381
4-AIDS  1.000000
5-AIDS  0.954545
6-AIDS  0.950000
7-AIDS  0.954545
8-AIDS  0.950000
9-AIDS  0.954545
Average test accuracy: 0.9723168852868102
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=56818, ip=192.168.39.156)[0m inx: 9
[36m(Trainer pid=56818, ip=192.168.39.156)[0m dataset_trainer_name: 9-AIDS
[36m(Trainer pid=56818, ip=192.168.39.156)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f7909cbde10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f78d02db050>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f78d02f6390>}
[36m(Trainer pid=56818, ip=192.168.39.156)[0m num_node_features: 38
[36m(Trainer pid=56818, ip=192.168.39.156)[0m num_graph_labels: 2
[36m(Trainer pid=56818, ip=192.168.39.156)[0m train_size: 165
[36m(Trainer pid=56818, ip=192.168.39.156)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=56818, ip=192.168.39.156)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+dWs, Dataset: AIDS, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  AIDS  Total number of graphs:  2000
Initialization start: network data collected.
using CPU
2025-05-14 23:41:49,837	INFO worker.py:1429 -- Using address 192.168.45.172:6379 set in the environment variable RAY_ADDRESS
2025-05-14 23:41:49,837	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.45.172:6379...
2025-05-14 23:41:49,844	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.45.172:8265 [39m[22m
[36m(Trainer pid=57970, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=57970, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=57970, ip=192.168.42.57)[0m inx: 0
[36m(Trainer pid=57970, ip=192.168.42.57)[0m dataset_trainer_name: 0-AIDS
[36m(Trainer pid=57970, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe36510b710>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd2684d70d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd2684e1d90>}
[36m(Trainer pid=57970, ip=192.168.42.57)[0m num_node_features: 38
[36m(Trainer pid=57970, ip=192.168.42.57)[0m num_graph_labels: 2
[36m(Trainer pid=57970, ip=192.168.42.57)[0m train_size: 177
[36m(Trainer pid=58119, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=58119, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=58119, ip=192.168.14.54)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=58119, ip=192.168.14.54)[0m dataset_trainer_name: 2-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=58119, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fcb36141710>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fcb34198690>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fcb3419ad90>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=58119, ip=192.168.14.54)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=58119, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=58119, ip=192.168.14.54)[0m train_size: 168[32m [repeated 2x across cluster][0m
[36m(Trainer pid=58132, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=58132, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=58132, ip=192.168.42.57)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=58132, ip=192.168.42.57)[0m dataset_trainer_name: 4-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=58132, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fbcce6c0550>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fbc8c3ebd50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fbc8c3f2910>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=58132, ip=192.168.42.57)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=58132, ip=192.168.42.57)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=58132, ip=192.168.42.57)[0m train_size: 168[32m [repeated 2x across cluster][0m
[36m(Trainer pid=58280, ip=192.168.14.54)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=58280, ip=192.168.14.54)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=58280, ip=192.168.14.54)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=58280, ip=192.168.14.54)[0m dataset_trainer_name: 6-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=58280, ip=192.168.14.54)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3bd256c950>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3bd2624990>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3bac07f690>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=58280, ip=192.168.14.54)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=58280, ip=192.168.14.54)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=58280, ip=192.168.14.54)[0m train_size: 157[32m [repeated 2x across cluster][0m
//Log init_time: 31357.325 ms //end
//Log Large1 init network: 3030960.0 //end
//Log Large2 init network: 4255613.0 //end
//Log Large3 init network: 2509268.0 //end
//Log Large4 init network: 5388018.0 //end
//Log Server init network: 12764196995.0 //end
//Log Initialization Communication Cost (MB): 12187.37 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 6.6 ms//end
[36m(Trainer pid=58293, ip=192.168.42.57)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=58293, ip=192.168.42.57)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=58293, ip=192.168.42.57)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=58293, ip=192.168.42.57)[0m dataset_trainer_name: 8-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=58293, ip=192.168.42.57)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa75035f790>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa75020c110>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa75021ea90>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=58293, ip=192.168.42.57)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=58293, ip=192.168.42.57)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=58293, ip=192.168.42.57)[0m train_size: 155[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 9642315776.0 //end
//Log Max memory for Large2: 11321180160.0 //end
//Log Max memory for Large3: 9119686656.0 //end
//Log Max memory for Large4: 12018036736.0 //end
//Log Max memory for Server: 17907765248.0 //end
//Log Large1 network: 528347.0 //end
//Log Large2 network: 2631671.0 //end
//Log Large3 network: 584367.0 //end
//Log Large4 network: 603111.0 //end
//Log Server network: 1473860506.0 //end
//Log Total Actual Pretrain Comm Cost: 1409.73 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 173550.86299999998 ms//end
//Log Max memory for Large1: 9651798016.0 //end
//Log Max memory for Large2: 11316572160.0 //end
//Log Max memory for Large3: 9113661440.0 //end
//Log Max memory for Large4: 12021084160.0 //end
//Log Max memory for Server: 17779875840.0 //end
//Log Large1 network: 181486615.0 //end
//Log Large2 network: 270805033.0 //end
//Log Large3 network: 181413197.0 //end
//Log Large4 network: 271506316.0 //end
//Log Server network: 32174189.0 //end
//Log Total Actual Train Comm Cost: 893.96 MB //end
Train end time recorded and duration set to gauge.
        test_acc
0-AIDS  0.956522
1-AIDS  0.952381
2-AIDS  0.952381
3-AIDS  0.956522
4-AIDS  0.956522
5-AIDS  0.956522
6-AIDS  0.954545
7-AIDS  0.952381
8-AIDS  0.950000
9-AIDS  0.950000
Average test accuracy: 0.953771769438654
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=62298, ip=192.168.14.62)[0m inx: 9
[36m(Trainer pid=62298, ip=192.168.14.62)[0m dataset_trainer_name: 9-AIDS
[36m(Trainer pid=62298, ip=192.168.14.62)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f271c573fd0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f271c20ec50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f271c22e510>}
[36m(Trainer pid=62298, ip=192.168.14.62)[0m num_node_features: 38
[36m(Trainer pid=62298, ip=192.168.14.62)[0m num_graph_labels: 2
[36m(Trainer pid=62298, ip=192.168.14.62)[0m train_size: 165
[36m(Trainer pid=62298, ip=192.168.14.62)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=62298, ip=192.168.14.62)[0m   return torch.load(io.BytesIO(b))
Benchmark completed.
Traceback (most recent call last):
  File "/Users/yuyang/miniconda3/envs/fedgraph-env-py310/bin/ray", line 8, in <module>
    sys.exit(main())
  File "/Users/yuyang/miniconda3/envs/fedgraph-env-py310/lib/python3.10/site-packages/ray/scripts/scripts.py", line 2691, in main
    return cli()
  File "/Users/yuyang/miniconda3/envs/fedgraph-env-py310/lib/python3.10/site-packages/click/core.py", line 1161, in __call__
    return self.main(*args, **kwargs)
  File "/Users/yuyang/miniconda3/envs/fedgraph-env-py310/lib/python3.10/site-packages/click/core.py", line 1082, in main
    rv = self.invoke(ctx)
  File "/Users/yuyang/miniconda3/envs/fedgraph-env-py310/lib/python3.10/site-packages/click/core.py", line 1697, in invoke
    return _process_result(sub_ctx.command.invoke(sub_ctx))
  File "/Users/yuyang/miniconda3/envs/fedgraph-env-py310/lib/python3.10/site-packages/click/core.py", line 1697, in invoke
    return _process_result(sub_ctx.command.invoke(sub_ctx))
  File "/Users/yuyang/miniconda3/envs/fedgraph-env-py310/lib/python3.10/site-packages/click/core.py", line 1443, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File "/Users/yuyang/miniconda3/envs/fedgraph-env-py310/lib/python3.10/site-packages/click/core.py", line 788, in invoke
    return __callback(*args, **kwargs)
  File "/Users/yuyang/miniconda3/envs/fedgraph-env-py310/lib/python3.10/site-packages/ray/dashboard/modules/job/cli_utils.py", line 54, in wrapper
    return func(*args, **kwargs)
  File "/Users/yuyang/miniconda3/envs/fedgraph-env-py310/lib/python3.10/site-packages/ray/autoscaler/_private/cli_logger.py", line 823, in wrapper
    return f(*args, **kwargs)
  File "/Users/yuyang/miniconda3/envs/fedgraph-env-py310/lib/python3.10/site-packages/ray/dashboard/modules/job/cli.py", line 310, in submit
    job_status = get_or_create_event_loop().run_until_complete(
  File "/Users/yuyang/miniconda3/envs/fedgraph-env-py310/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/Users/yuyang/miniconda3/envs/fedgraph-env-py310/lib/python3.10/site-packages/ray/dashboard/modules/job/cli.py", line 99, in _tail_logs
    return _log_job_status(client, job_id)
  File "/Users/yuyang/miniconda3/envs/fedgraph-env-py310/lib/python3.10/site-packages/ray/dashboard/modules/job/cli.py", line 78, in _log_job_status
    info = client.get_job_info(job_id)
  File "/Users/yuyang/miniconda3/envs/fedgraph-env-py310/lib/python3.10/site-packages/ray/dashboard/modules/job/sdk.py", line 355, in get_job_info
    return JobDetails(**r.json())
TypeError: 'NoneType' object is not callable
