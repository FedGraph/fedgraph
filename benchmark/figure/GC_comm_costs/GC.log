2025-07-17 08:48:43,672	INFO dashboard_sdk.py:338 -- Uploading package gcs://_ray_pkg_c7ec49547042a66b.zip.
2025-07-17 08:48:43,672	INFO packaging.py:575 -- Creating a file package for local module '.'.
Job submission server address: http://localhost:8265

-------------------------------------------------------
Job 'raysubmit_NXXsQUFHad7rAz6m' submitted successfully
-------------------------------------------------------

Next steps
  Query the logs of the job:
    ray job logs raysubmit_NXXsQUFHad7rAz6m
  Query the status of the job:
    ray job status raysubmit_NXXsQUFHad7rAz6m
  Request the job to be stopped:
    ray job stop raysubmit_NXXsQUFHad7rAz6m

Tailing logs until the job exits (disable with --no-wait):
using CPU

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: FedAvg, Dataset: IMDB-BINARY, Trainers: 10
--------------------------------------------------------------------------------

Downloading https://www.chrsmrrs.com/graphkerneldatasets/IMDB-BINARY.zip
Processing...
Done!
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  IMDB-BINARY  Total number of graphs:  1000
Initialization start: network data collected.
using CPU
2025-07-17 12:50:05,154	INFO worker.py:1429 -- Using address 192.168.2.214:6379 set in the environment variable RAY_ADDRESS
2025-07-17 12:50:05,154	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.2.214:6379...
2025-07-17 12:50:05,162	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.2.214:8265 [39m[22m
[36m(Trainer pid=9380, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=9380, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=9380, ip=192.168.47.55)[0m inx: 0
[36m(Trainer pid=9380, ip=192.168.47.55)[0m dataset_trainer_name: 0-IMDB-BINARY
[36m(Trainer pid=9380, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4465324610>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4465761310>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f44656dfdd0>}
[36m(Trainer pid=9380, ip=192.168.47.55)[0m num_node_features: 136
[36m(Trainer pid=9380, ip=192.168.47.55)[0m num_graph_labels: 2
[36m(Trainer pid=9380, ip=192.168.47.55)[0m train_size: 89
[36m(Trainer pid=9463, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster] (Ray deduplicates logs by default. Set RAY_DEDUP_LOGS=0 to disable log deduplication, or see https://docs.ray.io/en/master/ray-observability/user-guides/configure-logging.html#log-deduplication for more options.)[0m
[36m(Trainer pid=9463, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=9463, ip=192.168.47.52)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=9463, ip=192.168.47.52)[0m dataset_trainer_name: 2-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=9463, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8399ca11d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8484279b50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8399cd2510>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=9463, ip=192.168.47.52)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=9463, ip=192.168.47.52)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=9463, ip=192.168.47.52)[0m train_size: 85[32m [repeated 2x across cluster][0m
[36m(Trainer pid=9501, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=9501, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=9501, ip=192.168.47.55)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=9501, ip=192.168.47.55)[0m dataset_trainer_name: 4-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=9501, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f29befade90>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f29bf108990>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f29bf0c6ed0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=9501, ip=192.168.47.55)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=9501, ip=192.168.47.55)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=9501, ip=192.168.47.55)[0m train_size: 79[32m [repeated 2x across cluster][0m
[36m(Trainer pid=9590, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=9590, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=9590, ip=192.168.47.52)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=9590, ip=192.168.47.52)[0m dataset_trainer_name: 6-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=9590, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6b244e6b50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6b01d46e50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6b244d1690>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=9590, ip=192.168.47.52)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=9590, ip=192.168.47.52)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=9590, ip=192.168.47.52)[0m train_size: 84[32m [repeated 2x across cluster][0m
//Log init_time: 29918.034 ms //end
//Log Large1 init network: 3286043.0 //end
//Log Large2 init network: 5515062.0 //end
//Log Large3 init network: 3831013.0 //end
//Log Large4 init network: 4164062.0 //end
//Log Server init network: 11333322345.0 //end
//Log Initialization Communication Cost (MB): 10824.32 //end

Done setting up devices.
Running FedAvg ...
Pretrain start time recorded.
//pretrain_time: 10.429 ms//end
[36m(Trainer pid=9628, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=9628, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=9628, ip=192.168.47.55)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=9628, ip=192.168.47.55)[0m dataset_trainer_name: 8-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=9628, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc80a4e8b10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc80a3e95d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc854150110>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=9628, ip=192.168.47.55)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=9628, ip=192.168.47.55)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=9628, ip=192.168.47.55)[0m train_size: 75[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 8276537344.0 //end
//Log Max memory for Large2: 9449353216.0 //end
//Log Max memory for Large3: 7991705600.0 //end
//Log Max memory for Large4: 8977502208.0 //end
//Log Max memory for Server: 19636232192.0 //end
//Log Large1 network: 2256301.0 //end
//Log Large2 network: 3197899.0 //end
//Log Large3 network: 530494.0 //end
//Log Large4 network: 1939109.0 //end
//Log Server network: 2748734141.0 //end
//Log Total Actual Pretrain Comm Cost: 2628.95 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 18397.847999999998 ms//end
//Log Max memory for Large1: 10224812032.0 //end
//Log Max memory for Large2: 10961489920.0 //end
//Log Max memory for Large3: 9047199744.0 //end
//Log Max memory for Large4: 10783739904.0 //end
//Log Max memory for Server: 17754972160.0 //end
//Log Large1 network: 81023248.0 //end
//Log Large2 network: 58560962.0 //end
//Log Large3 network: 54382731.0 //end
//Log Large4 network: 80950202.0 //end
//Log Server network: 133320787.0 //end
//Log Total Actual Train Comm Cost: 389.33 MB //end
Train end time recorded and duration set to gauge.
               test_acc
5-IMDB-BINARY  0.555556
3-IMDB-BINARY  0.700000
9-IMDB-BINARY  0.818182
0-IMDB-BINARY  0.666667
2-IMDB-BINARY  0.636364
4-IMDB-BINARY  0.600000
7-IMDB-BINARY  0.636364
1-IMDB-BINARY  0.700000
8-IMDB-BINARY  0.600000
6-IMDB-BINARY  0.272727
Average test accuracy: 0.6172783107456474
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=9614, ip=192.168.2.202)[0m inx: 9
[36m(Trainer pid=9614, ip=192.168.2.202)[0m dataset_trainer_name: 9-IMDB-BINARY
[36m(Trainer pid=9614, ip=192.168.2.202)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2f41075690>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2f40fc6850>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2f414fd490>}
[36m(Trainer pid=9614, ip=192.168.2.202)[0m num_node_features: 136
[36m(Trainer pid=9614, ip=192.168.2.202)[0m num_graph_labels: 2
[36m(Trainer pid=9614, ip=192.168.2.202)[0m train_size: 83
[36m(Trainer pid=9614, ip=192.168.2.202)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=9614, ip=192.168.2.202)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL, Dataset: IMDB-BINARY, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  IMDB-BINARY  Total number of graphs:  1000
Initialization start: network data collected.
using CPU
2025-07-17 12:51:59,348	INFO worker.py:1429 -- Using address 192.168.2.214:6379 set in the environment variable RAY_ADDRESS
2025-07-17 12:51:59,348	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.2.214:6379...
2025-07-17 12:51:59,353	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.2.214:8265 [39m[22m
[36m(Trainer pid=10071, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=10071, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=10071, ip=192.168.47.52)[0m inx: 0
[36m(Trainer pid=10071, ip=192.168.47.52)[0m dataset_trainer_name: 0-IMDB-BINARY
[36m(Trainer pid=10071, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fdd5dccfbd0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fdd5e122250>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fdd5e14cdd0>}
[36m(Trainer pid=10071, ip=192.168.47.52)[0m num_node_features: 136
[36m(Trainer pid=10071, ip=192.168.47.52)[0m num_graph_labels: 2
[36m(Trainer pid=10071, ip=192.168.47.52)[0m train_size: 89
[36m(Trainer pid=10120, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10120, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10120, ip=192.168.47.55)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10120, ip=192.168.47.55)[0m dataset_trainer_name: 2-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10120, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f39e3b3c950>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f39e3c85dd0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f39e3b68750>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10120, ip=192.168.47.55)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10120, ip=192.168.47.55)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10120, ip=192.168.47.55)[0m train_size: 85[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10208, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10208, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10208, ip=192.168.47.52)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10208, ip=192.168.47.52)[0m dataset_trainer_name: 4-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10208, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7efc0e5f10d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7efc0e74c590>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7efc0ec5dcd0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10208, ip=192.168.47.52)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10208, ip=192.168.47.52)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10208, ip=192.168.47.52)[0m train_size: 79[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10248, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10248, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10248, ip=192.168.47.55)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10248, ip=192.168.47.55)[0m dataset_trainer_name: 6-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10248, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5529cb0ad0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5529df5d90>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f552a2e5310>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10248, ip=192.168.47.55)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10248, ip=192.168.47.55)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10248, ip=192.168.47.55)[0m train_size: 84[32m [repeated 2x across cluster][0m
//Log init_time: 32610.920000000002 ms //end
//Log Large1 init network: 3851412.0 //end
//Log Large2 init network: 5406199.0 //end
//Log Large3 init network: 5619790.0 //end
//Log Large4 init network: 3898777.0 //end
//Log Server init network: 11753996425.0 //end
//Log Initialization Communication Cost (MB): 11227.39 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 17.177999999999997 ms//end
[36m(Trainer pid=10336, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10336, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10336, ip=192.168.47.52)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10336, ip=192.168.47.52)[0m dataset_trainer_name: 8-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10336, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9dbf611790>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9dbf7713d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9dbfc9a8d0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10336, ip=192.168.47.52)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10336, ip=192.168.47.52)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10336, ip=192.168.47.52)[0m train_size: 75[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 8511660032.0 //end
//Log Max memory for Large2: 12527906816.0 //end
//Log Max memory for Large3: 10680418304.0 //end
//Log Max memory for Large4: 8967516160.0 //end
//Log Max memory for Server: 17793949696.0 //end
//Log Large1 network: 514537.0 //end
//Log Large2 network: 4436404.0 //end
//Log Large3 network: 580534.0 //end
//Log Large4 network: 562835.0 //end
//Log Server network: 2125356367.0 //end
//Log Total Actual Pretrain Comm Cost: 2032.71 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.

==================================================
CLUSTERING STATISTICS
==================================================
Algorithm: gcfl
Clustering Events: 0/200
Clustering Frequency: 0.0%
==================================================
//train_time: 21443.946 ms//end
//Log Max memory for Large1: 8517169152.0 //end
//Log Max memory for Large2: 12548210688.0 //end
//Log Max memory for Large3: 10732711936.0 //end
//Log Max memory for Large4: 8985657344.0 //end
//Log Max memory for Server: 17690378240.0 //end
//Log Large1 network: 147719837.0 //end
//Log Large2 network: 225351413.0 //end
//Log Large3 network: 221083941.0 //end
//Log Large4 network: 147674406.0 //end
//Log Server network: 21921905.0 //end
//Log Total Actual Train Comm Cost: 728.37 MB //end
Train end time recorded and duration set to gauge.
               test_acc
0-IMDB-BINARY  0.700000
1-IMDB-BINARY  0.600000
2-IMDB-BINARY  0.666667
3-IMDB-BINARY  0.555556
4-IMDB-BINARY  0.727273
5-IMDB-BINARY  0.600000
6-IMDB-BINARY  0.181818
7-IMDB-BINARY  0.818182
8-IMDB-BINARY  0.500000
9-IMDB-BINARY  0.636364
Average test accuracy: 0.5987437185929648
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 667.62 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 667.62 MB //end
[36m(Trainer pid=14462, ip=192.168.30.60)[0m inx: 9
[36m(Trainer pid=14462, ip=192.168.30.60)[0m dataset_trainer_name: 9-IMDB-BINARY
[36m(Trainer pid=14462, ip=192.168.30.60)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc37c7fc990>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc37c943290>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc37cca2110>}
[36m(Trainer pid=14462, ip=192.168.30.60)[0m num_node_features: 136
[36m(Trainer pid=14462, ip=192.168.30.60)[0m num_graph_labels: 2
[36m(Trainer pid=14462, ip=192.168.30.60)[0m train_size: 83
[36m(Trainer pid=14462, ip=192.168.30.60)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=14462, ip=192.168.30.60)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+, Dataset: IMDB-BINARY, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  IMDB-BINARY  Total number of graphs:  1000
Initialization start: network data collected.
using CPU
2025-07-17 12:53:59,033	INFO worker.py:1429 -- Using address 192.168.2.214:6379 set in the environment variable RAY_ADDRESS
2025-07-17 12:53:59,033	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.2.214:6379...
2025-07-17 12:53:59,040	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.2.214:8265 [39m[22m
[36m(Trainer pid=10750, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=10750, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=10750, ip=192.168.47.55)[0m inx: 0
[36m(Trainer pid=10750, ip=192.168.47.55)[0m dataset_trainer_name: 0-IMDB-BINARY
[36m(Trainer pid=10750, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f959f2a0cd0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f959f3ea3d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f959f9a17d0>}
[36m(Trainer pid=10750, ip=192.168.47.55)[0m num_node_features: 136
[36m(Trainer pid=10750, ip=192.168.47.55)[0m num_graph_labels: 2
[36m(Trainer pid=10750, ip=192.168.47.55)[0m train_size: 89
[36m(Trainer pid=10841, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10841, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10841, ip=192.168.47.52)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10841, ip=192.168.47.52)[0m dataset_trainer_name: 2-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10841, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f62f4f78d50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f62f50bea90>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f62f4f7ab10>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10841, ip=192.168.47.52)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10841, ip=192.168.47.52)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10841, ip=192.168.47.52)[0m train_size: 85[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10877, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10877, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10877, ip=192.168.47.55)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10877, ip=192.168.47.55)[0m dataset_trainer_name: 4-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10877, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f752aeb6ad0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f752acd7350>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f752b205f50>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10877, ip=192.168.47.55)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10877, ip=192.168.47.55)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10877, ip=192.168.47.55)[0m train_size: 79[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10960, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10960, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10960, ip=192.168.47.52)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10960, ip=192.168.47.52)[0m dataset_trainer_name: 6-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10960, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f853f104f90>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f853f24ded0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f853f130f50>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10960, ip=192.168.47.52)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10960, ip=192.168.47.52)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=10960, ip=192.168.47.52)[0m train_size: 84[32m [repeated 2x across cluster][0m
//Log init_time: 30352.827999999998 ms //end
//Log Large1 init network: 3371040.0 //end
//Log Large2 init network: 5642768.0 //end
//Log Large3 init network: 3942570.0 //end
//Log Large4 init network: 5239297.0 //end
//Log Server init network: 12431965688.0 //end
//Log Initialization Communication Cost (MB): 11873.40 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 12.767000000000001 ms//end
[36m(Trainer pid=11004, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11004, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11004, ip=192.168.47.55)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11004, ip=192.168.47.55)[0m dataset_trainer_name: 8-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11004, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f05f5292850>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f05f6b7cf90>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f05f5358990>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11004, ip=192.168.47.55)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11004, ip=192.168.47.55)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11004, ip=192.168.47.55)[0m train_size: 75[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 10129838080.0 //end
//Log Max memory for Large2: 10927640576.0 //end
//Log Max memory for Large3: 8976560128.0 //end
//Log Max memory for Large4: 10681978880.0 //end
//Log Max memory for Server: 17726631936.0 //end
//Log Large1 network: 2188613.0 //end
//Log Large2 network: 3235335.0 //end
//Log Large3 network: 526785.0 //end
//Log Large4 network: 596579.0 //end
//Log Server network: 1443962882.0 //end
//Log Total Actual Pretrain Comm Cost: 1383.31 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.

==================================================
CLUSTERING STATISTICS
==================================================
Algorithm: gcfl
Clustering Events: 0/200
Clustering Frequency: 0.0%
==================================================
//train_time: 21313.392 ms//end
//Log Max memory for Large1: 10144583680.0 //end
//Log Max memory for Large2: 10916741120.0 //end
//Log Max memory for Large3: 8988631040.0 //end
//Log Max memory for Large4: 10735017984.0 //end
//Log Max memory for Server: 17653788672.0 //end
//Log Large1 network: 220980784.0 //end
//Log Large2 network: 152354763.0 //end
//Log Large3 network: 147746763.0 //end
//Log Large4 network: 221088355.0 //end
//Log Server network: 21852589.0 //end
//Log Total Actual Train Comm Cost: 728.63 MB //end
Train end time recorded and duration set to gauge.
               test_acc
0-IMDB-BINARY  0.600000
1-IMDB-BINARY  0.555556
2-IMDB-BINARY  0.636364
3-IMDB-BINARY  0.818182
4-IMDB-BINARY  0.800000
5-IMDB-BINARY  0.636364
6-IMDB-BINARY  0.181818
7-IMDB-BINARY  0.500000
8-IMDB-BINARY  0.666667
9-IMDB-BINARY  0.600000
Average test accuracy: 0.5964367291000457
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 667.62 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 667.62 MB //end
[36m(Trainer pid=10981, ip=192.168.2.202)[0m inx: 9
[36m(Trainer pid=10981, ip=192.168.2.202)[0m dataset_trainer_name: 9-IMDB-BINARY
[36m(Trainer pid=10981, ip=192.168.2.202)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc80546f990>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc80539de50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc80a0e0990>}
[36m(Trainer pid=10981, ip=192.168.2.202)[0m num_node_features: 136
[36m(Trainer pid=10981, ip=192.168.2.202)[0m num_graph_labels: 2
[36m(Trainer pid=10981, ip=192.168.2.202)[0m train_size: 83
[36m(Trainer pid=10981, ip=192.168.2.202)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=10981, ip=192.168.2.202)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+dWs, Dataset: IMDB-BINARY, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  IMDB-BINARY  Total number of graphs:  1000
Initialization start: network data collected.
using CPU
2025-07-17 12:55:56,227	INFO worker.py:1429 -- Using address 192.168.2.214:6379 set in the environment variable RAY_ADDRESS
2025-07-17 12:55:56,227	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.2.214:6379...
2025-07-17 12:55:56,234	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.2.214:8265 [39m[22m
[36m(Trainer pid=11460, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=11460, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=11460, ip=192.168.47.52)[0m inx: 0
[36m(Trainer pid=11460, ip=192.168.47.52)[0m dataset_trainer_name: 0-IMDB-BINARY
[36m(Trainer pid=11460, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7ef0f5adf990>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7ef0f5f0a3d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7ef0f5903a10>}
[36m(Trainer pid=11460, ip=192.168.47.52)[0m num_node_features: 136
[36m(Trainer pid=11460, ip=192.168.47.52)[0m num_graph_labels: 2
[36m(Trainer pid=11460, ip=192.168.47.52)[0m train_size: 89
[36m(Trainer pid=11501, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11501, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11501, ip=192.168.47.55)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11501, ip=192.168.47.55)[0m dataset_trainer_name: 2-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11501, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9dd88fa790>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9dd882bf90>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9dd8711c10>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11501, ip=192.168.47.55)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11501, ip=192.168.47.55)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11501, ip=192.168.47.55)[0m train_size: 85[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11587, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11587, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11587, ip=192.168.47.52)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11587, ip=192.168.47.52)[0m dataset_trainer_name: 4-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11587, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f396a41b990>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f396a3475d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f396a346590>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11587, ip=192.168.47.52)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11587, ip=192.168.47.52)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11587, ip=192.168.47.52)[0m train_size: 79[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11630, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11630, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11630, ip=192.168.47.55)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11630, ip=192.168.47.55)[0m dataset_trainer_name: 6-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11630, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f662e6b5850>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f66330afa90>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f662e4ea390>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11630, ip=192.168.47.55)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11630, ip=192.168.47.55)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11630, ip=192.168.47.55)[0m train_size: 84[32m [repeated 2x across cluster][0m
//Log init_time: 30435.957 ms //end
//Log Large1 init network: 3654291.0 //end
//Log Large2 init network: 5265794.0 //end
//Log Large3 init network: 4024277.0 //end
//Log Large4 init network: 3750521.0 //end
//Log Server init network: 12432480385.0 //end
//Log Initialization Communication Cost (MB): 11872.46 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 9.099 ms//end
[36m(Trainer pid=11714, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11714, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11714, ip=192.168.47.52)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11714, ip=192.168.47.52)[0m dataset_trainer_name: 8-IMDB-BINARY[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11714, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f42326e6050>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4232729b50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f42330e1e90>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11714, ip=192.168.47.52)[0m num_node_features: 136[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11714, ip=192.168.47.52)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=11714, ip=192.168.47.52)[0m train_size: 75[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 8499724288.0 //end
//Log Max memory for Large2: 12509229056.0 //end
//Log Max memory for Large3: 10670604288.0 //end
//Log Max memory for Large4: 8981200896.0 //end
//Log Max memory for Server: 17768259584.0 //end
//Log Large1 network: 526098.0 //end
//Log Large2 network: 4474362.0 //end
//Log Large3 network: 2008906.0 //end
//Log Large4 network: 525866.0 //end
//Log Server network: 1443854694.0 //end
//Log Total Actual Pretrain Comm Cost: 1384.15 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.

==================================================
CLUSTERING STATISTICS
==================================================
Algorithm: gcfl
Clustering Events: 0/200
Clustering Frequency: 0.0%
==================================================
//train_time: 21869.697 ms//end
//Log Max memory for Large1: 8532664320.0 //end
//Log Max memory for Large2: 12539682816.0 //end
//Log Max memory for Large3: 10729586688.0 //end
//Log Max memory for Large4: 8985669632.0 //end
//Log Max memory for Server: 17658068992.0 //end
//Log Large1 network: 147745715.0 //end
//Log Large2 network: 225694973.0 //end
//Log Large3 network: 221126894.0 //end
//Log Large4 network: 147753915.0 //end
//Log Server network: 22081252.0 //end
//Log Total Actual Train Comm Cost: 728.99 MB //end
Train end time recorded and duration set to gauge.
               test_acc
0-IMDB-BINARY  0.800000
1-IMDB-BINARY  0.545455
2-IMDB-BINARY  0.555556
3-IMDB-BINARY  0.600000
4-IMDB-BINARY  0.666667
5-IMDB-BINARY  0.636364
6-IMDB-BINARY  0.818182
7-IMDB-BINARY  0.272727
8-IMDB-BINARY  0.500000
9-IMDB-BINARY  0.600000
Average test accuracy: 0.603252372975991
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 667.62 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 667.62 MB //end
[36m(Trainer pid=15841, ip=192.168.30.60)[0m inx: 9
[36m(Trainer pid=15841, ip=192.168.30.60)[0m dataset_trainer_name: 9-IMDB-BINARY
[36m(Trainer pid=15841, ip=192.168.30.60)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f63d4ffd3d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f63d4f29f90>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f63d4e10d90>}
[36m(Trainer pid=15841, ip=192.168.30.60)[0m num_node_features: 136
[36m(Trainer pid=15841, ip=192.168.30.60)[0m num_graph_labels: 2
[36m(Trainer pid=15841, ip=192.168.30.60)[0m train_size: 83
[36m(Trainer pid=15841, ip=192.168.30.60)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=15841, ip=192.168.30.60)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: FedAvg, Dataset: IMDB-MULTI, Trainers: 10
--------------------------------------------------------------------------------

Downloading https://www.chrsmrrs.com/graphkerneldatasets/IMDB-MULTI.zip
Processing...
Done!
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  IMDB-MULTI  Total number of graphs:  1500
Initialization start: network data collected.
using CPU
2025-07-17 12:57:57,136	INFO worker.py:1429 -- Using address 192.168.2.214:6379 set in the environment variable RAY_ADDRESS
2025-07-17 12:57:57,136	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.2.214:6379...
2025-07-17 12:57:57,142	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.2.214:8265 [39m[22m
[36m(Trainer pid=12151, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=12151, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=12151, ip=192.168.47.55)[0m inx: 0
[36m(Trainer pid=12151, ip=192.168.47.55)[0m dataset_trainer_name: 0-IMDB-MULTI
[36m(Trainer pid=12151, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f23207abb90>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2321561310>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f232058bed0>}
[36m(Trainer pid=12151, ip=192.168.47.55)[0m num_node_features: 89
[36m(Trainer pid=12151, ip=192.168.47.55)[0m num_graph_labels: 3
[36m(Trainer pid=12151, ip=192.168.47.55)[0m train_size: 134
[36m(Trainer pid=12230, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12230, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12230, ip=192.168.47.52)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12230, ip=192.168.47.52)[0m dataset_trainer_name: 2-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12230, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f577a51d8d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f577ac3fbd0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f577ae47110>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12230, ip=192.168.47.52)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12230, ip=192.168.47.52)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12230, ip=192.168.47.52)[0m train_size: 128[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12281, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12281, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12281, ip=192.168.47.55)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12281, ip=192.168.47.55)[0m dataset_trainer_name: 4-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12281, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2df8ff8390>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2df9dc2a50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2df9db9a50>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12281, ip=192.168.47.55)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12281, ip=192.168.47.55)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12281, ip=192.168.47.55)[0m train_size: 125[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12357, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12357, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12357, ip=192.168.47.52)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12357, ip=192.168.47.52)[0m dataset_trainer_name: 6-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12357, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fb10f8ec110>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fb10ef7b150>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fb10febaed0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12357, ip=192.168.47.52)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12357, ip=192.168.47.52)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12357, ip=192.168.47.52)[0m train_size: 115[32m [repeated 2x across cluster][0m
//Log init_time: 32607.458000000002 ms //end
//Log Large1 init network: 3745006.0 //end
//Log Large2 init network: 5707602.0 //end
//Log Large3 init network: 3809843.0 //end
//Log Large4 init network: 5745150.0 //end
//Log Server init network: 13616311188.0 //end
//Log Initialization Communication Cost (MB): 13003.65 //end

Done setting up devices.
Running FedAvg ...
Pretrain start time recorded.
//pretrain_time: 10.328000000000001 ms//end
[36m(Trainer pid=12409, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12409, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12409, ip=192.168.47.55)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12409, ip=192.168.47.55)[0m dataset_trainer_name: 8-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12409, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa420d71f10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa421b79190>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa42120cc90>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12409, ip=192.168.47.55)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12409, ip=192.168.47.55)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12409, ip=192.168.47.55)[0m train_size: 112[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 10571702272.0 //end
//Log Max memory for Large2: 11159707648.0 //end
//Log Max memory for Large3: 9114832896.0 //end
//Log Max memory for Large4: 11192590336.0 //end
//Log Max memory for Server: 17782632448.0 //end
//Log Large1 network: 2440066.0 //end
//Log Large2 network: 3237628.0 //end
//Log Large3 network: 533252.0 //end
//Log Large4 network: 600060.0 //end
//Log Server network: 1592951249.0 //end
//Log Total Actual Pretrain Comm Cost: 1525.65 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 17660.411 ms//end
//Log Max memory for Large1: 10634719232.0 //end
//Log Max memory for Large2: 11211796480.0 //end
//Log Max memory for Large3: 9147625472.0 //end
//Log Max memory for Large4: 11268841472.0 //end
//Log Max memory for Server: 17693614080.0 //end
//Log Large1 network: 81078844.0 //end
//Log Large2 network: 58903907.0 //end
//Log Large3 network: 54428963.0 //end
//Log Large4 network: 80981994.0 //end
//Log Server network: 133353484.0 //end
//Log Total Actual Train Comm Cost: 389.81 MB //end
Train end time recorded and duration set to gauge.
              test_acc
1-IMDB-MULTI  0.428571
9-IMDB-MULTI  0.562500
8-IMDB-MULTI  0.533333
0-IMDB-MULTI  0.470588
5-IMDB-MULTI  0.466667
2-IMDB-MULTI  0.250000
4-IMDB-MULTI  0.437500
6-IMDB-MULTI  0.466667
3-IMDB-MULTI  0.533333
7-IMDB-MULTI  0.200000
Average test accuracy: 0.4329574011878999
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=12385, ip=192.168.2.202)[0m inx: 9
[36m(Trainer pid=12385, ip=192.168.2.202)[0m dataset_trainer_name: 9-IMDB-MULTI
[36m(Trainer pid=12385, ip=192.168.2.202)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8f5c53f6d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8f67bb6f10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8f67bb46d0>}
[36m(Trainer pid=12385, ip=192.168.2.202)[0m num_node_features: 89
[36m(Trainer pid=12385, ip=192.168.2.202)[0m num_graph_labels: 3
[36m(Trainer pid=12385, ip=192.168.2.202)[0m train_size: 125
[36m(Trainer pid=12385, ip=192.168.2.202)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=12385, ip=192.168.2.202)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL, Dataset: IMDB-MULTI, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  IMDB-MULTI  Total number of graphs:  1500
Initialization start: network data collected.
using CPU
2025-07-17 12:59:53,153	INFO worker.py:1429 -- Using address 192.168.2.214:6379 set in the environment variable RAY_ADDRESS
2025-07-17 12:59:53,153	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.2.214:6379...
2025-07-17 12:59:53,161	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.2.214:8265 [39m[22m
[36m(Trainer pid=12847, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=12847, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=12847, ip=192.168.47.52)[0m inx: 0
[36m(Trainer pid=12847, ip=192.168.47.52)[0m dataset_trainer_name: 0-IMDB-MULTI
[36m(Trainer pid=12847, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7ff392def150>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe2af9e1b90>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe2aea2ddd0>}
[36m(Trainer pid=12847, ip=192.168.47.52)[0m num_node_features: 89
[36m(Trainer pid=12847, ip=192.168.47.52)[0m num_graph_labels: 3
[36m(Trainer pid=12847, ip=192.168.47.52)[0m train_size: 134
[36m(Trainer pid=12893, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12893, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12893, ip=192.168.47.55)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12893, ip=192.168.47.55)[0m dataset_trainer_name: 2-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12893, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fbbbfc0ced0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fbbc0bf12d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fbbbfc3d790>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12893, ip=192.168.47.55)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12893, ip=192.168.47.55)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12893, ip=192.168.47.55)[0m train_size: 128[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12975, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12975, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12975, ip=192.168.47.52)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12975, ip=192.168.47.52)[0m dataset_trainer_name: 4-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12975, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f52182c9bd0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f521b78e890>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f521b79a290>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12975, ip=192.168.47.52)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12975, ip=192.168.47.52)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=12975, ip=192.168.47.52)[0m train_size: 125[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13029, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13029, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13029, ip=192.168.47.55)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13029, ip=192.168.47.55)[0m dataset_trainer_name: 6-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13029, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0d861ce210>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0d85fd8c90>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0d86f59ad0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13029, ip=192.168.47.55)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13029, ip=192.168.47.55)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13029, ip=192.168.47.55)[0m train_size: 115[32m [repeated 2x across cluster][0m
//Log init_time: 32721.701000000005 ms //end
//Log Large1 init network: 4263736.0 //end
//Log Large2 init network: 5999005.0 //end
//Log Large3 init network: 6090564.0 //end
//Log Large4 init network: 3764018.0 //end
//Log Server init network: 13397761339.0 //end
//Log Initialization Communication Cost (MB): 12796.29 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 15.597 ms//end
[36m(Trainer pid=13103, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13103, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13103, ip=192.168.47.52)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13103, ip=192.168.47.52)[0m dataset_trainer_name: 8-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13103, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4b3d398dd0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4b3df60190>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4b3df62a10>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13103, ip=192.168.47.52)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13103, ip=192.168.47.52)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13103, ip=192.168.47.52)[0m train_size: 112[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 8737353728.0 //end
//Log Max memory for Large2: 12999626752.0 //end
//Log Max memory for Large3: 11183386624.0 //end
//Log Max memory for Large4: 9124413440.0 //end
//Log Max memory for Server: 17669058560.0 //end
//Log Large1 network: 560064.0 //end
//Log Large2 network: 4499540.0 //end
//Log Large3 network: 588854.0 //end
//Log Large4 network: 563635.0 //end
//Log Server network: 1806013373.0 //end
//Log Total Actual Pretrain Comm Cost: 1728.27 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.

==================================================
CLUSTERING STATISTICS
==================================================
Algorithm: gcfl
Clustering Events: 1/200
Clustering Frequency: 0.5%
Clustering Rounds: [64]
==================================================
//train_time: 25170.8 ms//end
//Log Max memory for Large1: 8732196864.0 //end
//Log Max memory for Large2: 13004623872.0 //end
//Log Max memory for Large3: 11204276224.0 //end
//Log Max memory for Large4: 9128873984.0 //end
//Log Max memory for Server: 17702555648.0 //end
//Log Large1 network: 151942198.0 //end
//Log Large2 network: 232392999.0 //end
//Log Large3 network: 227697941.0 //end
//Log Large4 network: 151939435.0 //end
//Log Server network: 22893633.0 //end
//Log Total Actual Train Comm Cost: 750.41 MB //end
Train end time recorded and duration set to gauge.
              test_acc
0-IMDB-MULTI  0.428571
1-IMDB-MULTI  0.400000
2-IMDB-MULTI  0.357143
3-IMDB-MULTI  0.466667
4-IMDB-MULTI  0.666667
5-IMDB-MULTI  0.470588
6-IMDB-MULTI  0.533333
7-IMDB-MULTI  0.600000
8-IMDB-MULTI  0.375000
9-IMDB-MULTI  0.533333
Average test accuracy: 0.48422332143559765
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 668.84 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 668.84 MB //end
[36m(Trainer pid=17230, ip=192.168.30.60)[0m inx: 9
[36m(Trainer pid=17230, ip=192.168.30.60)[0m dataset_trainer_name: 9-IMDB-MULTI
[36m(Trainer pid=17230, ip=192.168.30.60)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc52b1215d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc52b7909d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc52b791b90>}
[36m(Trainer pid=17230, ip=192.168.30.60)[0m num_node_features: 89
[36m(Trainer pid=17230, ip=192.168.30.60)[0m num_graph_labels: 3
[36m(Trainer pid=17230, ip=192.168.30.60)[0m train_size: 125
[36m(Trainer pid=17230, ip=192.168.30.60)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=17230, ip=192.168.30.60)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+, Dataset: IMDB-MULTI, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  IMDB-MULTI  Total number of graphs:  1500
Initialization start: network data collected.
using CPU
2025-07-17 13:01:57,094	INFO worker.py:1429 -- Using address 192.168.2.214:6379 set in the environment variable RAY_ADDRESS
2025-07-17 13:01:57,094	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.2.214:6379...
2025-07-17 13:01:57,101	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.2.214:8265 [39m[22m
[36m(Trainer pid=13544, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=13544, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=13544, ip=192.168.47.55)[0m inx: 0
[36m(Trainer pid=13544, ip=192.168.47.55)[0m dataset_trainer_name: 0-IMDB-MULTI
[36m(Trainer pid=13544, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0627853790>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f06406c7c90>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f06407fea90>}
[36m(Trainer pid=13544, ip=192.168.47.55)[0m num_node_features: 89
[36m(Trainer pid=13544, ip=192.168.47.55)[0m num_graph_labels: 3
[36m(Trainer pid=13544, ip=192.168.47.55)[0m train_size: 134
[36m(Trainer pid=13628, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13628, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13628, ip=192.168.47.52)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13628, ip=192.168.47.52)[0m dataset_trainer_name: 2-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13628, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f498303e510>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4983df99d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4983de2510>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13628, ip=192.168.47.52)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13628, ip=192.168.47.52)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13628, ip=192.168.47.52)[0m train_size: 128[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13681, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13681, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13681, ip=192.168.47.55)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13681, ip=192.168.47.55)[0m dataset_trainer_name: 4-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13681, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2af53e05d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2af61d77d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2af61ddb10>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13681, ip=192.168.47.55)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13681, ip=192.168.47.55)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13681, ip=192.168.47.55)[0m train_size: 125[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13765, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13765, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13765, ip=192.168.47.52)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13765, ip=192.168.47.52)[0m dataset_trainer_name: 6-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13765, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7faeb25d7910>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7faeb33b1250>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7faeb33a8690>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13765, ip=192.168.47.52)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13765, ip=192.168.47.52)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13765, ip=192.168.47.52)[0m train_size: 115[32m [repeated 2x across cluster][0m
//Log init_time: 33600.102999999996 ms //end
//Log Large1 init network: 3996404.0 //end
//Log Large2 init network: 6077395.0 //end
//Log Large3 init network: 3862319.0 //end
//Log Large4 init network: 6287795.0 //end
//Log Server init network: 12189565149.0 //end
//Log Initialization Communication Cost (MB): 11644.16 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 11.148 ms//end
[36m(Trainer pid=13810, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13810, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13810, ip=192.168.47.55)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13810, ip=192.168.47.55)[0m dataset_trainer_name: 8-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13810, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc41261ac50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc412ff8c50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc412ffacd0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13810, ip=192.168.47.55)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13810, ip=192.168.47.55)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=13810, ip=192.168.47.55)[0m train_size: 112[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 10571014144.0 //end
//Log Max memory for Large2: 11160186880.0 //end
//Log Max memory for Large3: 9123233792.0 //end
//Log Max memory for Large4: 11168448512.0 //end
//Log Max memory for Server: 17791610880.0 //end
//Log Large1 network: 2419258.0 //end
//Log Large2 network: 3247494.0 //end
//Log Large3 network: 529103.0 //end
//Log Large4 network: 598605.0 //end
//Log Server network: 3021649016.0 //end
//Log Total Actual Pretrain Comm Cost: 2888.15 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.

==================================================
CLUSTERING STATISTICS
==================================================
Algorithm: gcfl
Clustering Events: 1/200
Clustering Frequency: 0.5%
Clustering Rounds: [58]
==================================================
//train_time: 25259.775999999998 ms//end
//Log Max memory for Large1: 10595299328.0 //end
//Log Max memory for Large2: 11136466944.0 //end
//Log Max memory for Large3: 9141313536.0 //end
//Log Max memory for Large4: 11214188544.0 //end
//Log Max memory for Server: 17640783872.0 //end
//Log Large1 network: 227529819.0 //end
//Log Large2 network: 157170192.0 //end
//Log Large3 network: 151998756.0 //end
//Log Large4 network: 227719439.0 //end
//Log Server network: 22850613.0 //end
//Log Total Actual Train Comm Cost: 750.80 MB //end
Train end time recorded and duration set to gauge.
              test_acc
0-IMDB-MULTI  0.428571
1-IMDB-MULTI  0.600000
2-IMDB-MULTI  0.411765
3-IMDB-MULTI  0.466667
4-IMDB-MULTI  0.466667
5-IMDB-MULTI  0.625000
6-IMDB-MULTI  0.500000
7-IMDB-MULTI  0.466667
8-IMDB-MULTI  0.600000
9-IMDB-MULTI  0.466667
Average test accuracy: 0.49938778186860033
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 668.84 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 668.84 MB //end
[36m(Trainer pid=13782, ip=192.168.2.202)[0m inx: 9
[36m(Trainer pid=13782, ip=192.168.2.202)[0m dataset_trainer_name: 9-IMDB-MULTI
[36m(Trainer pid=13782, ip=192.168.2.202)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f45c82818d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f45c817ef50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f45a1197390>}
[36m(Trainer pid=13782, ip=192.168.2.202)[0m num_node_features: 89
[36m(Trainer pid=13782, ip=192.168.2.202)[0m num_graph_labels: 3
[36m(Trainer pid=13782, ip=192.168.2.202)[0m train_size: 125
[36m(Trainer pid=13782, ip=192.168.2.202)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=13782, ip=192.168.2.202)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+dWs, Dataset: IMDB-MULTI, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  IMDB-MULTI  Total number of graphs:  1500
Initialization start: network data collected.
using CPU
2025-07-17 13:04:01,566	INFO worker.py:1429 -- Using address 192.168.2.214:6379 set in the environment variable RAY_ADDRESS
2025-07-17 13:04:01,566	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.2.214:6379...
2025-07-17 13:04:01,572	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.2.214:8265 [39m[22m
[36m(Trainer pid=14279, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=14279, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=14279, ip=192.168.47.52)[0m inx: 0
[36m(Trainer pid=14279, ip=192.168.47.52)[0m dataset_trainer_name: 0-IMDB-MULTI
[36m(Trainer pid=14279, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0d6840f190>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0d6a1b9f50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0d68236510>}
[36m(Trainer pid=14279, ip=192.168.47.52)[0m num_node_features: 89
[36m(Trainer pid=14279, ip=192.168.47.52)[0m num_graph_labels: 3
[36m(Trainer pid=14279, ip=192.168.47.52)[0m train_size: 134
[36m(Trainer pid=14337, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=14337, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=14337, ip=192.168.47.55)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=14337, ip=192.168.47.55)[0m dataset_trainer_name: 2-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=14337, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f7a53759590>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f7a5457a850>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8b37af2e10>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=14337, ip=192.168.47.55)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=14337, ip=192.168.47.55)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=14337, ip=192.168.47.55)[0m train_size: 128[32m [repeated 2x across cluster][0m
[36m(Trainer pid=14416, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=14416, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=14416, ip=192.168.47.52)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=14416, ip=192.168.47.52)[0m dataset_trainer_name: 4-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=14416, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1397f31310>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1398bab210>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1398bb0490>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=14416, ip=192.168.47.52)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=14416, ip=192.168.47.52)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=14416, ip=192.168.47.52)[0m train_size: 125[32m [repeated 2x across cluster][0m
[36m(Trainer pid=14465, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=14465, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=14465, ip=192.168.47.55)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=14465, ip=192.168.47.55)[0m dataset_trainer_name: 6-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=14465, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5cd98e0890>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5cd9ce5510>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5cda69ae90>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=14465, ip=192.168.47.55)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=14465, ip=192.168.47.55)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=14465, ip=192.168.47.55)[0m train_size: 115[32m [repeated 2x across cluster][0m
//Log init_time: 32916.055 ms //end
//Log Large1 init network: 4056179.0 //end
//Log Large2 init network: 5867919.0 //end
//Log Large3 init network: 6003587.0 //end
//Log Large4 init network: 4493801.0 //end
//Log Server init network: 12907024853.0 //end
//Log Initialization Communication Cost (MB): 12328.57 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 11.45 ms//end
[36m(Trainer pid=14543, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=14543, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=14543, ip=192.168.47.52)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=14543, ip=192.168.47.52)[0m dataset_trainer_name: 8-IMDB-MULTI[32m [repeated 2x across cluster][0m
[36m(Trainer pid=14543, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f170b0ff2d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1724178710>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1724179810>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=14543, ip=192.168.47.52)[0m num_node_features: 89[32m [repeated 2x across cluster][0m
[36m(Trainer pid=14543, ip=192.168.47.52)[0m num_graph_labels: 3[32m [repeated 2x across cluster][0m
[36m(Trainer pid=14543, ip=192.168.47.52)[0m train_size: 112[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 8733863936.0 //end
//Log Max memory for Large2: 13005729792.0 //end
//Log Max memory for Large3: 11184869376.0 //end
//Log Max memory for Large4: 9112502272.0 //end
//Log Max memory for Server: 17728790528.0 //end
//Log Large1 network: 580002.0 //end
//Log Large2 network: 4426114.0 //end
//Log Large3 network: 592316.0 //end
//Log Large4 network: 529397.0 //end
//Log Server network: 2298549098.0 //end
//Log Total Actual Pretrain Comm Cost: 2197.91 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.

==================================================
CLUSTERING STATISTICS
==================================================
Algorithm: gcfl
Clustering Events: 1/200
Clustering Frequency: 0.5%
Clustering Rounds: [123]
==================================================
//train_time: 23824.684 ms//end
//Log Max memory for Large1: 8714199040.0 //end
//Log Max memory for Large2: 13035646976.0 //end
//Log Max memory for Large3: 11216052224.0 //end
//Log Max memory for Large4: 9118674944.0 //end
//Log Max memory for Server: 17648631808.0 //end
//Log Large1 network: 151924829.0 //end
//Log Large2 network: 232090575.0 //end
//Log Large3 network: 227618403.0 //end
//Log Large4 network: 151920506.0 //end
//Log Server network: 22666800.0 //end
//Log Total Actual Train Comm Cost: 749.80 MB //end
Train end time recorded and duration set to gauge.
              test_acc
0-IMDB-MULTI  0.428571
1-IMDB-MULTI  0.470588
2-IMDB-MULTI  0.400000
3-IMDB-MULTI  0.600000
4-IMDB-MULTI  0.533333
5-IMDB-MULTI  0.437500
6-IMDB-MULTI  0.625000
7-IMDB-MULTI  0.466667
8-IMDB-MULTI  0.533333
9-IMDB-MULTI  0.600000
Average test accuracy: 0.5079731809111605
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 668.84 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 668.84 MB //end
[36m(Trainer pid=18669, ip=192.168.30.60)[0m inx: 9
[36m(Trainer pid=18669, ip=192.168.30.60)[0m dataset_trainer_name: 9-IMDB-MULTI
[36m(Trainer pid=18669, ip=192.168.30.60)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fbd8a6f1890>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fbd8b39f090>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fbd8b3a9f10>}
[36m(Trainer pid=18669, ip=192.168.30.60)[0m num_node_features: 89
[36m(Trainer pid=18669, ip=192.168.30.60)[0m num_graph_labels: 3
[36m(Trainer pid=18669, ip=192.168.30.60)[0m train_size: 125
[36m(Trainer pid=18669, ip=192.168.30.60)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=18669, ip=192.168.30.60)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: FedAvg, Dataset: MUTAG, Trainers: 10
--------------------------------------------------------------------------------

Downloading https://www.chrsmrrs.com/graphkerneldatasets/MUTAG.zip
Processing...
Done!
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  MUTAG  Total number of graphs:  188
Initialization start: network data collected.
using CPU
2025-07-17 13:06:04,475	INFO worker.py:1429 -- Using address 192.168.2.214:6379 set in the environment variable RAY_ADDRESS
2025-07-17 13:06:04,475	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.2.214:6379...
2025-07-17 13:06:04,481	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.2.214:8265 [39m[22m
//Log init_time: 265.423 ms //end
//Log Large1 init network: 0.0 //end
//Log Large2 init network: 0.0 //end
//Log Large3 init network: 0.0 //end
//Log Large4 init network: 0.0 //end
//Log Server init network: 0.0 //end
//Log Initialization Communication Cost (MB): 0.00 //end

Done setting up devices.
Running FedAvg ...
Pretrain start time recorded.
//pretrain_time: 7.904 ms//end
[36m(Trainer pid=19129, ip=192.168.30.60)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=19129, ip=192.168.30.60)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=19129, ip=192.168.30.60)[0m inx: 3
[36m(Trainer pid=19129, ip=192.168.30.60)[0m dataset_trainer_name: 3-MUTAG
[36m(Trainer pid=19129, ip=192.168.30.60)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7ef931f39450>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7ef930fa1e10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7ef930fa2490>}
[36m(Trainer pid=19129, ip=192.168.30.60)[0m num_node_features: 7
[36m(Trainer pid=19129, ip=192.168.30.60)[0m num_graph_labels: 2
[36m(Trainer pid=19129, ip=192.168.30.60)[0m train_size: 15
//Log Max memory for Large1: 6139109376.0 //end
//Log Max memory for Large2: 8138498048.0 //end
//Log Max memory for Large3: 6011273216.0 //end
//Log Max memory for Large4: 6437781504.0 //end
//Log Max memory for Server: 17642270720.0 //end
//Log Large1 network: 784781.0 //end
//Log Large2 network: 3248299.0 //end
//Log Large3 network: 739569.0 //end
//Log Large4 network: 693588.0 //end
//Log Server network: 66351730.0 //end
//Log Total Actual Pretrain Comm Cost: 68.49 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 14489.028 ms//end
//Log Max memory for Large1: 6151413760.0 //end
//Log Max memory for Large2: 8128225280.0 //end
//Log Max memory for Large3: 6011052032.0 //end
//Log Max memory for Large4: 6443601920.0 //end
//Log Max memory for Server: 17677656064.0 //end
//Log Large1 network: 81036568.0 //end
//Log Large2 network: 58587419.0 //end
//Log Large3 network: 54382098.0 //end
//Log Large4 network: 80949696.0 //end
//Log Server network: 133401663.0 //end
//Log Total Actual Train Comm Cost: 389.44 MB //end
Train end time recorded and duration set to gauge.
         test_acc
1-MUTAG  0.500000
4-MUTAG  0.500000
6-MUTAG  0.666667
8-MUTAG  1.000000
9-MUTAG  0.500000
2-MUTAG  0.500000
5-MUTAG  1.000000
3-MUTAG  0.000000
0-MUTAG  1.000000
7-MUTAG  1.000000
Average test accuracy: 0.6700680272108843
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=14969, ip=192.168.47.55)[0m inx: 4[32m [repeated 9x across cluster][0m
[36m(Trainer pid=14969, ip=192.168.47.55)[0m dataset_trainer_name: 4-MUTAG[32m [repeated 9x across cluster][0m
[36m(Trainer pid=14969, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f55fdb5dc10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f55fd865490>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f55fd8667d0>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=14969, ip=192.168.47.55)[0m num_node_features: 7[32m [repeated 9x across cluster][0m
[36m(Trainer pid=14969, ip=192.168.47.55)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=14969, ip=192.168.47.55)[0m train_size: 15[32m [repeated 9x across cluster][0m
[36m(Trainer pid=14969, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=14969, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL, Dataset: MUTAG, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  MUTAG  Total number of graphs:  188
Initialization start: network data collected.
using CPU
2025-07-17 13:07:24,663	INFO worker.py:1429 -- Using address 192.168.2.214:6379 set in the environment variable RAY_ADDRESS
2025-07-17 13:07:24,663	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.2.214:6379...
2025-07-17 13:07:24,671	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.2.214:8265 [39m[22m
//Log init_time: 274.167 ms //end
//Log Large1 init network: 29433.0 //end
//Log Large2 init network: 0.0 //end
//Log Large3 init network: 0.0 //end
//Log Large4 init network: 0.0 //end
//Log Server init network: 0.0 //end
//Log Initialization Communication Cost (MB): 0.03 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 8.812999999999999 ms//end
[36m(Trainer pid=15512, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=15512, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=19627, ip=192.168.30.60)[0m inx: 5
[36m(Trainer pid=19627, ip=192.168.30.60)[0m dataset_trainer_name: 5-MUTAG
[36m(Trainer pid=19627, ip=192.168.30.60)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7eedf8f5dad0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7eedf8c69010>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7eedf8c69e90>}
[36m(Trainer pid=19627, ip=192.168.30.60)[0m num_node_features: 7
[36m(Trainer pid=19627, ip=192.168.30.60)[0m num_graph_labels: 2
[36m(Trainer pid=19627, ip=192.168.30.60)[0m train_size: 14
//Log Max memory for Large1: 5718290432.0 //end
//Log Max memory for Large2: 8562876416.0 //end
//Log Max memory for Large3: 6439182336.0 //end
//Log Max memory for Large4: 6011441152.0 //end
//Log Max memory for Server: 17682059264.0 //end
//Log Large1 network: 562115.0 //end
//Log Large2 network: 3341129.0 //end
//Log Large3 network: 715269.0 //end
//Log Large4 network: 574974.0 //end
//Log Server network: 66298057.0 //end
//Log Total Actual Pretrain Comm Cost: 68.18 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.

==================================================
CLUSTERING STATISTICS
==================================================
Algorithm: gcfl
Clustering Events: 7/200
Clustering Frequency: 3.5%
Clustering Rounds: [21, 22, 23, 24, 25, 26, 27]
==================================================
//train_time: 39319.678 ms//end
//Log Max memory for Large1: 5690408960.0 //end
//Log Max memory for Large2: 8532791296.0 //end
//Log Max memory for Large3: 6427414528.0 //end
//Log Max memory for Large4: 5994389504.0 //end
//Log Max memory for Server: 17637646336.0 //end
//Log Large1 network: 173176837.0 //end
//Log Large2 network: 265696270.0 //end
//Log Large3 network: 260073563.0 //end
//Log Large4 network: 173302070.0 //end
//Log Server network: 25410861.0 //end
//Log Total Actual Train Comm Cost: 856.07 MB //end
Train end time recorded and duration set to gauge.
         test_acc
0-MUTAG  0.500000
1-MUTAG  1.000000
2-MUTAG  1.000000
3-MUTAG  1.000000
4-MUTAG  1.000000
5-MUTAG  1.000000
6-MUTAG  0.500000
7-MUTAG  0.500000
8-MUTAG  0.500000
9-MUTAG  0.666667
Average test accuracy: 0.7653061224489796
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 676.18 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 676.18 MB //end
[36m(Trainer pid=15539, ip=192.168.47.55)[0m inx: 6[32m [repeated 9x across cluster][0m
[36m(Trainer pid=15539, ip=192.168.47.55)[0m dataset_trainer_name: 6-MUTAG[32m [repeated 9x across cluster][0m
[36m(Trainer pid=15539, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f35190aa590>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3518eddcd0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3518edee90>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=15539, ip=192.168.47.55)[0m num_node_features: 7[32m [repeated 9x across cluster][0m
[36m(Trainer pid=15539, ip=192.168.47.55)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=15539, ip=192.168.47.55)[0m train_size: 16[32m [repeated 9x across cluster][0m
[36m(Trainer pid=15539, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=15539, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+, Dataset: MUTAG, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  MUTAG  Total number of graphs:  188
Initialization start: network data collected.
using CPU
2025-07-17 13:09:09,464	INFO worker.py:1429 -- Using address 192.168.2.214:6379 set in the environment variable RAY_ADDRESS
2025-07-17 13:09:09,465	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.2.214:6379...
2025-07-17 13:09:09,470	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.2.214:8265 [39m[22m
//Log init_time: 274.371 ms //end
//Log Large1 init network: 0.0 //end
//Log Large2 init network: 0.0 //end
//Log Large3 init network: 0.0 //end
//Log Large4 init network: 0.0 //end
//Log Server init network: 0.0 //end
//Log Initialization Communication Cost (MB): 0.00 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 6.074999999999999 ms//end
[36m(Trainer pid=20302, ip=192.168.30.60)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=20302, ip=192.168.30.60)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=16185, ip=192.168.47.52)[0m inx: 2
[36m(Trainer pid=16185, ip=192.168.47.52)[0m dataset_trainer_name: 2-MUTAG
[36m(Trainer pid=16185, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fabee2e5750>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fabede81410>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fabede82110>}
[36m(Trainer pid=16185, ip=192.168.47.52)[0m num_node_features: 7
[36m(Trainer pid=16185, ip=192.168.47.52)[0m num_graph_labels: 2
[36m(Trainer pid=16185, ip=192.168.47.52)[0m train_size: 15
//Log Max memory for Large1: 6129532928.0 //end
//Log Max memory for Large2: 8122683392.0 //end
//Log Max memory for Large3: 6006935552.0 //end
//Log Max memory for Large4: 6433517568.0 //end
//Log Max memory for Server: 17646845952.0 //end
//Log Large1 network: 625133.0 //end
//Log Large2 network: 3249731.0 //end
//Log Large3 network: 618918.0 //end
//Log Large4 network: 654882.0 //end
//Log Server network: 66233226.0 //end
//Log Total Actual Pretrain Comm Cost: 68.08 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.

==================================================
CLUSTERING STATISTICS
==================================================
Algorithm: gcfl
Clustering Events: 8/200
Clustering Frequency: 4.0%
Clustering Rounds: [21, 22, 23, 24, 25, 26, 27, 30]
==================================================
//train_time: 42114.096000000005 ms//end
//Log Max memory for Large1: 6127882240.0 //end
//Log Max memory for Large2: 8115933184.0 //end
//Log Max memory for Large3: 5993627648.0 //end
//Log Max memory for Large4: 6425001984.0 //end
//Log Max memory for Server: 17653751808.0 //end
//Log Large1 network: 264814918.0 //end
//Log Large2 network: 183541007.0 //end
//Log Large3 network: 176929905.0 //end
//Log Large4 network: 265661279.0 //end
//Log Server network: 25982539.0 //end
//Log Total Actual Train Comm Cost: 874.45 MB //end
Train end time recorded and duration set to gauge.
         test_acc
0-MUTAG  1.000000
1-MUTAG  0.500000
2-MUTAG  1.000000
3-MUTAG  0.500000
4-MUTAG  0.500000
5-MUTAG  1.000000
6-MUTAG  0.500000
7-MUTAG  0.500000
8-MUTAG  0.500000
9-MUTAG  0.666667
Average test accuracy: 0.6632653061224489
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
[36m(Trainer pid=16139, ip=192.168.47.55)[0m inx: 8[32m [repeated 9x across cluster][0m
[36m(Trainer pid=16139, ip=192.168.47.55)[0m dataset_trainer_name: 8-MUTAG[32m [repeated 9x across cluster][0m
[36m(Trainer pid=16139, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f933af56190>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f933ac64950>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f933ac65d50>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=16139, ip=192.168.47.55)[0m num_node_features: 7[32m [repeated 9x across cluster][0m
[36m(Trainer pid=16139, ip=192.168.47.55)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=16139, ip=192.168.47.55)[0m train_size: 14[32m [repeated 9x across cluster][0m
[36m(Trainer pid=16139, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=16139, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+dWs, Dataset: MUTAG, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  MUTAG  Total number of graphs:  188
Initialization start: network data collected.
using CPU
2025-07-17 13:10:57,071	INFO worker.py:1429 -- Using address 192.168.2.214:6379 set in the environment variable RAY_ADDRESS
2025-07-17 13:10:57,071	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.2.214:6379...
2025-07-17 13:10:57,079	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.2.214:8265 [39m[22m
//Log init_time: 267.626 ms //end
//Log Large1 init network: 0.0 //end
//Log Large2 init network: 0.0 //end
//Log Large3 init network: 0.0 //end
//Log Large4 init network: 0.0 //end
//Log Server init network: 0.0 //end
//Log Initialization Communication Cost (MB): 0.00 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 7.397 ms//end
[36m(Trainer pid=16776, ip=192.168.2.202)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=16776, ip=192.168.2.202)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=16776, ip=192.168.2.202)[0m inx: 3
[36m(Trainer pid=16776, ip=192.168.2.202)[0m dataset_trainer_name: 3-MUTAG
[36m(Trainer pid=16776, ip=192.168.2.202)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7eff03179250>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7eff00108f10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7eff00109ed0>}
[36m(Trainer pid=16776, ip=192.168.2.202)[0m num_node_features: 7
[36m(Trainer pid=16776, ip=192.168.2.202)[0m num_graph_labels: 2
[36m(Trainer pid=16776, ip=192.168.2.202)[0m train_size: 15
//Log Max memory for Large1: 5700980736.0 //end
//Log Max memory for Large2: 8558964736.0 //end
//Log Max memory for Large3: 6435078144.0 //end
//Log Max memory for Large4: 6000455680.0 //end
//Log Max memory for Server: 17673850880.0 //end
//Log Large1 network: 599216.0 //end
//Log Large2 network: 3339433.0 //end
//Log Large3 network: 684600.0 //end
//Log Large4 network: 573005.0 //end
//Log Server network: 66161114.0 //end
//Log Total Actual Pretrain Comm Cost: 68.05 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.

==================================================
CLUSTERING STATISTICS
==================================================
Algorithm: gcfl
Clustering Events: 7/200
Clustering Frequency: 3.5%
Clustering Rounds: [21, 22, 23, 24, 25, 26, 27]
==================================================
//train_time: 38190.096 ms//end
//Log Max memory for Large1: 5698105344.0 //end
//Log Max memory for Large2: 8553787392.0 //end
//Log Max memory for Large3: 6421614592.0 //end
//Log Max memory for Large4: 5993852928.0 //end
//Log Max memory for Server: 17680642048.0 //end
//Log Large1 network: 173144904.0 //end
//Log Large2 network: 265420914.0 //end
//Log Large3 network: 260083399.0 //end
//Log Large4 network: 173343004.0 //end
//Log Server network: 25667900.0 //end
//Log Total Actual Train Comm Cost: 856.08 MB //end
Train end time recorded and duration set to gauge.
         test_acc
0-MUTAG  0.500000
1-MUTAG  0.500000
2-MUTAG  1.000000
3-MUTAG  1.000000
4-MUTAG  1.000000
5-MUTAG  0.500000
6-MUTAG  1.000000
7-MUTAG  0.500000
8-MUTAG  0.666667
9-MUTAG  0.500000
Average test accuracy: 0.7233560090702947
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 676.18 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 676.18 MB //end
[36m(Trainer pid=16822, ip=192.168.47.55)[0m inx: 6[32m [repeated 9x across cluster][0m
[36m(Trainer pid=16822, ip=192.168.47.55)[0m dataset_trainer_name: 6-MUTAG[32m [repeated 9x across cluster][0m
[36m(Trainer pid=16822, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd607496dd0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd6072cd190>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd6072ce310>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=16822, ip=192.168.47.55)[0m num_node_features: 7[32m [repeated 9x across cluster][0m
[36m(Trainer pid=16822, ip=192.168.47.55)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=16822, ip=192.168.47.55)[0m train_size: 16[32m [repeated 9x across cluster][0m
[36m(Trainer pid=16822, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=16822, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: FedAvg, Dataset: BZR, Trainers: 10
--------------------------------------------------------------------------------

Downloading https://www.chrsmrrs.com/graphkerneldatasets/BZR.zip
Processing...
Done!
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  BZR  Total number of graphs:  405
Initialization start: network data collected.
using CPU
2025-07-17 13:12:42,434	INFO worker.py:1429 -- Using address 192.168.2.214:6379 set in the environment variable RAY_ADDRESS
2025-07-17 13:12:42,434	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.2.214:6379...
2025-07-17 13:12:42,441	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.2.214:8265 [39m[22m
//Log init_time: 3080.719 ms //end
//Log Large1 init network: 118867.0 //end
//Log Large2 init network: 378779.0 //end
//Log Large3 init network: 201765.0 //end
//Log Large4 init network: 30732.0 //end
//Log Server init network: 0.0 //end
//Log Initialization Communication Cost (MB): 0.70 //end

Done setting up devices.
Running FedAvg ...
Pretrain start time recorded.
//pretrain_time: 14.540000000000001 ms//end
[36m(Trainer pid=17374, ip=192.168.2.202)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=17374, ip=192.168.2.202)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=17374, ip=192.168.2.202)[0m inx: 1
[36m(Trainer pid=17374, ip=192.168.2.202)[0m dataset_trainer_name: 1-BZR
[36m(Trainer pid=17374, ip=192.168.2.202)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6740bd4fd0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6740c25490>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6740c25910>}
[36m(Trainer pid=17374, ip=192.168.2.202)[0m num_node_features: 53
[36m(Trainer pid=17374, ip=192.168.2.202)[0m num_graph_labels: 2
[36m(Trainer pid=17374, ip=192.168.2.202)[0m train_size: 32
//Log Max memory for Large1: 6736056320.0 //end
//Log Max memory for Large2: 8591015936.0 //end
//Log Max memory for Large3: 6377930752.0 //end
//Log Max memory for Large4: 6968266752.0 //end
//Log Max memory for Server: 17720504320.0 //end
//Log Large1 network: 1026824.0 //end
//Log Large2 network: 3348028.0 //end
//Log Large3 network: 788181.0 //end
//Log Large4 network: 933244.0 //end
//Log Server network: 1522646924.0 //end
//Log Total Actual Pretrain Comm Cost: 1457.92 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 15672.127 ms//end
//Log Max memory for Large1: 6665773056.0 //end
//Log Max memory for Large2: 8533426176.0 //end
//Log Max memory for Large3: 6363684864.0 //end
//Log Max memory for Large4: 6951022592.0 //end
//Log Max memory for Server: 17754116096.0 //end
//Log Large1 network: 81083595.0 //end
//Log Large2 network: 58591576.0 //end
//Log Large3 network: 54394432.0 //end
//Log Large4 network: 81006404.0 //end
//Log Server network: 133540211.0 //end
//Log Total Actual Train Comm Cost: 389.69 MB //end
Train end time recorded and duration set to gauge.
       test_acc
1-BZR      0.75
6-BZR      0.80
8-BZR      0.75
0-BZR      0.75
3-BZR      1.00
5-BZR      0.75
9-BZR      0.75
2-BZR      0.75
4-BZR      0.80
7-BZR      0.60
Average test accuracy: 0.7699376947040498
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=17548, ip=192.168.47.55)[0m inx: 8[32m [repeated 9x across cluster][0m
[36m(Trainer pid=17548, ip=192.168.47.55)[0m dataset_trainer_name: 8-BZR[32m [repeated 9x across cluster][0m
[36m(Trainer pid=17548, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f364b74b9d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f364b574c50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f364b576850>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=17548, ip=192.168.47.55)[0m num_node_features: 53[32m [repeated 9x across cluster][0m
[36m(Trainer pid=17548, ip=192.168.47.55)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=17548, ip=192.168.47.55)[0m train_size: 32[32m [repeated 9x across cluster][0m
[36m(Trainer pid=17548, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=17548, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL, Dataset: BZR, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  BZR  Total number of graphs:  405
Initialization start: network data collected.
using CPU
2025-07-17 13:14:06,675	INFO worker.py:1429 -- Using address 192.168.2.214:6379 set in the environment variable RAY_ADDRESS
2025-07-17 13:14:06,676	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.2.214:6379...
2025-07-17 13:14:06,683	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.2.214:8265 [39m[22m
//Log init_time: 3193.243 ms //end
//Log Large1 init network: 364352.0 //end
//Log Large2 init network: 393670.0 //end
//Log Large3 init network: 32054.0 //end
//Log Large4 init network: 215245.0 //end
//Log Server init network: 344446167.0 //end
//Log Initialization Communication Cost (MB): 329.45 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 8.055 ms//end
[36m(Trainer pid=17982, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=17982, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=17982, ip=192.168.47.52)[0m inx: 0
[36m(Trainer pid=17982, ip=192.168.47.52)[0m dataset_trainer_name: 0-BZR
[36m(Trainer pid=17982, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0ec99cbe10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0ec97f0a90>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0ec97f21d0>}
[36m(Trainer pid=17982, ip=192.168.47.52)[0m num_node_features: 53
[36m(Trainer pid=17982, ip=192.168.47.52)[0m num_graph_labels: 2
[36m(Trainer pid=17982, ip=192.168.47.52)[0m train_size: 32
//Log Max memory for Large1: 6115069952.0 //end
//Log Max memory for Large2: 9131585536.0 //end
//Log Max memory for Large3: 6942339072.0 //end
//Log Max memory for Large4: 6374490112.0 //end
//Log Max memory for Server: 17727893504.0 //end
//Log Large1 network: 546828.0 //end
//Log Large2 network: 3508407.0 //end
//Log Large3 network: 1203365.0 //end
//Log Large4 network: 715622.0 //end
//Log Server network: 1177803949.0 //end
//Log Total Actual Pretrain Comm Cost: 1128.94 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.

==================================================
CLUSTERING STATISTICS
==================================================
Algorithm: gcfl
Clustering Events: 8/200
Clustering Frequency: 4.0%
Clustering Rounds: [21, 22, 23, 24, 25, 26, 27, 28]
==================================================
//train_time: 43800.142 ms//end
//Log Max memory for Large1: 6052880384.0 //end
//Log Max memory for Large2: 9075134464.0 //end
//Log Max memory for Large3: 6916333568.0 //end
//Log Max memory for Large4: 6348804096.0 //end
//Log Max memory for Server: 17733758976.0 //end
//Log Large1 network: 179589574.0 //end
//Log Large2 network: 275491844.0 //end
//Log Large3 network: 268930034.0 //end
//Log Large4 network: 180381782.0 //end
//Log Server network: 26272665.0 //end
//Log Total Actual Train Comm Cost: 887.55 MB //end
Train end time recorded and duration set to gauge.
       test_acc
0-BZR      0.75
1-BZR      1.00
2-BZR      1.00
3-BZR      0.80
4-BZR      1.00
5-BZR      0.75
6-BZR      0.80
7-BZR      0.80
8-BZR      0.80
9-BZR      0.75
Average test accuracy: 0.8448598130841121
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
[36m(Trainer pid=22223, ip=192.168.30.60)[0m inx: 9[32m [repeated 9x across cluster][0m
[36m(Trainer pid=22223, ip=192.168.30.60)[0m dataset_trainer_name: 9-BZR[32m [repeated 9x across cluster][0m
[36m(Trainer pid=22223, ip=192.168.30.60)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f42caef0590>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f42ca6e1ed0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f42ca6e3790>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=22223, ip=192.168.30.60)[0m num_node_features: 53[32m [repeated 9x across cluster][0m
[36m(Trainer pid=22223, ip=192.168.30.60)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=22223, ip=192.168.30.60)[0m train_size: 32[32m [repeated 9x across cluster][0m
[36m(Trainer pid=22223, ip=192.168.30.60)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=22223, ip=192.168.30.60)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+, Dataset: BZR, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  BZR  Total number of graphs:  405
Initialization start: network data collected.
using CPU
2025-07-17 13:15:58,922	INFO worker.py:1429 -- Using address 192.168.2.214:6379 set in the environment variable RAY_ADDRESS
2025-07-17 13:15:58,923	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.2.214:6379...
2025-07-17 13:15:58,929	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.2.214:8265 [39m[22m
//Log init_time: 3139.181 ms //end
//Log Large1 init network: 242339.0 //end
//Log Large2 init network: 769835.0 //end
//Log Large3 init network: 39651.0 //end
//Log Large4 init network: 408137.0 //end
//Log Server init network: 150262908.0 //end
//Log Initialization Communication Cost (MB): 144.69 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 8.388 ms//end
[36m(Trainer pid=18585, ip=192.168.2.202)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=18585, ip=192.168.2.202)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=18585, ip=192.168.2.202)[0m inx: 1
[36m(Trainer pid=18585, ip=192.168.2.202)[0m dataset_trainer_name: 1-BZR
[36m(Trainer pid=18585, ip=192.168.2.202)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9cf7e835d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9cf7cc4f90>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9cf7cc5d50>}
[36m(Trainer pid=18585, ip=192.168.2.202)[0m num_node_features: 53
[36m(Trainer pid=18585, ip=192.168.2.202)[0m num_graph_labels: 2
[36m(Trainer pid=18585, ip=192.168.2.202)[0m train_size: 32
//Log Max memory for Large1: 6755246080.0 //end
//Log Max memory for Large2: 8592842752.0 //end
//Log Max memory for Large3: 6375649280.0 //end
//Log Max memory for Large4: 6962262016.0 //end
//Log Max memory for Server: 17772552192.0 //end
//Log Large1 network: 689833.0 //end
//Log Large2 network: 3240122.0 //end
//Log Large3 network: 1014045.0 //end
//Log Large4 network: 795040.0 //end
//Log Server network: 1371517100.0 //end
//Log Total Actual Pretrain Comm Cost: 1313.45 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.

==================================================
CLUSTERING STATISTICS
==================================================
Algorithm: gcfl
Clustering Events: 8/200
Clustering Frequency: 4.0%
Clustering Rounds: [21, 22, 23, 24, 25, 26, 27, 28]
==================================================
//train_time: 43025.979999999996 ms//end
//Log Max memory for Large1: 6675251200.0 //end
//Log Max memory for Large2: 8510357504.0 //end
//Log Max memory for Large3: 6345736192.0 //end
//Log Max memory for Large4: 6922067968.0 //end
//Log Max memory for Server: 17753911296.0 //end
//Log Large1 network: 269079202.0 //end
//Log Large2 network: 186169549.0 //end
//Log Large3 network: 180175230.0 //end
//Log Large4 network: 268936092.0 //end
//Log Server network: 26103906.0 //end
//Log Total Actual Train Comm Cost: 887.36 MB //end
Train end time recorded and duration set to gauge.
       test_acc
0-BZR      0.75
1-BZR      1.00
2-BZR      1.00
3-BZR      1.00
4-BZR      0.75
5-BZR      1.00
6-BZR      0.80
7-BZR      0.75
8-BZR      0.80
9-BZR      0.80
Average test accuracy: 0.8647975077881621
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
[36m(Trainer pid=18720, ip=192.168.2.202)[0m inx: 9[32m [repeated 9x across cluster][0m
[36m(Trainer pid=18720, ip=192.168.2.202)[0m dataset_trainer_name: 9-BZR[32m [repeated 9x across cluster][0m
[36m(Trainer pid=18720, ip=192.168.2.202)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6c01cf6ad0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6c01729250>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f6c0172a7d0>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=18720, ip=192.168.2.202)[0m num_node_features: 53[32m [repeated 9x across cluster][0m
[36m(Trainer pid=18720, ip=192.168.2.202)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=18720, ip=192.168.2.202)[0m train_size: 32[32m [repeated 9x across cluster][0m
[36m(Trainer pid=18720, ip=192.168.2.202)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=18720, ip=192.168.2.202)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+dWs, Dataset: BZR, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  BZR  Total number of graphs:  405
Initialization start: network data collected.
using CPU
2025-07-17 13:17:50,371	INFO worker.py:1429 -- Using address 192.168.2.214:6379 set in the environment variable RAY_ADDRESS
2025-07-17 13:17:50,372	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.2.214:6379...
2025-07-17 13:17:50,377	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.2.214:8265 [39m[22m
//Log init_time: 3208.175 ms //end
//Log Large1 init network: 39695.0 //end
//Log Large2 init network: 733329.0 //end
//Log Large3 init network: 187662.0 //end
//Log Large4 init network: 376348.0 //end
//Log Server init network: 951638233.0 //end
//Log Initialization Communication Cost (MB): 908.83 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 11.75 ms//end
[36m(Trainer pid=19309, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=19309, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=19309, ip=192.168.47.52)[0m inx: 0
[36m(Trainer pid=19309, ip=192.168.47.52)[0m dataset_trainer_name: 0-BZR
[36m(Trainer pid=19309, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe1929eac50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe192810a10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe1928121d0>}
[36m(Trainer pid=19309, ip=192.168.47.52)[0m num_node_features: 53
[36m(Trainer pid=19309, ip=192.168.47.52)[0m num_graph_labels: 2
[36m(Trainer pid=19309, ip=192.168.47.52)[0m train_size: 32
//Log Max memory for Large1: 6122450944.0 //end
//Log Max memory for Large2: 9147330560.0 //end
//Log Max memory for Large3: 6952964096.0 //end
//Log Max memory for Large4: 6380769280.0 //end
//Log Max memory for Server: 17792069632.0 //end
//Log Large1 network: 812291.0 //end
//Log Large2 network: 3419486.0 //end
//Log Large3 network: 996980.0 //end
//Log Large4 network: 539495.0 //end
//Log Server network: 570234123.0 //end
//Log Total Actual Pretrain Comm Cost: 549.32 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.

==================================================
CLUSTERING STATISTICS
==================================================
Algorithm: gcfl
Clustering Events: 8/200
Clustering Frequency: 4.0%
Clustering Rounds: [21, 22, 23, 24, 25, 26, 27, 28]
==================================================
//train_time: 43770.158 ms//end
//Log Max memory for Large1: 6073073664.0 //end
//Log Max memory for Large2: 9085227008.0 //end
//Log Max memory for Large3: 6912618496.0 //end
//Log Max memory for Large4: 6355169280.0 //end
//Log Max memory for Server: 17776795648.0 //end
//Log Large1 network: 179615461.0 //end
//Log Large2 network: 275553979.0 //end
//Log Large3 network: 268879668.0 //end
//Log Large4 network: 180328329.0 //end
//Log Server network: 26108290.0 //end
//Log Total Actual Train Comm Cost: 887.38 MB //end
Train end time recorded and duration set to gauge.
       test_acc
0-BZR      1.00
1-BZR      0.75
2-BZR      0.75
3-BZR      0.75
4-BZR      0.75
5-BZR      0.75
6-BZR      0.75
7-BZR      0.80
8-BZR      0.80
9-BZR      0.80
Average test accuracy: 0.7898753894080996
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
[36m(Trainer pid=23563, ip=192.168.30.60)[0m inx: 9[32m [repeated 9x across cluster][0m
[36m(Trainer pid=23563, ip=192.168.30.60)[0m dataset_trainer_name: 9-BZR[32m [repeated 9x across cluster][0m
[36m(Trainer pid=23563, ip=192.168.30.60)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fcfda9bed10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fcfda221dd0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fcfda223510>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=23563, ip=192.168.30.60)[0m num_node_features: 53[32m [repeated 9x across cluster][0m
[36m(Trainer pid=23563, ip=192.168.30.60)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=23563, ip=192.168.30.60)[0m train_size: 32[32m [repeated 9x across cluster][0m
[36m(Trainer pid=23563, ip=192.168.30.60)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=23563, ip=192.168.30.60)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: FedAvg, Dataset: COX2, Trainers: 10
--------------------------------------------------------------------------------

Downloading https://www.chrsmrrs.com/graphkerneldatasets/COX2.zip
Processing...
Done!
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  COX2  Total number of graphs:  467
Initialization start: network data collected.
using CPU
2025-07-17 13:19:44,073	INFO worker.py:1429 -- Using address 192.168.2.214:6379 set in the environment variable RAY_ADDRESS
2025-07-17 13:19:44,074	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.2.214:6379...
2025-07-17 13:19:44,080	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.2.214:8265 [39m[22m
//Log init_time: 3474.532 ms //end
//Log Large1 init network: 135790.0 //end
//Log Large2 init network: 286920.0 //end
//Log Large3 init network: 509494.0 //end
//Log Large4 init network: 240769.0 //end
//Log Server init network: 836327865.0 //end
//Log Initialization Communication Cost (MB): 798.70 //end

Done setting up devices.
Running FedAvg ...
Pretrain start time recorded.
//pretrain_time: 14.322 ms//end
[36m(Trainer pid=19923, ip=192.168.2.202)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=19923, ip=192.168.2.202)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=19923, ip=192.168.2.202)[0m inx: 1
[36m(Trainer pid=19923, ip=192.168.2.202)[0m dataset_trainer_name: 1-COX2
[36m(Trainer pid=19923, ip=192.168.2.202)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe0ef755150>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe0ef7a6850>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe0efdc15d0>}
[36m(Trainer pid=19923, ip=192.168.2.202)[0m num_node_features: 35
[36m(Trainer pid=19923, ip=192.168.2.202)[0m num_graph_labels: 2
[36m(Trainer pid=19923, ip=192.168.2.202)[0m train_size: 36
//Log Max memory for Large1: 6810898432.0 //end
//Log Max memory for Large2: 8646139904.0 //end
//Log Max memory for Large3: 6442422272.0 //end
//Log Max memory for Large4: 7043330048.0 //end
//Log Max memory for Server: 17830572032.0 //end
//Log Large1 network: 1011152.0 //end
//Log Large2 network: 3695355.0 //end
//Log Large3 network: 671593.0 //end
//Log Large4 network: 1028019.0 //end
//Log Server network: 842015077.0 //end
//Log Total Actual Pretrain Comm Cost: 809.12 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 15881.893 ms//end
//Log Max memory for Large1: 6785101824.0 //end
//Log Max memory for Large2: 8587640832.0 //end
//Log Max memory for Large3: 6409863168.0 //end
//Log Max memory for Large4: 7026061312.0 //end
//Log Max memory for Server: 17872728064.0 //end
//Log Large1 network: 81213705.0 //end
//Log Large2 network: 58602106.0 //end
//Log Large3 network: 54442786.0 //end
//Log Large4 network: 80994082.0 //end
//Log Server network: 133560630.0 //end
//Log Total Actual Train Comm Cost: 389.87 MB //end
Train end time recorded and duration set to gauge.
        test_acc
1-COX2       1.0
0-COX2       0.8
7-COX2       0.6
5-COX2       1.0
8-COX2       1.0
9-COX2       1.0
2-COX2       0.8
4-COX2       1.0
6-COX2       0.8
3-COX2       0.8
Average test accuracy: 0.8795640326975477
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=20101, ip=192.168.47.55)[0m inx: 8[32m [repeated 9x across cluster][0m
[36m(Trainer pid=20101, ip=192.168.47.55)[0m dataset_trainer_name: 8-COX2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=20101, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8c72752d90>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8c721ca8d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8c727fc890>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=20101, ip=192.168.47.55)[0m num_node_features: 35[32m [repeated 9x across cluster][0m
[36m(Trainer pid=20101, ip=192.168.47.55)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=20101, ip=192.168.47.55)[0m train_size: 36[32m [repeated 9x across cluster][0m
[36m(Trainer pid=20101, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=20101, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL, Dataset: COX2, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  COX2  Total number of graphs:  467
Initialization start: network data collected.
using CPU
2025-07-17 13:21:08,737	INFO worker.py:1429 -- Using address 192.168.2.214:6379 set in the environment variable RAY_ADDRESS
2025-07-17 13:21:08,738	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.2.214:6379...
2025-07-17 13:21:08,745	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.2.214:8265 [39m[22m
//Log init_time: 3434.454 ms //end
//Log Large1 init network: 331217.0 //end
//Log Large2 init network: 668395.0 //end
//Log Large3 init network: 250823.0 //end
//Log Large4 init network: 31110.0 //end
//Log Server init network: 165141499.0 //end
//Log Initialization Communication Cost (MB): 158.71 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 9.774 ms//end
[36m(Trainer pid=20537, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=20537, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=20537, ip=192.168.47.52)[0m inx: 0
[36m(Trainer pid=20537, ip=192.168.47.52)[0m dataset_trainer_name: 0-COX2
[36m(Trainer pid=20537, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7efb4c5afdd0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7efb3ba3ec50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7efb4c0e7010>}
[36m(Trainer pid=20537, ip=192.168.47.52)[0m num_node_features: 35
[36m(Trainer pid=20537, ip=192.168.47.52)[0m num_graph_labels: 2
[36m(Trainer pid=20537, ip=192.168.47.52)[0m train_size: 36
//Log Max memory for Large1: 6182932480.0 //end
//Log Max memory for Large2: 9238614016.0 //end
//Log Max memory for Large3: 7037497344.0 //end
//Log Max memory for Large4: 6435762176.0 //end
//Log Max memory for Server: 17832177664.0 //end
//Log Large1 network: 683274.0 //end
//Log Large2 network: 3560140.0 //end
//Log Large3 network: 1021271.0 //end
//Log Large4 network: 945274.0 //end
//Log Server network: 1513201096.0 //end
//Log Total Actual Pretrain Comm Cost: 1449.02 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.

==================================================
CLUSTERING STATISTICS
==================================================
Algorithm: gcfl
Clustering Events: 8/200
Clustering Frequency: 4.0%
Clustering Rounds: [21, 22, 23, 24, 25, 26, 27, 28]
==================================================
//train_time: 44890.287000000004 ms//end
//Log Max memory for Large1: 6120095744.0 //end
//Log Max memory for Large2: 9163177984.0 //end
//Log Max memory for Large3: 6996971520.0 //end
//Log Max memory for Large4: 6418190336.0 //end
//Log Max memory for Server: 17817341952.0 //end
//Log Large1 network: 178636277.0 //end
//Log Large2 network: 273863173.0 //end
//Log Large3 network: 268080851.0 //end
//Log Large4 network: 178741289.0 //end
//Log Server network: 26518255.0 //end
//Log Total Actual Train Comm Cost: 882.95 MB //end
Train end time recorded and duration set to gauge.
        test_acc
0-COX2       0.8
1-COX2       1.0
2-COX2       1.0
3-COX2       1.0
4-COX2       1.0
5-COX2       1.0
6-COX2       1.0
7-COX2       1.0
8-COX2       1.0
9-COX2       1.0
Average test accuracy: 0.9803814713896458
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
[36m(Trainer pid=24773, ip=192.168.30.60)[0m inx: 9[32m [repeated 9x across cluster][0m
[36m(Trainer pid=24773, ip=192.168.30.60)[0m dataset_trainer_name: 9-COX2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=24773, ip=192.168.30.60)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe95fb09f90>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe95f956a90>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe95ff9c1d0>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=24773, ip=192.168.30.60)[0m num_node_features: 35[32m [repeated 9x across cluster][0m
[36m(Trainer pid=24773, ip=192.168.30.60)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=24773, ip=192.168.30.60)[0m train_size: 37[32m [repeated 9x across cluster][0m
[36m(Trainer pid=24773, ip=192.168.30.60)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=24773, ip=192.168.30.60)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+, Dataset: COX2, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  COX2  Total number of graphs:  467
Initialization start: network data collected.
using CPU
2025-07-17 13:23:02,294	INFO worker.py:1429 -- Using address 192.168.2.214:6379 set in the environment variable RAY_ADDRESS
2025-07-17 13:23:02,295	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.2.214:6379...
2025-07-17 13:23:02,300	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.2.214:8265 [39m[22m
//Log init_time: 3291.674 ms //end
//Log Large1 init network: 163781.0 //end
//Log Large2 init network: 282073.0 //end
//Log Large3 init network: 38529.0 //end
//Log Large4 init network: 442621.0 //end
//Log Server init network: 1187681271.0 //end
//Log Initialization Communication Cost (MB): 1133.55 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 9.682 ms//end
[36m(Trainer pid=21149, ip=192.168.2.202)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=21149, ip=192.168.2.202)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=21149, ip=192.168.2.202)[0m inx: 1
[36m(Trainer pid=21149, ip=192.168.2.202)[0m dataset_trainer_name: 1-COX2
[36m(Trainer pid=21149, ip=192.168.2.202)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9b18e69150>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9b18ebacd0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9b194d40d0>}
[36m(Trainer pid=21149, ip=192.168.2.202)[0m num_node_features: 35
[36m(Trainer pid=21149, ip=192.168.2.202)[0m num_graph_labels: 2
[36m(Trainer pid=21149, ip=192.168.2.202)[0m train_size: 36
//Log Max memory for Large1: 6776737792.0 //end
//Log Max memory for Large2: 8612282368.0 //end
//Log Max memory for Large3: 6429978624.0 //end
//Log Max memory for Large4: 7034650624.0 //end
//Log Max memory for Server: 17852727296.0 //end
//Log Large1 network: 1008271.0 //end
//Log Large2 network: 3427249.0 //end
//Log Large3 network: 1037343.0 //end
//Log Large4 network: 758246.0 //end
//Log Server network: 489847804.0 //end
//Log Total Actual Pretrain Comm Cost: 473.10 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.

==================================================
CLUSTERING STATISTICS
==================================================
Algorithm: gcfl
Clustering Events: 8/200
Clustering Frequency: 4.0%
Clustering Rounds: [21, 22, 23, 24, 25, 26, 27, 28]
==================================================
//train_time: 43535.86 ms//end
//Log Max memory for Large1: 6663081984.0 //end
//Log Max memory for Large2: 8492118016.0 //end
//Log Max memory for Large3: 6358036480.0 //end
//Log Max memory for Large4: 6939357184.0 //end
//Log Max memory for Server: 17817858048.0 //end
//Log Large1 network: 267243525.0 //end
//Log Large2 network: 185334528.0 //end
//Log Large3 network: 178598211.0 //end
//Log Large4 network: 268320870.0 //end
//Log Server network: 26293486.0 //end
//Log Total Actual Train Comm Cost: 882.90 MB //end
Train end time recorded and duration set to gauge.
        test_acc
0-COX2       1.0
1-COX2       1.0
2-COX2       1.0
3-COX2       1.0
4-COX2       0.8
5-COX2       1.0
6-COX2       1.0
7-COX2       1.0
8-COX2       1.0
9-COX2       1.0
Average test accuracy: 0.9798365122615804
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
[36m(Trainer pid=21322, ip=192.168.47.55)[0m inx: 8[32m [repeated 9x across cluster][0m
[36m(Trainer pid=21322, ip=192.168.47.55)[0m dataset_trainer_name: 8-COX2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=21322, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe28dfbe5d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe28de066d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fe28e44ead0>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=21322, ip=192.168.47.55)[0m num_node_features: 35[32m [repeated 9x across cluster][0m
[36m(Trainer pid=21322, ip=192.168.47.55)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=21322, ip=192.168.47.55)[0m train_size: 36[32m [repeated 9x across cluster][0m
[36m(Trainer pid=21322, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=21322, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+dWs, Dataset: COX2, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  COX2  Total number of graphs:  467
Initialization start: network data collected.
using CPU
2025-07-17 13:24:54,623	INFO worker.py:1429 -- Using address 192.168.2.214:6379 set in the environment variable RAY_ADDRESS
2025-07-17 13:24:54,623	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.2.214:6379...
2025-07-17 13:24:54,629	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.2.214:8265 [39m[22m
//Log init_time: 3262.7619999999997 ms //end
//Log Large1 init network: 40669.0 //end
//Log Large2 init network: 388860.0 //end
//Log Large3 init network: 40351.0 //end
//Log Large4 init network: 238586.0 //end
//Log Server init network: 1002378322.0 //end
//Log Initialization Communication Cost (MB): 956.62 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 11.875 ms//end
[36m(Trainer pid=21876, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=21876, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=21876, ip=192.168.47.52)[0m inx: 0
[36m(Trainer pid=21876, ip=192.168.47.52)[0m dataset_trainer_name: 0-COX2
[36m(Trainer pid=21876, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5e8cc12b90>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5e8c9fe7d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f5e8d019c10>}
[36m(Trainer pid=21876, ip=192.168.47.52)[0m num_node_features: 35
[36m(Trainer pid=21876, ip=192.168.47.52)[0m num_graph_labels: 2
[36m(Trainer pid=21876, ip=192.168.47.52)[0m train_size: 36
//Log Max memory for Large1: 6158974976.0 //end
//Log Max memory for Large2: 9172635648.0 //end
//Log Max memory for Large3: 6983446528.0 //end
//Log Max memory for Large4: 6398111744.0 //end
//Log Max memory for Server: 17855877120.0 //end
//Log Large1 network: 869718.0 //end
//Log Large2 network: 3534930.0 //end
//Log Large3 network: 1195291.0 //end
//Log Large4 network: 690041.0 //end
//Log Server network: 676192160.0 //end
//Log Total Actual Pretrain Comm Cost: 650.87 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.

==================================================
CLUSTERING STATISTICS
==================================================
Algorithm: gcfl
Clustering Events: 8/200
Clustering Frequency: 4.0%
Clustering Rounds: [21, 22, 23, 24, 25, 26, 27, 28]
==================================================
//train_time: 44441.280999999995 ms//end
//Log Max memory for Large1: 6122012672.0 //end
//Log Max memory for Large2: 9115951104.0 //end
//Log Max memory for Large3: 6950092800.0 //end
//Log Max memory for Large4: 6357073920.0 //end
//Log Max memory for Server: 17839280128.0 //end
//Log Large1 network: 178484632.0 //end
//Log Large2 network: 273842392.0 //end
//Log Large3 network: 268330172.0 //end
//Log Large4 network: 178669564.0 //end
//Log Server network: 26427103.0 //end
//Log Total Actual Train Comm Cost: 882.87 MB //end
Train end time recorded and duration set to gauge.
        test_acc
0-COX2       0.8
1-COX2       1.0
2-COX2       1.0
3-COX2       1.0
4-COX2       1.0
5-COX2       1.0
6-COX2       1.0
7-COX2       1.0
8-COX2       1.0
9-COX2       0.8
Average test accuracy: 0.9602179836512262
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
[36m(Trainer pid=26105, ip=192.168.30.60)[0m inx: 9[32m [repeated 9x across cluster][0m
[36m(Trainer pid=26105, ip=192.168.30.60)[0m dataset_trainer_name: 9-COX2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=26105, ip=192.168.30.60)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9b0a3d0910>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9b0a41a610>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9b0aa355d0>}[32m [repeated 9x across cluster][0m
[36m(Trainer pid=26105, ip=192.168.30.60)[0m num_node_features: 35[32m [repeated 9x across cluster][0m
[36m(Trainer pid=26105, ip=192.168.30.60)[0m num_graph_labels: 2[32m [repeated 9x across cluster][0m
[36m(Trainer pid=26105, ip=192.168.30.60)[0m train_size: 37[32m [repeated 9x across cluster][0m
[36m(Trainer pid=26105, ip=192.168.30.60)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 9x across cluster][0m
[36m(Trainer pid=26105, ip=192.168.30.60)[0m   return torch.load(io.BytesIO(b))[32m [repeated 9x across cluster][0m

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: FedAvg, Dataset: DHFR, Trainers: 10
--------------------------------------------------------------------------------

Downloading https://www.chrsmrrs.com/graphkerneldatasets/DHFR.zip
Processing...
Done!
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  DHFR  Total number of graphs:  756
Initialization start: network data collected.
using CPU
2025-07-17 13:26:49,382	INFO worker.py:1429 -- Using address 192.168.2.214:6379 set in the environment variable RAY_ADDRESS
2025-07-17 13:26:49,383	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.2.214:6379...
2025-07-17 13:26:49,389	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.2.214:8265 [39m[22m
[36m(Trainer pid=22548, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=22548, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=22548, ip=192.168.47.55)[0m inx: 0
[36m(Trainer pid=22548, ip=192.168.47.55)[0m dataset_trainer_name: 0-DHFR
[36m(Trainer pid=22548, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f09248e3790>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f09260bd1d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0924810e90>}
[36m(Trainer pid=22548, ip=192.168.47.55)[0m num_node_features: 53
[36m(Trainer pid=22548, ip=192.168.47.55)[0m num_graph_labels: 2
[36m(Trainer pid=22548, ip=192.168.47.55)[0m train_size: 64
[36m(Trainer pid=22643, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 4x across cluster][0m
[36m(Trainer pid=22643, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 4x across cluster][0m
[36m(Trainer pid=22643, ip=192.168.47.55)[0m inx: 4[32m [repeated 4x across cluster][0m
[36m(Trainer pid=22643, ip=192.168.47.55)[0m dataset_trainer_name: 4-DHFR[32m [repeated 4x across cluster][0m
[36m(Trainer pid=22643, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f92e0dd4550>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f92ec48f5d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f92ec47c450>}[32m [repeated 4x across cluster][0m
[36m(Trainer pid=22643, ip=192.168.47.55)[0m num_node_features: 53[32m [repeated 4x across cluster][0m
[36m(Trainer pid=22643, ip=192.168.47.55)[0m num_graph_labels: 2[32m [repeated 4x across cluster][0m
[36m(Trainer pid=22643, ip=192.168.47.55)[0m train_size: 57[32m [repeated 4x across cluster][0m
//Log init_time: 13460.577000000001 ms //end
//Log Large1 init network: 1524842.0 //end
//Log Large2 init network: 2377064.0 //end
//Log Large3 init network: 1654927.0 //end
//Log Large4 init network: 2466034.0 //end
//Log Server init network: 4365370984.0 //end
//Log Initialization Communication Cost (MB): 4170.79 //end

Done setting up devices.
Running FedAvg ...
Pretrain start time recorded.
//pretrain_time: 9.469999999999999 ms//end
[36m(Trainer pid=22748, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 4x across cluster][0m
[36m(Trainer pid=22748, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 4x across cluster][0m
[36m(Trainer pid=22748, ip=192.168.47.55)[0m inx: 8[32m [repeated 4x across cluster][0m
[36m(Trainer pid=22748, ip=192.168.47.55)[0m dataset_trainer_name: 8-DHFR[32m [repeated 4x across cluster][0m
[36m(Trainer pid=22748, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f56ca121510>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f56ca7bc8d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f56ca7a3d50>}[32m [repeated 4x across cluster][0m
[36m(Trainer pid=22748, ip=192.168.47.55)[0m num_node_features: 53[32m [repeated 4x across cluster][0m
[36m(Trainer pid=22748, ip=192.168.47.55)[0m num_graph_labels: 2[32m [repeated 4x across cluster][0m
[36m(Trainer pid=22748, ip=192.168.47.55)[0m train_size: 61[32m [repeated 4x across cluster][0m
//Log Max memory for Large1: 8094298112.0 //end
//Log Max memory for Large2: 9633497088.0 //end
//Log Max memory for Large3: 7472070656.0 //end
//Log Max memory for Large4: 8545939456.0 //end
//Log Max memory for Server: 17928814592.0 //end
//Log Large1 network: 1350106.0 //end
//Log Large2 network: 3248487.0 //end
//Log Large3 network: 588402.0 //end
//Log Large4 network: 631793.0 //end
//Log Server network: 1898837391.0 //end
//Log Total Actual Pretrain Comm Cost: 1816.42 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 17195.65 ms//end
//Log Max memory for Large1: 8069824512.0 //end
//Log Max memory for Large2: 9587679232.0 //end
//Log Max memory for Large3: 7449186304.0 //end
//Log Max memory for Large4: 8543272960.0 //end
//Log Max memory for Server: 17958379520.0 //end
//Log Large1 network: 81081852.0 //end
//Log Large2 network: 58620958.0 //end
//Log Large3 network: 54448664.0 //end
//Log Large4 network: 81059744.0 //end
//Log Server network: 133870606.0 //end
//Log Total Actual Train Comm Cost: 390.13 MB //end
Train end time recorded and duration set to gauge.
        test_acc
1-DHFR  0.714286
2-DHFR  0.625000
5-DHFR  0.714286
6-DHFR  0.555556
8-DHFR  0.625000
9-DHFR  0.625000
4-DHFR  0.625000
0-DHFR  0.750000
7-DHFR  0.500000
3-DHFR  0.750000
Average test accuracy: 0.6491495655389167
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=22696, ip=192.168.2.202)[0m inx: 9
[36m(Trainer pid=22696, ip=192.168.2.202)[0m dataset_trainer_name: 9-DHFR
[36m(Trainer pid=22696, ip=192.168.2.202)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f390896f8d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3908de8c90>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3908dd4c10>}
[36m(Trainer pid=22696, ip=192.168.2.202)[0m num_node_features: 53
[36m(Trainer pid=22696, ip=192.168.2.202)[0m num_graph_labels: 2
[36m(Trainer pid=22696, ip=192.168.2.202)[0m train_size: 57
[36m(Trainer pid=22696, ip=192.168.2.202)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=22696, ip=192.168.2.202)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL, Dataset: DHFR, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  DHFR  Total number of graphs:  756
Initialization start: network data collected.
using CPU
2025-07-17 13:28:25,450	INFO worker.py:1429 -- Using address 192.168.2.214:6379 set in the environment variable RAY_ADDRESS
2025-07-17 13:28:25,450	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.2.214:6379...
2025-07-17 13:28:25,456	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.2.214:8265 [39m[22m
[36m(Trainer pid=23155, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=23155, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=23155, ip=192.168.47.52)[0m inx: 0
[36m(Trainer pid=23155, ip=192.168.47.52)[0m dataset_trainer_name: 0-DHFR
[36m(Trainer pid=23155, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f7071f520d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f70722bd390>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f7071d80d90>}
[36m(Trainer pid=23155, ip=192.168.47.52)[0m num_node_features: 53
[36m(Trainer pid=23155, ip=192.168.47.52)[0m num_graph_labels: 2
[36m(Trainer pid=23155, ip=192.168.47.52)[0m train_size: 64
[36m(Trainer pid=23252, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 4x across cluster][0m
[36m(Trainer pid=23252, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))[32m [repeated 4x across cluster][0m
[36m(Trainer pid=23252, ip=192.168.47.52)[0m inx: 4[32m [repeated 4x across cluster][0m
[36m(Trainer pid=23252, ip=192.168.47.52)[0m dataset_trainer_name: 4-DHFR[32m [repeated 4x across cluster][0m
[36m(Trainer pid=23252, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7efd7808e410>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7efd781de4d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7efd78201b50>}[32m [repeated 4x across cluster][0m
[36m(Trainer pid=23252, ip=192.168.47.52)[0m num_node_features: 53[32m [repeated 4x across cluster][0m
[36m(Trainer pid=23252, ip=192.168.47.52)[0m num_graph_labels: 2[32m [repeated 4x across cluster][0m
[36m(Trainer pid=23252, ip=192.168.47.52)[0m train_size: 57[32m [repeated 4x across cluster][0m
//Log init_time: 13585.582 ms //end
//Log Large1 init network: 1678442.0 //end
//Log Large2 init network: 2302852.0 //end
//Log Large3 init network: 1879150.0 //end
//Log Large4 init network: 1575831.0 //end
//Log Server init network: 4365500516.0 //end
//Log Initialization Communication Cost (MB): 4170.36 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 8.444 ms//end
[36m(Trainer pid=23349, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 4x across cluster][0m
[36m(Trainer pid=23349, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))[32m [repeated 4x across cluster][0m
[36m(Trainer pid=23349, ip=192.168.47.52)[0m inx: 8[32m [repeated 4x across cluster][0m
[36m(Trainer pid=23349, ip=192.168.47.52)[0m dataset_trainer_name: 8-DHFR[32m [repeated 4x across cluster][0m
[36m(Trainer pid=23349, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd3e5f2ba50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd3e5ee2f90>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd3e5f041d0>}[32m [repeated 4x across cluster][0m
[36m(Trainer pid=23349, ip=192.168.47.52)[0m num_node_features: 53[32m [repeated 4x across cluster][0m
[36m(Trainer pid=23349, ip=192.168.47.52)[0m num_graph_labels: 2[32m [repeated 4x across cluster][0m
[36m(Trainer pid=23349, ip=192.168.47.52)[0m train_size: 61[32m [repeated 4x across cluster][0m
//Log Max memory for Large1: 7169290240.0 //end
//Log Max memory for Large2: 10556006400.0 //end
//Log Max memory for Large3: 8558403584.0 //end
//Log Max memory for Large4: 7480344576.0 //end
//Log Max memory for Server: 17953341440.0 //end
//Log Large1 network: 564671.0 //end
//Log Large2 network: 3748239.0 //end
//Log Large3 network: 1307438.0 //end
//Log Large4 network: 524480.0 //end
//Log Server network: 1898001142.0 //end
//Log Total Actual Pretrain Comm Cost: 1815.94 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.

==================================================
CLUSTERING STATISTICS
==================================================
Algorithm: gcfl
Clustering Events: 8/200
Clustering Frequency: 4.0%
Clustering Rounds: [21, 22, 23, 24, 25, 26, 27, 28]
==================================================
//train_time: 45341.875 ms//end
//Log Max memory for Large1: 7146582016.0 //end
//Log Max memory for Large2: 10482114560.0 //end
//Log Max memory for Large3: 8524226560.0 //end
//Log Max memory for Large4: 7456583680.0 //end
//Log Max memory for Server: 17883291648.0 //end
//Log Large1 network: 179625657.0 //end
//Log Large2 network: 276686304.0 //end
//Log Large3 network: 268860075.0 //end
//Log Large4 network: 179669992.0 //end
//Log Server network: 26683019.0 //end
//Log Total Actual Train Comm Cost: 888.37 MB //end
Train end time recorded and duration set to gauge.
        test_acc
0-DHFR  0.750000
1-DHFR  0.714286
2-DHFR  0.714286
3-DHFR  0.714286
4-DHFR  0.750000
5-DHFR  0.750000
6-DHFR  0.625000
7-DHFR  0.750000
8-DHFR  0.714286
9-DHFR  0.555556
Average test accuracy: 0.7039854211235244
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
[36m(Trainer pid=27460, ip=192.168.30.60)[0m inx: 9
[36m(Trainer pid=27460, ip=192.168.30.60)[0m dataset_trainer_name: 9-DHFR
[36m(Trainer pid=27460, ip=192.168.30.60)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f42741e8390>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4274610610>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f427463d550>}
[36m(Trainer pid=27460, ip=192.168.30.60)[0m num_node_features: 53
[36m(Trainer pid=27460, ip=192.168.30.60)[0m num_graph_labels: 2
[36m(Trainer pid=27460, ip=192.168.30.60)[0m train_size: 57
[36m(Trainer pid=27460, ip=192.168.30.60)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=27460, ip=192.168.30.60)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+, Dataset: DHFR, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  DHFR  Total number of graphs:  756
Initialization start: network data collected.
using CPU
2025-07-17 13:30:29,710	INFO worker.py:1429 -- Using address 192.168.2.214:6379 set in the environment variable RAY_ADDRESS
2025-07-17 13:30:29,710	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.2.214:6379...
2025-07-17 13:30:29,720	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.2.214:8265 [39m[22m
[36m(Trainer pid=23864, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=23864, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=23864, ip=192.168.47.55)[0m inx: 0
[36m(Trainer pid=23864, ip=192.168.47.55)[0m dataset_trainer_name: 0-DHFR
[36m(Trainer pid=23864, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f00542bde10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0054022c10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0053af9310>}
[36m(Trainer pid=23864, ip=192.168.47.55)[0m num_node_features: 53
[36m(Trainer pid=23864, ip=192.168.47.55)[0m num_graph_labels: 2
[36m(Trainer pid=23864, ip=192.168.47.55)[0m train_size: 64
[36m(Trainer pid=23961, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 4x across cluster][0m
[36m(Trainer pid=23961, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 4x across cluster][0m
//Log init_time: 13234.561 ms //end
//Log Large1 init network: 1586680.0 //end
//Log Large2 init network: 2410723.0 //end
//Log Large3 init network: 1591689.0 //end
//Log Large4 init network: 1588165.0 //end
//Log Server init network: 4366853121.0 //end
//Log Initialization Communication Cost (MB): 4171.40 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 8.283000000000001 ms//end
[36m(Trainer pid=23961, ip=192.168.47.55)[0m inx: 4[32m [repeated 4x across cluster][0m
[36m(Trainer pid=23961, ip=192.168.47.55)[0m dataset_trainer_name: 4-DHFR[32m [repeated 4x across cluster][0m
[36m(Trainer pid=23961, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2af783a650>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2af7cb7590>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f2af7ccb090>}[32m [repeated 4x across cluster][0m
[36m(Trainer pid=23961, ip=192.168.47.55)[0m num_node_features: 53[32m [repeated 4x across cluster][0m
[36m(Trainer pid=23961, ip=192.168.47.55)[0m num_graph_labels: 2[32m [repeated 4x across cluster][0m
[36m(Trainer pid=23961, ip=192.168.47.55)[0m train_size: 57[32m [repeated 4x across cluster][0m
[36m(Trainer pid=24065, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 4x across cluster][0m
[36m(Trainer pid=24065, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 4x across cluster][0m
[36m(Trainer pid=24065, ip=192.168.47.55)[0m inx: 8[32m [repeated 4x across cluster][0m
[36m(Trainer pid=24065, ip=192.168.47.55)[0m dataset_trainer_name: 8-DHFR[32m [repeated 4x across cluster][0m
[36m(Trainer pid=24065, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4ffc443710>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4ffd1cbd50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4ffc8a0fd0>}[32m [repeated 4x across cluster][0m
[36m(Trainer pid=24065, ip=192.168.47.55)[0m num_node_features: 53[32m [repeated 4x across cluster][0m
[36m(Trainer pid=24065, ip=192.168.47.55)[0m num_graph_labels: 2[32m [repeated 4x across cluster][0m
[36m(Trainer pid=24065, ip=192.168.47.55)[0m train_size: 61[32m [repeated 4x across cluster][0m
//Log Max memory for Large1: 8108748800.0 //end
//Log Max memory for Large2: 9608876032.0 //end
//Log Max memory for Large3: 7482744832.0 //end
//Log Max memory for Large4: 8542187520.0 //end
//Log Max memory for Server: 17996537856.0 //end
//Log Large1 network: 1267059.0 //end
//Log Large2 network: 3233931.0 //end
//Log Large3 network: 531419.0 //end
//Log Large4 network: 1422688.0 //end
//Log Server network: 1898577102.0 //end
//Log Total Actual Pretrain Comm Cost: 1816.78 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.

==================================================
CLUSTERING STATISTICS
==================================================
Algorithm: gcfl
Clustering Events: 8/200
Clustering Frequency: 4.0%
Clustering Rounds: [21, 22, 23, 24, 25, 26, 27, 28]
==================================================
//train_time: 44834.55699999999 ms//end
//Log Max memory for Large1: 8066060288.0 //end
//Log Max memory for Large2: 9566396416.0 //end
//Log Max memory for Large3: 7461502976.0 //end
//Log Max memory for Large4: 8520667136.0 //end
//Log Max memory for Server: 17907458048.0 //end
//Log Large1 network: 269819679.0 //end
//Log Large2 network: 186252562.0 //end
//Log Large3 network: 179670806.0 //end
//Log Large4 network: 268816102.0 //end
//Log Server network: 26457216.0 //end
//Log Total Actual Train Comm Cost: 887.89 MB //end
Train end time recorded and duration set to gauge.
        test_acc
0-DHFR  0.714286
1-DHFR  0.750000
2-DHFR  0.750000
3-DHFR  0.750000
4-DHFR  0.750000
5-DHFR  0.750000
6-DHFR  0.750000
7-DHFR  0.750000
8-DHFR  0.750000
9-DHFR  0.625000
Average test accuracy: 0.7343415735678631
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
[36m(Trainer pid=24007, ip=192.168.2.202)[0m inx: 9
[36m(Trainer pid=24007, ip=192.168.2.202)[0m dataset_trainer_name: 9-DHFR
[36m(Trainer pid=24007, ip=192.168.2.202)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1da5a4dd10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1da60aaed0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1da5ee9d90>}
[36m(Trainer pid=24007, ip=192.168.2.202)[0m num_node_features: 53
[36m(Trainer pid=24007, ip=192.168.2.202)[0m num_graph_labels: 2
[36m(Trainer pid=24007, ip=192.168.2.202)[0m train_size: 57
[36m(Trainer pid=24007, ip=192.168.2.202)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=24007, ip=192.168.2.202)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+dWs, Dataset: DHFR, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  DHFR  Total number of graphs:  756
Initialization start: network data collected.
using CPU
2025-07-17 13:32:33,141	INFO worker.py:1429 -- Using address 192.168.2.214:6379 set in the environment variable RAY_ADDRESS
2025-07-17 13:32:33,141	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.2.214:6379...
2025-07-17 13:32:33,147	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.2.214:8265 [39m[22m
[36m(Trainer pid=24591, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=24591, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=24591, ip=192.168.47.52)[0m inx: 0
[36m(Trainer pid=24591, ip=192.168.47.52)[0m dataset_trainer_name: 0-DHFR
[36m(Trainer pid=24591, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f46985d8ed0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f469b89fdd0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f469a488b10>}
[36m(Trainer pid=24591, ip=192.168.47.52)[0m num_node_features: 53
[36m(Trainer pid=24591, ip=192.168.47.52)[0m num_graph_labels: 2
[36m(Trainer pid=24591, ip=192.168.47.52)[0m train_size: 64
[36m(Trainer pid=24686, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 4x across cluster][0m
[36m(Trainer pid=24686, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))[32m [repeated 4x across cluster][0m
[36m(Trainer pid=24686, ip=192.168.47.52)[0m inx: 4[32m [repeated 4x across cluster][0m
[36m(Trainer pid=24686, ip=192.168.47.52)[0m dataset_trainer_name: 4-DHFR[32m [repeated 4x across cluster][0m
[36m(Trainer pid=24686, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fcb54428b10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fcb66b39450>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fcb66b2dd90>}[32m [repeated 4x across cluster][0m
[36m(Trainer pid=24686, ip=192.168.47.52)[0m num_node_features: 53[32m [repeated 4x across cluster][0m
[36m(Trainer pid=24686, ip=192.168.47.52)[0m num_graph_labels: 2[32m [repeated 4x across cluster][0m
[36m(Trainer pid=24686, ip=192.168.47.52)[0m train_size: 57[32m [repeated 4x across cluster][0m
//Log init_time: 13458.472 ms //end
//Log Large1 init network: 1817660.0 //end
//Log Large2 init network: 2358557.0 //end
//Log Large3 init network: 1639111.0 //end
//Log Large4 init network: 1823739.0 //end
//Log Server init network: 4367583282.0 //end
//Log Initialization Communication Cost (MB): 4172.54 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 25.998 ms//end
[36m(Trainer pid=24783, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 4x across cluster][0m
[36m(Trainer pid=24783, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))[32m [repeated 4x across cluster][0m
[36m(Trainer pid=24783, ip=192.168.47.52)[0m inx: 8[32m [repeated 4x across cluster][0m
[36m(Trainer pid=24783, ip=192.168.47.52)[0m dataset_trainer_name: 8-DHFR[32m [repeated 4x across cluster][0m
[36m(Trainer pid=24783, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd74bc4cd90>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd78828b050>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd78011dd50>}[32m [repeated 4x across cluster][0m
[36m(Trainer pid=24783, ip=192.168.47.52)[0m num_node_features: 53[32m [repeated 4x across cluster][0m
[36m(Trainer pid=24783, ip=192.168.47.52)[0m num_graph_labels: 2[32m [repeated 4x across cluster][0m
[36m(Trainer pid=24783, ip=192.168.47.52)[0m train_size: 61[32m [repeated 4x across cluster][0m
//Log Max memory for Large1: 7216345088.0 //end
//Log Max memory for Large2: 10555211776.0 //end
//Log Max memory for Large3: 8543506432.0 //end
//Log Max memory for Large4: 7486271488.0 //end
//Log Max memory for Server: 17953611776.0 //end
//Log Large1 network: 527319.0 //end
//Log Large2 network: 3767420.0 //end
//Log Large3 network: 1434934.0 //end
//Log Large4 network: 585490.0 //end
//Log Server network: 1898086027.0 //end
//Log Total Actual Pretrain Comm Cost: 1816.18 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.

==================================================
CLUSTERING STATISTICS
==================================================
Algorithm: gcfl
Clustering Events: 8/200
Clustering Frequency: 4.0%
Clustering Rounds: [21, 22, 23, 24, 25, 26, 27, 28]
==================================================
//train_time: 46279.015999999996 ms//end
//Log Max memory for Large1: 7201136640.0 //end
//Log Max memory for Large2: 10509291520.0 //end
//Log Max memory for Large3: 8515121152.0 //end
//Log Max memory for Large4: 7466516480.0 //end
//Log Max memory for Server: 17923256320.0 //end
//Log Large1 network: 179718176.0 //end
//Log Large2 network: 276687487.0 //end
//Log Large3 network: 268840681.0 //end
//Log Large4 network: 179707917.0 //end
//Log Server network: 26734895.0 //end
//Log Total Actual Train Comm Cost: 888.53 MB //end
Train end time recorded and duration set to gauge.
        test_acc
0-DHFR  0.714286
1-DHFR  0.750000
2-DHFR  0.750000
3-DHFR  0.714286
4-DHFR  0.750000
5-DHFR  0.750000
6-DHFR  0.625000
7-DHFR  0.750000
8-DHFR  0.625000
9-DHFR  0.750000
Average test accuracy: 0.7165735678630853
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
[36m(Trainer pid=28889, ip=192.168.30.60)[0m inx: 9
[36m(Trainer pid=28889, ip=192.168.30.60)[0m dataset_trainer_name: 9-DHFR
[36m(Trainer pid=28889, ip=192.168.30.60)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc455b12cd0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc455f80b10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc455f88bd0>}
[36m(Trainer pid=28889, ip=192.168.30.60)[0m num_node_features: 53
[36m(Trainer pid=28889, ip=192.168.30.60)[0m num_graph_labels: 2
[36m(Trainer pid=28889, ip=192.168.30.60)[0m train_size: 57
[36m(Trainer pid=28889, ip=192.168.30.60)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=28889, ip=192.168.30.60)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: FedAvg, Dataset: AIDS, Trainers: 10
--------------------------------------------------------------------------------

Downloading https://www.chrsmrrs.com/graphkerneldatasets/AIDS.zip
Processing...
Done!
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  AIDS  Total number of graphs:  2000
Initialization start: network data collected.
using CPU
2025-07-17 13:34:40,405	INFO worker.py:1429 -- Using address 192.168.2.214:6379 set in the environment variable RAY_ADDRESS
2025-07-17 13:34:40,405	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.2.214:6379...
2025-07-17 13:34:40,410	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.2.214:8265 [39m[22m
[36m(Trainer pid=25326, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=25326, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=25326, ip=192.168.47.55)[0m inx: 0
[36m(Trainer pid=25326, ip=192.168.47.55)[0m dataset_trainer_name: 0-AIDS
[36m(Trainer pid=25326, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8eb32eec50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8eb3193dd0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8eb319e110>}
[36m(Trainer pid=25326, ip=192.168.47.55)[0m num_node_features: 38
[36m(Trainer pid=25326, ip=192.168.47.55)[0m num_graph_labels: 2
[36m(Trainer pid=25326, ip=192.168.47.55)[0m train_size: 177
[36m(Trainer pid=25393, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=25393, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=25393, ip=192.168.47.52)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=25393, ip=192.168.47.52)[0m dataset_trainer_name: 2-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=25393, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f48a721a6d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f48a70e5590>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f48a70f3e10>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=25393, ip=192.168.47.52)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=25393, ip=192.168.47.52)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=25393, ip=192.168.47.52)[0m train_size: 168[32m [repeated 2x across cluster][0m
[36m(Trainer pid=25453, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=25453, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=25453, ip=192.168.47.55)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=25453, ip=192.168.47.55)[0m dataset_trainer_name: 4-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=25453, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f192bb51750>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f1910128a50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f191012abd0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=25453, ip=192.168.47.55)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=25453, ip=192.168.47.55)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=25453, ip=192.168.47.55)[0m train_size: 168[32m [repeated 2x across cluster][0m
[36m(Trainer pid=25521, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=25521, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=25521, ip=192.168.47.52)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=25521, ip=192.168.47.52)[0m dataset_trainer_name: 6-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=25521, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f7e3bd05dd0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f7e1005df50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f7e10078d90>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=25521, ip=192.168.47.52)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=25521, ip=192.168.47.52)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=25521, ip=192.168.47.52)[0m train_size: 157[32m [repeated 2x across cluster][0m
//Log init_time: 31839.621000000003 ms //end
//Log Large1 init network: 3713497.0 //end
//Log Large2 init network: 5853277.0 //end
//Log Large3 init network: 3855799.0 //end
//Log Large4 init network: 5758828.0 //end
//Log Server init network: 12528897316.0 //end
//Log Initialization Communication Cost (MB): 11966.78 //end

Done setting up devices.
Running FedAvg ...
Pretrain start time recorded.
//pretrain_time: 11.981 ms//end
[36m(Trainer pid=25582, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=25582, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=25582, ip=192.168.47.55)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=25582, ip=192.168.47.55)[0m dataset_trainer_name: 8-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=25582, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f21abe8d2d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f21abe655d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f21abe73910>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=25582, ip=192.168.47.55)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=25582, ip=192.168.47.55)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=25582, ip=192.168.47.55)[0m train_size: 155[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 11346059264.0 //end
//Log Max memory for Large2: 11601326080.0 //end
//Log Max memory for Large3: 9646698496.0 //end
//Log Max memory for Large4: 12021313536.0 //end
//Log Max memory for Server: 18033573888.0 //end
//Log Large1 network: 2548590.0 //end
//Log Large2 network: 3243841.0 //end
//Log Large3 network: 592951.0 //end
//Log Large4 network: 615219.0 //end
//Log Server network: 1702876234.0 //end
//Log Total Actual Pretrain Comm Cost: 1630.67 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.
//train_time: 19385.0 ms//end
//Log Max memory for Large1: 11313385472.0 //end
//Log Max memory for Large2: 11567374336.0 //end
//Log Max memory for Large3: 9619943424.0 //end
//Log Max memory for Large4: 12004466688.0 //end
//Log Max memory for Server: 17971318784.0 //end
//Log Large1 network: 81103725.0 //end
//Log Large2 network: 58633297.0 //end
//Log Large3 network: 54456040.0 //end
//Log Large4 network: 81101768.0 //end
//Log Server network: 134184888.0 //end
//Log Total Actual Train Comm Cost: 390.51 MB //end
Train end time recorded and duration set to gauge.
        test_acc
1-AIDS  1.000000
5-AIDS  1.000000
8-AIDS  1.000000
4-AIDS  0.952381
0-AIDS  1.000000
6-AIDS  1.000000
7-AIDS  1.000000
3-AIDS  0.944444
2-AIDS  1.000000
9-AIDS  0.952381
Average test accuracy: 0.9851016429963798
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 444.34 MB //end
[36m(Trainer pid=25529, ip=192.168.2.202)[0m inx: 9
[36m(Trainer pid=25529, ip=192.168.2.202)[0m dataset_trainer_name: 9-AIDS
[36m(Trainer pid=25529, ip=192.168.2.202)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f92a5ff9a10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f9268050190>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f926805f850>}
[36m(Trainer pid=25529, ip=192.168.2.202)[0m num_node_features: 38
[36m(Trainer pid=25529, ip=192.168.2.202)[0m num_graph_labels: 2
[36m(Trainer pid=25529, ip=192.168.2.202)[0m train_size: 165
[36m(Trainer pid=25529, ip=192.168.2.202)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=25529, ip=192.168.2.202)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL, Dataset: AIDS, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  AIDS  Total number of graphs:  2000
Initialization start: network data collected.
using CPU
2025-07-17 13:36:37,303	INFO worker.py:1429 -- Using address 192.168.2.214:6379 set in the environment variable RAY_ADDRESS
2025-07-17 13:36:37,303	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.2.214:6379...
2025-07-17 13:36:37,309	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.2.214:8265 [39m[22m
[36m(Trainer pid=26018, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=26018, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=26018, ip=192.168.47.52)[0m inx: 0
[36m(Trainer pid=26018, ip=192.168.47.52)[0m dataset_trainer_name: 0-AIDS
[36m(Trainer pid=26018, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f389e3f5810>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f389c288550>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f389c28a090>}
[36m(Trainer pid=26018, ip=192.168.47.52)[0m num_node_features: 38
[36m(Trainer pid=26018, ip=192.168.47.52)[0m num_graph_labels: 2
[36m(Trainer pid=26018, ip=192.168.47.52)[0m train_size: 177
[36m(Trainer pid=26074, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26074, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26074, ip=192.168.47.55)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26074, ip=192.168.47.55)[0m dataset_trainer_name: 2-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26074, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f13cd1bda90>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f13982a5990>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f13982b6f90>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26074, ip=192.168.47.55)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26074, ip=192.168.47.55)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26074, ip=192.168.47.55)[0m train_size: 168[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26139, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26139, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26139, ip=192.168.47.52)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26139, ip=192.168.47.52)[0m dataset_trainer_name: 4-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26139, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4e6c2427d0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4e387ede90>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4e387fb3d0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26139, ip=192.168.47.52)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26139, ip=192.168.47.52)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26139, ip=192.168.47.52)[0m train_size: 168[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26201, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26201, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26201, ip=192.168.47.55)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26201, ip=192.168.47.55)[0m dataset_trainer_name: 6-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26201, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f14d7fec090>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f14d7ea9a10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f14b42a0cd0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26201, ip=192.168.47.55)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26201, ip=192.168.47.55)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26201, ip=192.168.47.55)[0m train_size: 157[32m [repeated 2x across cluster][0m
//Log init_time: 31186.037 ms //end
//Log Large1 init network: 3727582.0 //end
//Log Large2 init network: 5120414.0 //end
//Log Large3 init network: 5708813.0 //end
//Log Large4 init network: 3875677.0 //end
//Log Server init network: 12767797207.0 //end
//Log Initialization Communication Cost (MB): 12193.90 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 10.447 ms//end
[36m(Trainer pid=26268, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26268, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26268, ip=192.168.47.52)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26268, ip=192.168.47.52)[0m dataset_trainer_name: 8-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26268, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7efa6c441b50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7efa6c30c9d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7efa6c31afd0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26268, ip=192.168.47.52)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26268, ip=192.168.47.52)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26268, ip=192.168.47.52)[0m train_size: 155[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 9140875264.0 //end
//Log Max memory for Large2: 13776498688.0 //end
//Log Max memory for Large3: 11999711232.0 //end
//Log Max memory for Large4: 9630412800.0 //end
//Log Max memory for Server: 17994043392.0 //end
//Log Large1 network: 566460.0 //end
//Log Large2 network: 4538292.0 //end
//Log Large3 network: 592749.0 //end
//Log Large4 network: 514210.0 //end
//Log Server network: 1474054657.0 //end
//Log Total Actual Pretrain Comm Cost: 1411.69 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.

==================================================
CLUSTERING STATISTICS
==================================================
Algorithm: gcfl
Clustering Events: 8/200
Clustering Frequency: 4.0%
Clustering Rounds: [54, 55, 61, 62, 68, 69, 71, 72]
==================================================
//train_time: 44724.006 ms//end
//Log Max memory for Large1: 9119625216.0 //end
//Log Max memory for Large2: 13706981376.0 //end
//Log Max memory for Large3: 11981025280.0 //end
//Log Max memory for Large4: 9605787648.0 //end
//Log Max memory for Server: 17968181248.0 //end
//Log Large1 network: 178749739.0 //end
//Log Large2 network: 274121058.0 //end
//Log Large3 network: 268277402.0 //end
//Log Large4 network: 178958597.0 //end
//Log Server network: 26614905.0 //end
//Log Total Actual Train Comm Cost: 883.79 MB //end
Train end time recorded and duration set to gauge.
        test_acc
0-AIDS  0.947368
1-AIDS  0.952381
2-AIDS  1.000000
3-AIDS  1.000000
4-AIDS  0.909091
5-AIDS  0.952381
6-AIDS  0.952381
7-AIDS  0.954545
8-AIDS  0.950000
9-AIDS  0.950000
Average test accuracy: 0.956292388524284
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
[36m(Trainer pid=30384, ip=192.168.30.60)[0m inx: 9
[36m(Trainer pid=30384, ip=192.168.30.60)[0m dataset_trainer_name: 9-AIDS
[36m(Trainer pid=30384, ip=192.168.30.60)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7ef582d2af10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7ef56026c750>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7ef56027b1d0>}
[36m(Trainer pid=30384, ip=192.168.30.60)[0m num_node_features: 38
[36m(Trainer pid=30384, ip=192.168.30.60)[0m num_graph_labels: 2
[36m(Trainer pid=30384, ip=192.168.30.60)[0m train_size: 165
[36m(Trainer pid=30384, ip=192.168.30.60)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=30384, ip=192.168.30.60)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+, Dataset: AIDS, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  AIDS  Total number of graphs:  2000
Initialization start: network data collected.
using CPU
2025-07-17 13:38:59,177	INFO worker.py:1429 -- Using address 192.168.2.214:6379 set in the environment variable RAY_ADDRESS
2025-07-17 13:38:59,177	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.2.214:6379...
2025-07-17 13:38:59,183	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.2.214:8265 [39m[22m
[36m(Trainer pid=26799, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=26799, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=26799, ip=192.168.47.55)[0m inx: 0
[36m(Trainer pid=26799, ip=192.168.47.55)[0m dataset_trainer_name: 0-AIDS
[36m(Trainer pid=26799, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f17a86de790>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f17943bf710>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f17943c9210>}
[36m(Trainer pid=26799, ip=192.168.47.55)[0m num_node_features: 38
[36m(Trainer pid=26799, ip=192.168.47.55)[0m num_graph_labels: 2
[36m(Trainer pid=26799, ip=192.168.47.55)[0m train_size: 177
[36m(Trainer pid=26877, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26877, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26877, ip=192.168.47.52)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26877, ip=192.168.47.52)[0m dataset_trainer_name: 2-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26877, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa34f077b50>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa3218a5f10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fa3218b1510>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26877, ip=192.168.47.52)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26877, ip=192.168.47.52)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26877, ip=192.168.47.52)[0m train_size: 168[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26928, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26928, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26928, ip=192.168.47.55)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26928, ip=192.168.47.55)[0m dataset_trainer_name: 4-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26928, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f73dfaf0d10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f73df990f50>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f73df99e9d0>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26928, ip=192.168.47.55)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26928, ip=192.168.47.55)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=26928, ip=192.168.47.55)[0m train_size: 168[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27004, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27004, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27004, ip=192.168.47.52)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27004, ip=192.168.47.52)[0m dataset_trainer_name: 6-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27004, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc3eee19c10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc3e5dc4c90>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fc3e5dd7650>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27004, ip=192.168.47.52)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27004, ip=192.168.47.52)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27004, ip=192.168.47.52)[0m train_size: 157[32m [repeated 2x across cluster][0m
//Log init_time: 30809.548 ms //end
//Log Large1 init network: 3659389.0 //end
//Log Large2 init network: 5590407.0 //end
//Log Large3 init network: 3877702.0 //end
//Log Large4 init network: 5544653.0 //end
//Log Server init network: 12756650961.0 //end
//Log Initialization Communication Cost (MB): 12183.50 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 8.286999999999999 ms//end
[36m(Trainer pid=27055, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27055, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27055, ip=192.168.47.55)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27055, ip=192.168.47.55)[0m dataset_trainer_name: 8-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27055, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7efbfe9d8910>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7efbfe880ed0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7efbfc357290>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27055, ip=192.168.47.55)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27055, ip=192.168.47.55)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27055, ip=192.168.47.55)[0m train_size: 155[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 11327516672.0 //end
//Log Max memory for Large2: 11564392448.0 //end
//Log Max memory for Large3: 9641111552.0 //end
//Log Max memory for Large4: 12022927360.0 //end
//Log Max memory for Server: 18041184256.0 //end
//Log Large1 network: 2287029.0 //end
//Log Large2 network: 3237423.0 //end
//Log Large3 network: 584129.0 //end
//Log Large4 network: 596383.0 //end
//Log Server network: 1473975455.0 //end
//Log Total Actual Pretrain Comm Cost: 1412.09 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.

==================================================
CLUSTERING STATISTICS
==================================================
Algorithm: gcfl
Clustering Events: 8/200
Clustering Frequency: 4.0%
Clustering Rounds: [50, 58, 62, 63, 67, 70, 71, 72]
==================================================
//train_time: 44098.121 ms//end
//Log Max memory for Large1: 11280330752.0 //end
//Log Max memory for Large2: 11529719808.0 //end
//Log Max memory for Large3: 9605042176.0 //end
//Log Max memory for Large4: 11989512192.0 //end
//Log Max memory for Server: 17986691072.0 //end
//Log Large1 network: 267316662.0 //end
//Log Large2 network: 185370256.0 //end
//Log Large3 network: 179303404.0 //end
//Log Large4 network: 267948961.0 //end
//Log Server network: 26709023.0 //end
//Log Total Actual Train Comm Cost: 883.72 MB //end
Train end time recorded and duration set to gauge.
        test_acc
0-AIDS  0.842105
1-AIDS  0.888889
2-AIDS  0.954545
3-AIDS  0.954545
4-AIDS  0.954545
5-AIDS  0.954545
6-AIDS  0.950000
7-AIDS  1.000000
8-AIDS  0.900000
9-AIDS  0.950000
Average test accuracy: 0.9344023602333852
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
[36m(Trainer pid=27001, ip=192.168.2.202)[0m inx: 9
[36m(Trainer pid=27001, ip=192.168.2.202)[0m dataset_trainer_name: 9-AIDS
[36m(Trainer pid=27001, ip=192.168.2.202)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f02e5185710>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f02bc1936d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f02bc1aae50>}
[36m(Trainer pid=27001, ip=192.168.2.202)[0m num_node_features: 38
[36m(Trainer pid=27001, ip=192.168.2.202)[0m num_graph_labels: 2
[36m(Trainer pid=27001, ip=192.168.2.202)[0m train_size: 165
[36m(Trainer pid=27001, ip=192.168.2.202)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=27001, ip=192.168.2.202)[0m   return torch.load(io.BytesIO(b))

--------------------------------------------------------------------------------
Running experiment 1/1:
Algorithm: GCFL+dWs, Dataset: AIDS, Trainers: 10
--------------------------------------------------------------------------------

/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_transform):
/usr/local/lib/python3.11/site-packages/torch_geometric/data/dataset.py:246: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  if osp.exists(f) and torch.load(f) != _repr(self.pre_filter):
/usr/local/lib/python3.11/site-packages/torch_geometric/io/fs.py:215: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location)
Dataset name:  AIDS  Total number of graphs:  2000
Initialization start: network data collected.
using CPU
2025-07-17 13:41:19,996	INFO worker.py:1429 -- Using address 192.168.2.214:6379 set in the environment variable RAY_ADDRESS
2025-07-17 13:41:19,997	INFO worker.py:1564 -- Connecting to existing Ray cluster at address: 192.168.2.214:6379...
2025-07-17 13:41:20,003	INFO worker.py:1740 -- Connected to Ray cluster. View the dashboard at [1m[32mhttp://192.168.2.214:8265 [39m[22m
[36m(Trainer pid=27605, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=27605, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))
[36m(Trainer pid=27605, ip=192.168.47.52)[0m inx: 0
[36m(Trainer pid=27605, ip=192.168.47.52)[0m dataset_trainer_name: 0-AIDS
[36m(Trainer pid=27605, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f3976384cd0>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f39403072d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f39403129d0>}
[36m(Trainer pid=27605, ip=192.168.47.52)[0m num_node_features: 38
[36m(Trainer pid=27605, ip=192.168.47.52)[0m num_graph_labels: 2
[36m(Trainer pid=27605, ip=192.168.47.52)[0m train_size: 177
[36m(Trainer pid=27654, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27654, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27654, ip=192.168.47.55)[0m inx: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27654, ip=192.168.47.55)[0m dataset_trainer_name: 2-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27654, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f83b6619f10>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8390225090>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f8390236750>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27654, ip=192.168.47.55)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27654, ip=192.168.47.55)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27654, ip=192.168.47.55)[0m train_size: 168[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27726, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27726, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27726, ip=192.168.47.52)[0m inx: 4[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27726, ip=192.168.47.52)[0m dataset_trainer_name: 4-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27726, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f4756f87890>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f473c4019d0>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f473c40e790>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27726, ip=192.168.47.52)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27726, ip=192.168.47.52)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27726, ip=192.168.47.52)[0m train_size: 168[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27781, ip=192.168.47.55)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27781, ip=192.168.47.55)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27781, ip=192.168.47.55)[0m inx: 6[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27781, ip=192.168.47.55)[0m dataset_trainer_name: 6-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27781, ip=192.168.47.55)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f7388143650>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f735a6fa050>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f73581dce10>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27781, ip=192.168.47.55)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27781, ip=192.168.47.55)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27781, ip=192.168.47.55)[0m train_size: 157[32m [repeated 2x across cluster][0m
//Log init_time: 30218.99 ms //end
//Log Large1 init network: 3732165.0 //end
//Log Large2 init network: 5482382.0 //end
//Log Large3 init network: 4132486.0 //end
//Log Large4 init network: 3823595.0 //end
//Log Server init network: 11375910224.0 //end
//Log Initialization Communication Cost (MB): 10865.29 //end

Done setting up devices.
Running GCFL ...
Pretrain start time recorded.
//pretrain_time: 8.197 ms//end
[36m(Trainer pid=27852, ip=192.168.47.52)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27852, ip=192.168.47.52)[0m   return torch.load(io.BytesIO(b))[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27852, ip=192.168.47.52)[0m inx: 8[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27852, ip=192.168.47.52)[0m dataset_trainer_name: 8-AIDS[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27852, ip=192.168.47.52)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0b53507190>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0b533abb10>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7f0b533ca150>}[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27852, ip=192.168.47.52)[0m num_node_features: 38[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27852, ip=192.168.47.52)[0m num_graph_labels: 2[32m [repeated 2x across cluster][0m
[36m(Trainer pid=27852, ip=192.168.47.52)[0m train_size: 155[32m [repeated 2x across cluster][0m
//Log Max memory for Large1: 9135374336.0 //end
//Log Max memory for Large2: 13765738496.0 //end
//Log Max memory for Large3: 12017065984.0 //end
//Log Max memory for Large4: 9641947136.0 //end
//Log Max memory for Server: 18128138240.0 //end
//Log Large1 network: 531548.0 //end
//Log Large2 network: 4432790.0 //end
//Log Large3 network: 1935884.0 //end
//Log Large4 network: 533853.0 //end
//Log Server network: 2856328110.0 //end
//Log Total Actual Pretrain Comm Cost: 2731.10 MB //end
Pretrain end time recorded and duration set to gauge.
Train start: network data collected.
/usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
  > Training round 10 finished.
  > Training round 20 finished.
  > Training round 30 finished.
  > Training round 40 finished.
  > Training round 50 finished.
  > Training round 60 finished.
  > Training round 70 finished.
  > Training round 80 finished.
  > Training round 90 finished.
  > Training round 100 finished.
  > Training round 110 finished.
  > Training round 120 finished.
  > Training round 130 finished.
  > Training round 140 finished.
  > Training round 150 finished.
  > Training round 160 finished.
  > Training round 170 finished.
  > Training round 180 finished.
  > Training round 190 finished.
  > Training round 200 finished.

==================================================
CLUSTERING STATISTICS
==================================================
Algorithm: gcfl
Clustering Events: 8/200
Clustering Frequency: 4.0%
Clustering Rounds: [38, 59, 60, 61, 62, 63, 65, 71]
==================================================
//train_time: 45942.098 ms//end
//Log Max memory for Large1: 9096765440.0 //end
//Log Max memory for Large2: 13711335424.0 //end
//Log Max memory for Large3: 11988054016.0 //end
//Log Max memory for Large4: 9609457664.0 //end
//Log Max memory for Server: 18008326144.0 //end
//Log Large1 network: 178855452.0 //end
//Log Large2 network: 273986838.0 //end
//Log Large3 network: 268367997.0 //end
//Log Large4 network: 179139146.0 //end
//Log Server network: 26828820.0 //end
//Log Total Actual Train Comm Cost: 884.23 MB //end
Train end time recorded and duration set to gauge.
        test_acc
0-AIDS  0.904762
1-AIDS  0.842105
2-AIDS  0.956522
3-AIDS  0.952381
4-AIDS  1.000000
5-AIDS  0.950000
6-AIDS  0.954545
7-AIDS  0.956522
8-AIDS  0.950000
9-AIDS  0.956522
Average test accuracy: 0.9428646354983222
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
//Log Theoretical Pretrain Comm Cost: 0.00 MB //end
//Log Theoretical Train Comm Cost: 677.40 MB //end
[36m(Trainer pid=31955, ip=192.168.30.60)[0m inx: 9
[36m(Trainer pid=31955, ip=192.168.30.60)[0m dataset_trainer_name: 9-AIDS
[36m(Trainer pid=31955, ip=192.168.30.60)[0m dataloaders: {'train': <torch_geometric.loader.dataloader.DataLoader object at 0x7fda27c9d490>, 'val': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd9f40b3590>, 'test': <torch_geometric.loader.dataloader.DataLoader object at 0x7fd9f40cabd0>}
[36m(Trainer pid=31955, ip=192.168.30.60)[0m num_node_features: 38
[36m(Trainer pid=31955, ip=192.168.30.60)[0m num_graph_labels: 2
[36m(Trainer pid=31955, ip=192.168.30.60)[0m train_size: 165
[36m(Trainer pid=31955, ip=192.168.30.60)[0m /usr/local/lib/python3.11/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
[36m(Trainer pid=31955, ip=192.168.30.60)[0m   return torch.load(io.BytesIO(b))
Benchmark completed.

------------------------------------------
Job 'raysubmit_NXXsQUFHad7rAz6m' succeeded
------------------------------------------
