apiVersion: ray.io/v1
kind: RayService
metadata:
  name: rayservice-ha
spec:
  serveConfigV2: |
    proxy_location: EveryNode
    applications:
    - name: no_ops
      route_prefix: /
      import_path: microbenchmarks.no_ops:app_builder
      args:
        num_forwards: 0
      runtime_env:
        working_dir: https://github.com/ray-project/serve_workloads/archive/a2e2405f3117f1b4134b6924b5f44c4ff0710c00.zip
      deployments:
      - name: NoOp
        autoscaling_config:
          initial_replicas: 0
          min_replicas: 0
          max_replicas: 5
          upscale_delay_s: 3
          downscale_delay_s: 60
          metrics_interval_s: 2
          look_back_period_s: 10
        max_replicas_per_node: 1
        ray_actor_options:
          num_cpus: 1
  rayClusterConfig:
    rayVersion: '2.9.0' # should match the Ray version in the image of the containers
    enableInTreeAutoscaling: true
    autoscalerOptions:
      idleTimeoutSeconds: 1
    ######################headGroupSpecs#################################
    # Ray head pod template.
    headGroupSpec:
      # The `rayStartParams` are used to configure the `ray start` command.
      # See https://github.com/ray-project/kuberay/blob/master/docs/guidance/rayStartParams.md for the default settings of `rayStartParams` in KubeRay.
      # See https://docs.ray.io/en/latest/cluster/cli.html#ray-start for all available options in `rayStartParams`.
      rayStartParams:
        num-cpus: "0"
        dashboard-host: '0.0.0.0'
      #pod template
      template:
        spec:
          containers:
            - name: ray-head
              image: rayproject/ray:2.9.0
              resources:
                limits:
                  cpu: 2
                  memory: 2Gi
                requests:
                  cpu: 2
                  memory: 2Gi
              ports:
                - containerPort: 6379
                  name: gcs-server
                - containerPort: 8265 # Ray dashboard
                  name: dashboard
                - containerPort: 10001
                  name: client
                - containerPort: 8000
                  name: serve
    workerGroupSpecs:
      # the pod replicas in this group typed worker
      - replicas: 0
        minReplicas: 0
        maxReplicas: 5
        groupName: worker
        # The `rayStartParams` are used to configure the `ray start` command.
        # See https://github.com/ray-project/kuberay/blob/master/docs/guidance/rayStartParams.md for the default settings of `rayStartParams` in KubeRay.
        # See https://docs.ray.io/en/latest/cluster/cli.html#ray-start for all available options in `rayStartParams`.
        rayStartParams: {}
        #pod template
        template:
          spec:
            containers:
              - name: ray-worker # must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character (e.g. 'my-name',  or '123-abc'
                image: rayproject/ray:2.9.0
                lifecycle:
                  preStop:
                    exec:
                      command: ["/bin/sh","-c","ray stop"]
                resources:
                  limits:
                    cpu: 1
                    memory: 2Gi
                  requests:
                    cpu: 1
                    memory: 2Gi
---
apiVersion: ray.io/v1
kind: RayCluster
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: locust-cluster
spec:
  rayVersion: '2.9.0'
  headGroupSpec:
    rayStartParams:
      dashboard-host: '0.0.0.0'
    template:
      spec:
        containers:
        - name: ray-head
          image: rayproject/ray:2.9.0
          resources:
            limits:
              cpu: 3
              memory: 4Gi
            requests:
              cpu: 3
              memory: 4Gi
          ports:
          - containerPort: 6379
            name: gcs-server
          - containerPort: 8265
            name: dashboard
          - containerPort: 10001
            name: client
          volumeMounts:
          - mountPath: /locustfile
            name: locustfile-volume
        volumes:
        - name: locustfile-volume
          configMap:
            name: locustfile-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: locustfile-config
data:
  locustfile.py: |
    from locust import FastHttpUser, task, constant, LoadTestShape
    import os

    class ConstantUser(FastHttpUser):
        wait_time = constant(float(os.environ.get("LOCUST_WAIT_TIME", "1")))
        network_timeout = None
        connection_timeout = None
        @task
        def hello_world(self):
            self.client.post("/")

    # Derived from https://github.com/locustio/locust/blob/master/examples/custom_shape/stages.py
    class StagesShape(LoadTestShape):
        stages = [
            {"duration": 30, "users": 10, "spawn_rate": 10},
            {"duration": 60, "users": 120, "spawn_rate": 10},
            {"duration": 600, "users": 10, "spawn_rate": 10},
        ]
        def tick(self):
            run_time = self.get_run_time()
            for stage in self.stages:
                if run_time < stage["duration"]:
                    tick_data = (stage["users"], stage["spawn_rate"])
                    return tick_data
            return None
